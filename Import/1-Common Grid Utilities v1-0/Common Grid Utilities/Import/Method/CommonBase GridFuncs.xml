<AML>
 <Item type="Method" id="E32BB71155E840A18D8B0291618CEE3B" action="add">
  <comments>Flat Grid</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: Base version Grid with base Action

// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!

BaseGrid = function () {
    // determine browser type
	navigator.sayswho = (function(){
    var ua= navigator.userAgent, tem, 
    M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d\.]+)/i) || [];
    if(/trident/i.test(M[1])){
        tem=  /\brv[ :]+(\d+(\.\d+)?)/g.exec(ua) || [];
        return 'IE '+(tem[1] || '');
    }
    M= M[2]? [M[1], M[2]]:[navigator.appName, navigator.appVersion, '-?'];
			if((tem= ua.match(/version\/([\.\d]+)/i))!== null) {M[2]= tem[1];}
    return M.join(' ');
    })();
	this.browserType = navigator.sayswho;
	//if (navigator.sayswho.indexOf("MSIE") < 0)
	//{
	//alert("This form only works with 'Internet Explorer' !  Your browser is '"+ navigator.sayswho +"'");
	//}
};

BaseGrid.prototype = {
	grid: null,
	toolbar: null,
	
	handleToolbarOnLoad: function (toolbar) {
		this.toolbar = toolbar;
		if (this.grid && this.toolbar) {
			this.initialize();
		}
	},
	
	handleToolbarOnClick: function(item) {
		this.grid.turnEditOff();
		var id = item.getId();
		this.onToolbarClick({id: id});
	},
	
	handleToolbarOnChange: function(item) {
		var id = item.getId();
		this.onToolbarChange({id: id});
	},

	handleGridStart: function (grid) {
		this.grid = grid;
		if (this.grid && this.toolbar) {
			this.initialize();
		}
	},
	
	handleGridClick: function(rowId, column) {
		this.onGridClick({rowId: rowId, column: column});
	},
	
	handleGridDoubleClick: function(rowId) {
		this.onGridDoubleClick({rowId: rowId});
	},
	
	handleGridLinkClick: function(strLink) {
		this.onGridLinkClick({linkData: strLink});
	},
	
	handleGridMenuInit: function(rowId, col, p) {
		var menu = this.grid.getMenu();
		var menuItems = [];
		this.handleGridMenuClick = function (menuChoice) {}; // reset previous handler;
		menu.removeAll();
		var menuInit = this.onGridMenuInit({rowId: rowId, column: col, menuItems: menuItems});
		if (menuInit) {
			for (var i = 0; i < menuItems.length; i++) {
				if (menuItems[i].separator) {
					menu.addSeparator();
				} else {
					if (this.arasRelease === "Aras9") {
					  menu.add(i, (menuItems[i].label || ""), "", !!menuItems[i].enabled);}
					else {
					  menu.add(i.toString(), (menuItems[i].label || ""), { disable: !menuItems[i].enabled });}
				}
			}
			
			//set new handler which lock in closer menuItems
			this.handleGridMenuClick = function (menuChoice) {
				var selectedId = this.grid.getSelectedId();
				if (selectedId) {
					var menu = menuItems[parseInt(menuChoice, 10)];
					this.onGridMenuClick(menuChoice);
					//this.onGridMenuClick({menu: menu});
				}
				return;
			};
			
			return true;
		}
		
		return false;
	},
	
	handleGridMenuClick: function(menuChoice) {
		//will be overrided in handleGridMenuInit;
	},
	
	handleGridEditCell: function(mode, rowId, column) {
		if(mode === 0) {
			return this.onBeginEditCell({rowId: rowId, column: column});
		} 
		else if (mode === 2) {
			return this.onEndEditCell({rowId: rowId, column: column});
		}
		return true;
	},
	
	handleGridKeyPress: function(key) {
		this.onGridKeyPress({key: key});
	},

	handleGridOpenNode: function(rowId) {
		this.onGridOpenNode({rowId: rowId});
	},
	
	handleGridCloseNode: function(rowId) {
		this.onGridCloseNode({rowId: rowId});
	},
	
	handleGridDragEnter: function(a,b) {
		this.onGridDragEnter({a: a, b: b});
	},

	handleGridDragDrop: function(a,b) {
		this.onGridDragDrop({a: a, b: b});
	},

	handleGridDragStart: function(a,b) {
		this.onGridDragStart({a: a, b: b});
	},

//----default handlers (standardized on eArg) -- will get overridden by actual handlers -----------
	onToolbarClick: function (eArg) {return;},
	onToolbarChange: function (eArg) {return;},
	onGridClick: function (eArg) {return;},
	onGridDoubleClick: function (eArg) {return;},
	onGridLinkClick: function (eArg) {return;},
	onGridMenuInit: function (eArg) {return true;},
	onGridMenuClick: function (eArg) {(eArg.menu.handler.execute ? eArg.menu.handler.execute() : eArg.menu.handler());return;},
	onBeginEditCell: function (eArg) {return false;},
	onEndEditCell: function  (eArg) {return false;},
	onGridKeyPress: function (eArg) {return true;},
	onGridDragEnter: function (eArg) {return true;},
	onGridDragDrop: function (eArg) {return true;},
	onGridDragStart: function (eArg) {return true;},

//--- 	
	initialize: function () {
		//load grid and toolbar was success
	},

//--- 
	loadHTML_DojoGridAndToolbar: function () {
		var htmlText =	'<table id="main_table" style="overflow:hidden; width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;" cellspacing="0" cellpadding="0">' +
							'<tr style="vertical-align: top;">' +
								'<td id="toolbar_td" style="height: 28px;"></td>' +
							'</tr>' +
							'<tr style="vertical-align: top;">' +
								'<td id="gridTD" style="height: 100%;"></td>' +
							'</tr>' +
						'</table>',
			docElement = document.documentElement,
			mainDiv = document.createElement('div'),
			mainTable,
			toolbar,
			grid;

		mainDiv.setAttribute('style', 'position:absolute; width:100%; height:100%; overflow:hidden;');
		mainDiv.innerHTML = htmlText;
		document.body.appendChild(mainDiv);
		mainTable = document.getElementById('main_table');
		top.aras.browserHelper.adjustGridSize(window, function () {
			mainTable.style.height = (docElement.clientHeight - 30) + 'px';
		}, false);

		dojo.require('Aras.Client.Controls.ToolBar');
		dojo.require('Aras.Client.Controls.GridContainer');
		dojo.require('dojo/_base/connect');
		dojo.require('dojo.aspect');
		dojo.require('dojo/domReady!');

		toolbar = new Aras.Client.Controls.ToolBar({ ImageBase: '../cbin/' });
		document.getElementById('toolbar_td').appendChild(toolbar.domNode);
		dojo.connect(toolbar, 'onClick', this, 'handleToolbarOnClick');
		dojo.connect(toolbar, 'onChange', this, 'handleToolbarOnChange');
		toolbar.startup();
		this.toolbar = toolbar;

		grid = new Aras.Client.Controls.GridContainer({ canEdit: dojo.hitch(this, function (rowId, field) {
			var columnIndex = this.grid.columns.get(field, 'index');
			return this.onBeginEditCell({ rowId: rowId, column: columnIndex});
		}) });
		dojo.connect(grid, 'gridClick', this, 'handleGridClick');
		dojo.connect(grid, 'gridDoubleClick', this, 'handleGridDoubleClick');
		dojo.connect(grid, 'gridLinkClick', this, 'handleGridLinkClick');
		dojo.connect(grid, 'gridMenuInit', this, 'handleGridMenuInit');
		dojo.connect(grid, 'gridMenuClick', this, 'handleGridMenuClick');
		dojo.connect(grid, 'onApplyEdit', this, function (rowId, field, value) {
			var columnIndex = this.grid.columns.get(field, 'index');
			return this.onEndEditCell({ rowId: rowId, column: columnIndex});
		});
		dojo.connect(grid, 'gridKeyPress', this, 'handleGridKeyPress');
		this.grid = grid;

		this.initialize();
		this.ready = true;
	},

//--- 
	loadHTML_DojoGridIntoElement: function (elementId) {
		var grid;
		require(["dojo/searchGrid"]);
		require(["Aras/Client/Controls/GridContainer", "dojo/_base/connect", "dojo/domReady!"], function (Grid, connect) {
		  grid = new Grid({ connectId: elementId });
		  grid.setEditable(false);
		  grid.setMultiselect(false);
		});
		
		dojo.connect(grid, 'gridClick', this, 'handleGridClick');
		dojo.connect(grid, 'gridDoubleClick', this, 'handleGridDoubleClick');
		dojo.connect(grid, 'gridLinkClick', this, 'handleGridLinkClick');
		dojo.connect(grid, 'gridMenuInit', this, 'handleGridMenuInit');
		dojo.connect(grid, 'gridMenuClick', this, 'handleGridMenuClick');
		dojo.connect(grid, 'onApplyEdit', this, function (rowId, field, value) {
			var columnIndex = this.grid.columns.get(field, 'index');
			return this.onEndEditCell({ rowId: rowId, column: columnIndex});
		});
		dojo.connect(grid, 'gridKeyPress', this, 'handleGridKeyPress');
		this.grid = grid;

		this.initialize();
		this.ready = true;
	},


	getColumnLabelByName: function (typeName, propName) {
		var itemType = top.aras.getItemTypeForClient(typeName, "name");
		var propItem = itemType.getItemsByXPath("Relationships/Item[@type='Property' and name='" + propName + "']").node;
		return top.aras.getItemProperty(propItem, 'label');
	},

	setToolbarItemEnable: function (ctrlName, bool) {
		var toolbar = this.toolbar.getActiveToolbar();
		bool = (bool === undefined) ? true : !!bool;
		try {
			var tbi = toolbar.getElement(ctrlName);
			if (tbi) {
				tbi.setEnabled(bool);
			}
		} catch (excep) {
			alert('exception during setToolbarItemEnable()');
		}
	},

	getProperty: function (node, element) {
		//this function is used instead of top.aras.getItemProperty because of performance reasons
		var value = "";
		if (node) {
			var tempNode = node.selectSingleNode(element);
			if (tempNode) {
				value = tempNode.text;
			}
		}
		return value;
	},

	setLink: function (row_id, row_type, item_id, col) {
	    var gridCell = this.grid.cells(row_id, col);
		gridCell.setTextColor("#0000ff");
		gridCell.setLink("'" + row_type + "','" + item_id + "','"+row_id+"','"+col+"'");
	
		//this.grid.SetCellTextColor(row_id, col, "#0000FF");
		//this.grid.SetCellLink(row_id, col, "'" + row_type + "','" + item_id + "','"+row_id+"','"+col+"'");
	},
	
	GetGridState: function () {
		return {
			selected: this.grid.getSelectedItemIDs(";").split(";")
		};
	},

	SetGridState: function (gridState) {
		var l = gridState.selected.length;
		for ( i = 0; i < l; i++) {
			if (gridState.selected[i]) {
				this.grid.setSelectedRow(gridState.selected[i], true, true);
			}
		}
	}
};

// MISC HELPER FUNCTION
//==================================
fn_IsCurrUserMemberOfIdentityId = function (identity_id_to_check)
{
  if (!identity_id_to_check || identity_id_to_check === undefined || identity_id_to_check === "" ) {return false;}

  var sessionIdentitites_array = top.aras.getIdentityList().split(",");
  // now we have all identities the current user (session) is member of
  // scan if given identity is in the list - if yes, return true
  for (var i=0;i<sessionIdentitites_array.length;i++) {
    if (identity_id_to_check == sessionIdentitites_array[i]) {return true;}
  }
  return false;
};

fn_GetSmallIconFormatOfItemType = function (itemType)   {
  // retrieving ICONs - get the small icon from item types "Part"
  var qryIcon = top.aras.newIOMItem();
  qryIcon.loadAML("<Item type='ItemType' action='get' select='name,open_icon'><name>"+itemType+"</name></Item>");
  qryIcon = qryIcon.apply();
  var smallIcon = "../images/Icons/16x16/16x16_relationship1.gif";
  if (qryIcon.getItemCount() === 1) {smallIcon = qryIcon.getProperty("open_icon",smallIcon);}
  return smallIcon;
};

// =============================
fn_enableToolbarElement = function (toolbarCtrl, tbElementName, doEnable, hideWhenDisabled) {
  if (!toolbarCtrl) {return;}

  if (doEnable === undefined) {doEnable = true;}
  else {doEnable = Boolean(doEnable);}
  if (!hideWhenDisabled || hideWhenDisabled === undefined) {hideWhenDisabled=false;}
  else {hideWhenDisabled = Boolean(hideWhenDisabled);}

  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
    var tbi  = AT.getElement(tbElementName);
    if (!tbi) {return;}

    tbi.setEnabled(doEnable);
    if (!doEnable && hideWhenDisabled)
    {
      AT.hideItem(tbElementName);
    }
    else
    {
      AT.showItem(tbElementName);
    }
  }
  catch (excep) {top.aras.AlertError('exception during fn_enableToolbarElement()');}
};
// =============================
fn_setChoiceSelectionOnToolbar = function (toolbarCtrl, listElementName, listItemId) {
  if (!toolbarCtrl) {return;}
  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
	 var tbi  = AT.getElement(listElementName);
	 if (tbi) {
       tbi.setSelected(listItemId);
       return listItemId;
	 }
  }
  catch (excep) {top.aras.AlertError('exception during fn_setChoiceSelectionOnToolbar()');}
  return "";
};
// =============================
fn_getChoiceSelectionOnToolbar = function (toolbarCtrl, listElementName) {
  if (!toolbarCtrl) {return;}
  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
	 var tbi  = AT.getElement(listElementName);
	 if (tbi) {
       return tbi.getSelectedItem();
	 }
  }
  catch (excep) {top.aras.AlertError('exception during fn_getChoiceSelectionOnToolbar()');}
  return "";
};

//==================================
fn_GetLockedStatusOfItemFromServer = function (itemType, itemId)   {
  //to avoid 2 requests to server, get locked_by_id and determine lock status
  //locked_by_id not set --> lockStatus = 0
  //locked_by_id = current User  --> lockStatus = 1,  else  --> lockStatus = 2
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='get' select='locked_by_id' id='"+itemId+"' serverEvents='0' />");
  itm = itm.apply();
  if (itm.isError()) {return 0;}
  var lockUser = itm.getProperty("locked_by_id","");
  if (lockUser === "") {return 0;}
  if (lockUser === top.aras.getUserID()) {return 1;}
  return 2;
};
//==================================
fn_LockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='lock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};
//==================================
fn_UnLockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='unlock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};
//==================================
fn_GetItemsOfCurrentGeneration = function (itemType, itemIds, selectProperties)   {
  //add single quotes to ids list, if needed
  var idCondition;
  if (itemIds.indexOf(",") > 0) { //multiple ids
    if (itemIds.indexOf("'") < 0) {itemIds = "'" + itemIds.replace(/,/g,"','") + "'";}
    idCondition = "<id condition='in'>" +itemIds+ "</id>";
  }
  else { //single id passed in
    idCondition = "<id>" +itemIds+ "</id>";
  }

  var itm = top.aras.newIOMItem(itemType,"get");
  itm.loadAML("<Item type='"+itemType+"' action='Get Current Items By IDs' select='" + selectProperties + "' >"+idCondition+"</Item>");
  itm = itm.apply();
  return itm;
};
//==================================
fn_GetItemsOfReleasedGeneration = function (itemType, itemIds, selectProperties)   {
  //add single quotes to ids list, if needed
  var idCondition;
  if (itemIds.indexOf(",") > 0) { //multiple ids
    if (itemIds.indexOf("'") < 0) {itemIds = "'" + itemIds.replace(/,/g,"','") + "'";}
    idCondition = "<id condition='in'>" +itemIds+ "</id>";
  }
  else { //single id passed in
    idCondition = "<id>" +itemIds+ "</id>";
  }

  var itm = top.aras.newIOMItem(itemType,"get");
  itm.loadAML("<Item type='"+itemType+"' action='Get Latest Released Items By IDs' select='" + selectProperties + "' >"+idCondition+"</Item>");
  itm = itm.apply();
  return itm;
};
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>CommonBase GridFuncs</name>
 </Item>
</AML>