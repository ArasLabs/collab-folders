<AML>
 <Item type="Method" id="54B26F23017B4D38A4E342AB856F03B1" action="add">
  <comments>use together with commonBase Tree/Grid </comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: Base version of rowClass - must be loaded together with "CommonBase Tree/Grid"  methods

// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!

//-------- local row class
RowClass = function (grid, data, gridColumnsDef, rowCellValueClasses ) {
	this.grid = grid;
	this.data = data;

	this.cells = [];
	this.length = gridColumnsDef.length; //all cols of grid
	
	for(var cellIndex = 0; cellIndex < gridColumnsDef.length; cellIndex++) {		
		var cellName = gridColumnsDef[cellIndex].Name;
		var column = rowCellValueClasses[cellName];
		
		var cell;
		if(column) {
		    if (column.Class) {
				cell = new column.Class();
			}
			else {
			   cell = new DefaultCellClass();
			}
		    cell.initialize(cellIndex, cellName, this.grid, this, column.PropName, column.isRelProp, column.CellValueType, column.CellStaticValue, column.CellBg, column.CellLinkItemType, column.CellLinkKey);
		}
		else {
			cell = new DefaultCellClass();
		    cell.initialize(cellIndex, cellName, this.grid, this);
		}

		this.cells[cellName] = cell;
	}		
};

RowClass.prototype = {
	grid: null,
	cells: [],
	length: 0,
	data: null,
	
	getValues: function() {
		var rowText = [];
		for(var cellName in this.cells)
		{
			var cell = this.cells[cellName];
			var domValue = cell.getValueFromDom();
			var uiValue="";
			if (domValue) {uiValue = cell.convertValueForUI(domValue);}
			rowText.push(uiValue);
		}
		
		return rowText.join("|");
	},
	
	setGridRowUserData : function(rowId,itemType,itemId) {
		this.grid.GridRowUserData[rowId] = {
			itemType: itemType,
			itemId: itemId
		};
		/*
		this.grid.GridRowUserData[rowId]["gridData_rowItemType"] =  itemType;
		this.grid.GridRowUserData[rowId]["gridData_rowItemID"] =  itemId;
		if(this.data.relationshipNode) {
			this.grid.GridRowUserData[rowId]["gridData_bomID"] =  this.data.relationshipNode.getAttribute("id");
		}
		*/
	},
	
	bind: function(rowId,rowDefaultBg,itemType,itemId) {  //add links and bg colors
		//var rowBg = [];

		if (itemType && itemId) {
		  this.grid.GridRowUserData[rowId] = {
			itemType: itemType,
			itemId: itemId
		  };
		  /*
		  this.grid.GridRowUserData[rowId]["gridData_rowItemType"] =  itemType;
		  this.grid.GridRowUserData[rowId]["gridData_rowItemID"] =  itemId;
		  */
		}
		var col=0;
		for(var cellName in this.cells) {
			var cell = this.cells[cellName];
			var linkData = cell.getLink();
			if(linkData) {
				this.grid.setLink(rowId, linkData.type, cell.cellLinkKey, cell.columnIndex);
				//this.grid.setLink(rowId, linkData.type, linkData.id, cell.columnIndex);
			}
			
			var cellBg = cell.getBackgroundColor();
			if (rowDefaultBg && !cellBg) {cellBg = rowDefaultBg;}
			var gridCell = this.grid.grid.cells(rowId, col);
			gridCell.setBgColor(cellBg);
			col++;
			//rowBg.push(cellBg);
		}
		//this.grid.grid.setRowBgColor(rowId, rowBg.join("|"));
	}
};

// default cell class used if not overwritten by column definitions
DefaultCellClass = function() {
};

DefaultCellClass.prototype = {
	grid: null,
	columnIndex: null,
	row: null,

	initialize: function(columnIndex, columnName, grid, row, propname, isRelProp, cellValueType, cellStaticValue, cellBg, cellLinkItemType, cellLinkKey) {
		this.grid = grid;
		this.row = row;
		this.columnIndex = columnIndex;
		this.name = columnName;
		this.propname = propname;
		this.isRelProp = isRelProp;
		this.cellValueType = cellValueType;
		this.cellStaticValue = cellStaticValue;
		this.cellBg = cellBg;
		this.cellLinkItemType = cellLinkItemType;
		this.cellLinkKey = cellLinkKey;
	},

	getBackgroundColor: function() {
	    if (!this.cellBg) {
		  return "";
		}
		// Resolve cellBg keywords
		if (this.cellBg === "{propCSS}") {
		  var css = "";
	      if (this.isRelProp) {
		    if (this.row.data.relationshipNode) {css = this.row.data.relationshipNode.getProperty("css","");}
	      }
	      else {
	       if(this.row.data.itemNode) {css = this.row.data.itemNode.getProperty("css","");}
	      }
		  if (css !== "") {
           var pos1 = css.indexOf(".state");
	       if (pos1 >=0) {
	        var cssSub = css.substring(pos1,css.length);
	        var pos2 = cssSub.indexOf("}");
	        if (pos2 > 0) {
	         cssSub = cssSub.substring(0,pos2);
		     pos1 = cssSub.indexOf("background-color");
	         if (pos1 >=0) {
		      cssSub = cssSub.substring(pos1,cssSub.length);
	          pos2 = cssSub.indexOf("#");
		      if (pos2 > 0) {
		       var colVal = cssSub.substring(pos2,pos2+7);
			   return colVal;
		      }
		     }
	        } 
	       }
          }
		  return "";
		}
	    // assume cellBg has valid color value (i.e. "#ff0000" )
		return this.cellBg;
	},
	
	getLink: function() {
	  if (this.cellLinkKey) {
		linkData = {};
		// Resolve LinkKey keywords
	    if (this.cellLinkKey === "{OpenRowItem}") {
		  if (this.row.data.itemNode) {
		  	linkData.type = this.row.data.itemNode.getAttribute("type");
		  	linkData.id = this.row.data.itemNode.getAttribute("id");
		  }
		}
	    if (this.cellLinkKey === "{FilesOfRelatedItem}") {
		  	linkData.type = this.row.data.itemNode.getAttribute("type");
		}
		// other rules to resolve to link ID go here ...
		
		return linkData;	
	  }
	  return null;
	},

	convertValueForUI: function(value) {
	    if (this.isRelProp) {
			value = fn_formatCellValueByValueType (this.grid, value, this.cellValueType, this.propname, this.row.data.relationshipNode, true);
	    }
	    else {
			value = fn_formatCellValueByValueType (this.grid, value, this.cellValueType, this.propname, this.row.data.itemNode, false);
	    }
		return value;
	},

	getValueFromDom: function() {
	 if (this.cellStaticValue) {
	   return this.cellStaticValue;
	 }
	
	 if(this.propname) {
	  var propName = this.propname.replace(/ /g,"");  // strip spaces
	  
	  // evaluate concatenation rule of properties within the same item type
	  var propNames = [];
	  if (propName.indexOf("+") > 0) {
	    propNames = propName.split("+");
	  }
	  else {
	    propNames[0] = propName;
	  }
	  var propValue = "";
	  var sep = "";
	  // loop - concatenated props
	  for (var i=0;i<propNames.length; i++) {
	    var isRelProp = this.isRelProp;
		
		propName = propNames[i];
		if (propName.indexOf("rel.") >=0) {
		  isRelProp = true;
		  propName = propName.replace(/rel./,"");
		}
	  
	    if (isRelProp) {
		  if (this.row.data.relationshipNode) {propValue += sep + this.row.data.relationshipNode.getProperty(propName,"");}
	    }
	    else {
	     if(this.row.data.itemNode) {propValue += sep + this.row.data.itemNode.getProperty(propName,"");}
	    }
		sep = " - ";
	  }
	  return propValue;
	 }
	 else {
	  return "";
	 }
	 return "";
	}
};

fn_formatCellValueByValueType = function(gridCntxt, cellValue, cellValueType, propName, dataItem, isRelationship)
{
    switch(cellValueType)
	{
	case "lock":
	  cellValue = fn_GetLockedCellFormatFromLockedById(gridCntxt,cellValue);
	  break;
	case "check":
	  cellValue = fn_GetCheckBoxCellFormat(gridCntxt,cellValue);
	  break;
	case "not_current_gen":
	  cellValue = fn_GetNotCurrentGenImageFormat(gridCntxt,cellValue);
	  break;
	case "image":
	  cellValue = "<img src='"+cellValue+"' />";
	  break;
	case "date":
	  cellValue = fn_GetI18NShortDate(cellValue,"--");
	  break;
	case "keyed_name":
	case "item(keyed_name)":
	  if (isRelationship) {
	    cellValue = dataItem.getPropertyItem("related_id").getPropertyAttribute(propName,"keyed_name","");
	  }
	  else {
	    cellValue = dataItem.getPropertyAttribute(propName,"keyed_name","");
	  }
	  
	}
	return cellValue;
};	  

// MISC HELPER FUNCTION

//==================================
fn_GetCheckBoxCellFormat = function (gridCntxt, on_off_value)   {
  var checked_icon = "<img src='"+gridCntxt.icons["item_chk0"]+"' />";
  if (on_off_value === "1") {checked_icon = "<img src='"+gridCntxt.icons["item_chk1"]+"' />";}
  return checked_icon;
};
//==================================
fn_GetNotCurrentGenImageFormat = function (gridCntxt,on_off_value)   {
  var newer_gen_icon = "";
  if (on_off_value === "0") {newer_gen_icon = "<img src='"+gridCntxt.icons["newerItemGen"]+"' />";}
  return newer_gen_icon;
};
//==================================
fn_GetI18NShortDate = function (dateString, defaultVal)   {
  if (dateString && dateString !== "" && dateString !== defaultVal) {
	   return I18Ncntx.ConvertFromNeutral(dateString,"date","short_date");
  }
  else {
    return defaultVal;
  }
};
//==================================
fn_GetLockedCellFormatFromLockedById = function (gridCntxt,lockedById)   {
	if (!lockedById || typeof(lockedById) == "undefined" || lockedById === "") {
	   return "";
	}
    var currUserId = top.aras.getUserID();
	if (lockedById === currUserId) {
	   return "<img src='"+gridCntxt.icons["locked"]+"' />"; // locked by this user
	}
    return "<img src='"+gridCntxt.icons["locked_else"]+"' />"; // locked by other  user
};
//==================================
fn_GetLockedCellFormatByStatusCode = function (gridCntxt, statusCode)   {
  switch (statusCode)
  {
   case 0:
     return "";
   case 1:
     return "<img src='"+gridCntxt.icons["locked"]+"' />";
  }
  return "<img src='"+gridCntxt.icons["locked_else"]+"' />";
};
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>CommonBase GridRowFuncs</name>
 </Item>
</AML>