<AML>
 <Item type="Method" id="18210DDB667E49D5BECFAFF8D6EB2421" action="add">
  <comments>GridEvents register, RowClass, ActionBaseClass, misc helper functions</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: Base version TreeGrid with base Action

// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!

BaseTreeGrid = function () {
    // determine browser type
	navigator.sayswho = (function(){
    var ua= navigator.userAgent, tem, 
    M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d\.]+)/i) || [];
    if(/trident/i.test(M[1])){
        tem=  /\brv[ :]+(\d+(\.\d+)?)/g.exec(ua) || [];
        return 'IE '+(tem[1] || '');
    }
    M= M[2]? [M[1], M[2]]:[navigator.appName, navigator.appVersion, '-?'];
			if((tem= ua.match(/version\/([\.\d]+)/i))!== null) {M[2]= tem[1];}
    return M.join(' ');
    })();
	this.browserType = navigator.sayswho;
	//if (navigator.sayswho.indexOf("MSIE") < 0)
	//{
	//alert("This form only works with 'Internet Explorer' !  Your browser is '"+ navigator.sayswho +"'");
	//}
};

BaseTreeGrid.prototype = {
	grid: null,
	toolbar: null,
	
	handleToolbarOnLoad: function (toolbar) {
		this.toolbar = toolbar;
		if (this.grid && this.toolbar) {
			this.initialize();
		}
	},
	
	handleToolbarOnClick: function(item) {
		this.grid.turnEditOff();
		var id = item.getId();
		this.onToolbarClick({id: id});
	},
	
	handleToolbarOnChange: function(item) {
		var id = item.getId();
		this.onToolbarChange({id: id});
	},

	handleGridStart: function (grid) {
		this.grid = grid;
		if (this.grid && this.toolbar) {
			this.initialize();
		}
	},
	
	handleGridClick: function(rowId, column) {
		this.onGridClick({rowId: rowId, column: column});
	},
	
	handleGridDoubleClick: function(rowId) {
		this.onGridDoubleClick({rowId: rowId});
	},
	
	handleGridLinkClick: function(strLink) {
		this.onGridLinkClick({linkData: strLink});
	},
	
	handleGridMenuInit: function(rowId, col, p) {
		var menu = this.grid.getMenu();
		var menuItems = [];
		this.handleGridMenuClick = function (menuChoice) {}; // reset previous handler;
		menu.removeAll();
		var menuInit = this.onGridMenuInit({rowId: rowId, column: col, menuItems: menuItems});
		if (menuInit) {
			for (var i = 0; i < menuItems.length; i++) {
				if (menuItems[i].separator) {
					menu.addSeparator();
				} else {
					if (this.arasRelease === "Aras9") {
					  menu.add(i, (menuItems[i].label || ""), "", !!menuItems[i].enabled);}
					else {
					  menu.add(i.toString(), (menuItems[i].label || ""), { disable: !menuItems[i].enabled });}
				}
			}
			
			//set new handler which lock in closer menuItems
			this.handleGridMenuClick = function (menuChoice) {
				var selectedId = this.grid.getSelectedId();
				if (selectedId) {
					var menu = menuItems[parseInt(menuChoice, 10)];
					this.onGridMenuClick(menuChoice);
					//this.onGridMenuClick({menu: menu});
				}
				return;
			};
			
			return true;
		}
		
		return false;
	},
	
	handleGridMenuClick: function(menuChoice) {
		//will be overrided in handleGridMenuInit;
	},
	
	handleGridEditCell: function(mode, rowId, column) {
		if(mode === 0) {
			return this.onBeginEditCell({rowId: rowId, column: column});
		} 
		else if (mode === 2) {
			return this.onEndEditCell({rowId: rowId, column: column});
		}
		return true;
	},
	
	handleGridKeyPress: function(key) {
		this.onGridKeyPress({key: key});
	},

	handleGridOpenNode: function(rowId) {
		this.onGridOpenNode({rowId: rowId});
	},
	
	handleGridCloseNode: function(rowId) {
		this.onGridCloseNode({rowId: rowId});
	},
	
	handleGridDragEnter: function(a,b) {
		this.onGridDragEnter({a: a, b: b});
	},

	handleGridDragDrop: function(a,b) {
		this.onGridDragDrop({a: a, b: b});
	},

	handleGridDragStart: function(a,b) {
		this.onGridDragStart({a: a, b: b});
	},

//----default handlers (standardized on eArg) -- will get overridden by actual handlers -----------
	onToolbarClick: function (eArg) {return;},
	onToolbarChange: function (eArg) {return;},
	onGridClick: function (eArg) {return;},
	onGridDoubleClick: function (eArg) {return;},
	onGridLinkClick: function (eArg) {return;},
	onGridMenuInit: function (eArg) {return true;},
	onGridMenuClick: function (eArg) {(eArg.menu.handler.execute ? eArg.menu.handler.execute() : eArg.menu.handler());return;},
	onBeginEditCell: function (eArg) {return false;},
	onEndEditCell: function  (eArg) {return false;},
	onGridKeyPress: function (eArg) {return true;},
	onGridDragEnter: function (eArg) {return true;},
	onGridDragDrop: function (eArg) {return true;},
	onGridDragStart: function (eArg) {return true;},

//--- 	
	initialize: function () {
		//load grid and toolbar was success
	},

//--- 
	loadGridDefinitionHTML: function (gridObjectName, toolbarObjectName, gridInstanceName) {
		top.aras.uiAddConfigLink2Doc4Assembly(document, "TreeTable");
		top.aras.uiAddConfigLink2Doc4Assembly(document, "Toolbar");
		var innerHTML = '<table style="overflow:hidden; width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;" cellspacing="0" cellpadding="0">' +
			'<tr style="vertical-align: top;">' +
				'<td id="toolbar_td" style="height: 28px;">' +
					'<script type="text/javascript" for="{ToolbarObjectName}" event="Onload()">{handlersInstance}.handleToolbarOnLoad(document.{ToolbarObjectName});</' + 'script>' +
					'<script type="text/javascript" for="{ToolbarObjectName}" event="Onclick(tbItem)">{handlersInstance}.handleToolbarOnClick(tbItem);</' + 'script>' +
					'<script type="text/javascript" for="{ToolbarObjectName}" event="OnChange(tbItem)">{handlersInstance}.handleToolbarOnChange(tbItem);</' + 'script>' +
				'</td>' +
			'</tr>' +
			'<tr style="vertical-align: top;">' +
				'<td id="grid_td" style="height: 100%;">' +
					'<div style=\'position:absolute;padding:30px;z-index:100;\'><b>Loading ...</b></div>';
					innerHTML += '<script type="text/javascript" for="{TreeGridObjectName}" event="GridStart(isSuccess)">{handlersInstance}.handleGridStart(document.{TreeGridObjectName});</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridDoubleClick(rowId)">{handlersInstance}.handleGridDoubleClick(rowId)</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridLinkClick(strLink)">{handlersInstance}.handleGridLinkClick(strLink)</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridMenuInit(rowId, col, p)">return {handlersInstance}.handleGridMenuInit(rowId, col, p);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridMenuClick(m, rowId, col)">{handlersInstance}.handleGridMenuClick(m);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridEditCell(mode, rowId, col)">return {handlersInstance}.handleGridEditCell(mode, rowId, col);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridKeyPress(kEv)">return {handlersInstance}.handleGridKeyPress(kEv);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridOpenNode(rowId)">return {handlersInstance}.handleGridOpenNode(rowId);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridCloseNode(rowId)">return {handlersInstance}.handleGridCloseNode(rowId);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="GridClick(rowId, col)">{handlersInstance}.handleGridClick(rowId, col);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="DragEnter(a,b)">{handlersInstance}.handleGridDragEnter(a,b);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="DragDrop(a,b)">{handlersInstance}.handleGridDragDrop(a,b);</' + 'script>' +
					'<script type="text/javascript" for="{TreeGridObjectName}" event="DragStart(a,b)">return {handlersInstance}.handleGridDragStart(a,b);</' + 'script>';

			innerHTML += '</td>' +
			'</tr>' +
		'</table>';

		/*
		*/
		var div = document.createElement("div");
		document.body.appendChild(div);

		if (!gridInstanceName) {gridInstanceName = "tgrid";}
		innerHTML = innerHTML.replace(/\{handlersInstance\}/g, gridInstanceName);
		if (!gridObjectName) {gridObjectName = "tGrid1";}
		innerHTML = innerHTML.replace(/\{TreeGridObjectName\}/g, gridObjectName);
		if (!toolbarObjectName) {toolbarObjectName = "tb1";}
		innerHTML = innerHTML.replace(/\{ToolbarObjectName\}/g, toolbarObjectName);
		
		div.innerHTML = innerHTML;
		
		//'script' element necessary for init events for controls in IE10
		//without this element are not executed events of grid and toolbar
	    var scriptElement = document.createElement("script");
		scriptElement.setAttribute("for"," ");
		scriptElement.event = " ";
		document.body.appendChild(scriptElement);
		
		var object = document.createElement("object");
		document.getElementById("toolbar_td").appendChild(object);
		object.id = toolbarObjectName;
		object.style.height = "28px";
		object.style.width = "100%";
		object.classid = "../cbin/Toolbar.dll#Aras.Client.Controls.Toolbar";

		object = document.createElement("object");
		document.getElementById("grid_td").appendChild(object);
		object.id = gridObjectName;
		object.style.height = "100%";
		object.style.width = "100%";
		object.classid = "../cbin/TreeTable.dll#Aras.Client.Controls.TreeGridContainer";
		object.AllowDrop = true;

		var fixGridHeight = function () {
			var el = document.getElementById(gridObjectName);
			top.aras.fixLiquidContainerHeight(document, el);
			el = document.getElementById("grid_td");
			top.aras.fixLiquidContainerHeight(document, el);
		};
		var interval = window.setInterval(fixGridHeight, 100);
		window.attachEvent("onbeforeunload", function () {
			if (interval) {
				clearInterval(interval);
			}
		});
		window.attachEvent("onresize", fixGridHeight);
	},

//--- 
	loadDojoGridDefinitionHTML: function () {
		var htmlText =	'<table id="main_table" style="overflow:hidden; width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;" cellspacing="0" cellpadding="0">' +
							'<tr style="vertical-align: top;">' +
								'<td id="toolbar_td" style="height: 28px;"></td>' +
							'</tr>' +
							'<tr style="vertical-align: top;">' +
								'<td id="gridTD" style="height: 100%;"></td>' +
								'<div id="loadingInProgress" style="top: 31px; width: 100%; height: 100%; position: absolute; padding-top: 20px; z-index: 100; background-color: #ffffff;">' +
									'<center><b>Loading...</b></center>' +
								'</div>' +
							'</tr>' +
						'</table>',
			docElement = document.documentElement,
			mainDiv = document.createElement('div'),
			mainTable,
			toolbar,
			grid;

		mainDiv.setAttribute('style', 'position:absolute; width:100%; height:100%; overflow:hidden;');
		mainDiv.innerHTML = htmlText;
		document.body.appendChild(mainDiv);
		mainTable = document.getElementById('main_table');
		top.aras.browserHelper.adjustGridSize(window, function () {
			mainTable.style.height = (docElement.clientHeight - 30) + 'px';
		}, false);

		dojo.require('Aras.Client.Controls.ToolBar');
		dojo.require('Aras.Client.Controls.TreeGridContainer');
		dojo.require('dojo.aspect');

		toolbar = new Aras.Client.Controls.ToolBar({ ImageBase: '../cbin/' });
		document.getElementById('toolbar_td').appendChild(toolbar.domNode);
		dojo.connect(toolbar, 'onClick', this, 'handleToolbarOnClick');
		dojo.connect(toolbar, 'onChange', this, 'handleToolbarOnChange');
		toolbar.startup();
		this.toolbar = toolbar;

		grid = new Aras.Client.Controls.TreeGridContainer({ canEdit: dojo.hitch(this, function (rowId, field) {
			var columnIndex = this.grid.columns.get(field, 'index');
			return this.onBeginEditCell({ rowId: rowId, column: columnIndex});
		}) });
		dojo.connect(grid, 'gridClick', this, 'handleGridClick');
		dojo.connect(grid, 'gridDoubleClick', this, 'handleGridDoubleClick');
		dojo.connect(grid, 'gridLinkClick', this, 'handleGridLinkClick');
		dojo.connect(grid, 'gridMenuInit', this, 'handleGridMenuInit');
		dojo.connect(grid, 'gridMenuClick', this, 'handleGridMenuClick');
		dojo.connect(grid, 'onApplyEdit', this, function (rowId, field, value) {
			var columnIndex = this.grid.columns.get(field, 'index');
			return this.onEndEditCell({ rowId: rowId, column: columnIndex});
		});
		dojo.connect(grid, 'gridKeyPress', this, 'handleGridKeyPress');
		this.grid = grid;

		this.initialize();
		this.ready = true;
	},

	getColumnLabelByName: function (typeName, propName) {
		var itemType = top.aras.getItemTypeForClient(typeName, "name");
		var propItem = itemType.getItemsByXPath("Relationships/Item[@type='Property' and name='" + propName + "']").node;
		return top.aras.getItemProperty(propItem, 'label');
	},

	setToolbarItemEnable: function (ctrlName, bool) {
		var toolbar = this.toolbar.getActiveToolbar();
		bool = (bool === undefined) ? true : !!bool;
		try {
			var tbi = toolbar.getElement(ctrlName);
			if (tbi) {
				tbi.setEnabled(bool);
			}
		} catch (excep) {
			alert('exception during setToolbarItemEnable()');
		}
	},

	getProperty: function (node, element) {
		//this function is used instead of top.aras.getItemProperty because of performance reasons
		var value = "";
		if (node) {
			var tempNode = node.selectSingleNode(element);
			if (tempNode) {
				value = tempNode.text;
			}
		}
		return value;
	},

	expandAll: function (bool) {
		this.grid.setPaintEnabled(false);
		if (bool) {
			this.grid.expandAll();
		} else {
			this.grid.collapseAll();
		}
		this.grid.setPaintEnabled(true);
	},

	setLink: function (row_id, row_type, item_id, col) {
		this.grid.SetCellTextColor(row_id, col, "#0000FF");
		this.grid.SetCellLink(row_id, col, "'" + row_type + "','" + item_id + "','"+row_id+"','"+col+"'");
	},
	
	GetGridState: function () {
		return {
			expanded: this.grid.getOpenedItems(";").split(";"),
			selected: this.grid.getSelectedItemIDs(";").split(";")
		};
	},

	SetGridState: function (gridState) {
		var l = gridState.expanded.length;
		for (var i = 0; i < l; i++) {
			if (gridState.expanded[i]) {
				this.grid.openItem(gridState.expanded[i]);
			}
		}

		l = gridState.selected.length;
		for ( i = 0; i < l; i++) {
			if (gridState.selected[i]) {
				this.grid.setSelectedRow(gridState.selected[i], true, true);
			}
		}
	}
};

//-------- local row class
RowClass = function (grid, data, gridColumnsDef, rowCellValueClasses ) {
	this.grid = grid;
	this.data = data;

	this.cells = [];
	this.length = gridColumnsDef.length; //all cols of grid
	
	for(var cellIndex = 0; cellIndex < gridColumnsDef.length; cellIndex++) {		
		var cellName = gridColumnsDef[cellIndex].Name;
		var column = rowCellValueClasses[cellName];
		
		var cell;
		if(column) {
		    if (column.Class) {
				cell = new column.Class();
			}
			else {
			   cell = new DefaultCellClass();
			}
		    cell.initialize(cellIndex, cellName, this.grid, this, column.PropName, column.isRelProp, column.CellValueType, column.CellStaticValue, column.CellBg, column.CellLinkItemType, column.CellLinkKey);
		}
		else {
			cell = new DefaultCellClass();
		    cell.initialize(cellIndex, cellName, this.grid, this);
		}

		this.cells[cellName] = cell;
	}		
};

RowClass.prototype = {
	grid: null,
	cells: [],
	length: 0,
	data: null,
	
	getValues: function() {
		var rowText = [];
		for(var cellName in this.cells)
		{
			var cell = this.cells[cellName];
			var domValue = cell.getValueFromDom();
			var uiValue="";
			if (domValue) {uiValue = cell.convertValueForUI(domValue);}
			rowText.push(uiValue);
		}
		
		return rowText.join("|");
	},
	
	setGridRowUserData : function(rowId,itemType,itemId) {
		this.grid.GridRowUserData[rowId] = {
			itemType: itemType,
			itemId: itemId
		};
		/*
		this.grid.GridRowUserData[rowId]["gridData_rowItemType"] =  itemType;
		this.grid.GridRowUserData[rowId]["gridData_rowItemID"] =  itemId;
		if(this.data.relationshipNode) {
			this.grid.GridRowUserData[rowId]["gridData_bomID"] =  this.data.relationshipNode.getAttribute("id");
		}
		*/
	},
	
	bind: function(rowId,rowDefaultBg,itemType,itemId) {  //add links and bg colors
		var rowBg = [];

		if (itemType && itemId) {
		  this.grid.GridRowUserData[rowId] = {
			itemType: itemType,
			itemId: itemId
		  };
		  /*
		  this.grid.GridRowUserData[rowId]["gridData_rowItemType"] =  itemType;
		  this.grid.GridRowUserData[rowId]["gridData_rowItemID"] =  itemId;
		  */
		}
		
		for(var cellName in this.cells) {
			var cell = this.cells[cellName];
			var linkData = cell.getLink();
			if(linkData) {
				this.grid.setLink(rowId, linkData.type, cell.cellLinkKey, cell.columnIndex);
				//this.grid.setLink(rowId, linkData.type, linkData.id, cell.columnIndex);
			}
			
			var cellBg = cell.getBackgroundColor();
			if (rowDefaultBg && !cellBg) {cellBg = rowDefaultBg;}
			rowBg.push(cellBg);
		}
		
		this.grid.grid.setRowBgColor(rowId, rowBg.join("|"));
	}
};

// default cell class used if not overwritten by column definitions
DefaultCellClass = function() {
};

DefaultCellClass.prototype = {
	grid: null,
	columnIndex: null,
	row: null,

	initialize: function(columnIndex, columnName, grid, row, propname, isRelProp, cellValueType, cellStaticValue, cellBg, cellLinkItemType, cellLinkKey) {
		this.grid = grid;
		this.row = row;
		this.columnIndex = columnIndex;
		this.name = columnName;
		this.propname = propname;
		this.isRelProp = isRelProp;
		this.cellValueType = cellValueType;
		this.cellStaticValue = cellStaticValue;
		this.cellBg = cellBg;
		this.cellLinkItemType = cellLinkItemType;
		this.cellLinkKey = cellLinkKey;
	},

	getBackgroundColor: function() {
	    if (!this.cellBg) {
		  return "";
		}
		// Resolve cellBg keywords
		if (this.cellBg === "{propCSS}") {
		  var css = "";
	      if (this.isRelProp) {
		    if (this.row.data.relationshipNode) {css = this.row.data.relationshipNode.getProperty("css","");}
	      }
	      else {
	       if(this.row.data.itemNode) {css = this.row.data.itemNode.getProperty("css","");}
	      }
		  if (css !== "") {
           var pos1 = css.indexOf(".state");
	       if (pos1 >=0) {
	        var cssSub = css.substring(pos1,css.length);
	        var pos2 = cssSub.indexOf("}");
	        if (pos2 > 0) {
	         cssSub = cssSub.substring(0,pos2);
		     pos1 = cssSub.indexOf("background-color");
	         if (pos1 >=0) {
		      cssSub = cssSub.substring(pos1,cssSub.length);
	          pos2 = cssSub.indexOf("#");
		      if (pos2 > 0) {
		       var colVal = cssSub.substring(pos2,pos2+7);
			   return colVal;
		      }
		     }
	        } 
	       }
          }
		  return "";
		}
	    // assume cellBg has valid color value (i.e. "#ff0000" )
		return this.cellBg;
	},
	
	getLink: function() {
	  if (this.cellLinkKey) {
		linkData = {};
		// Resolve LinkKey keywords
	    if (this.cellLinkKey === "{OpenRowItem}") {
		  if (this.row.data.itemNode) {
		  	linkData.type = this.row.data.itemNode.getAttribute("type");
		  	linkData.id = this.row.data.itemNode.getAttribute("id");
		  }
		}
	    if (this.cellLinkKey === "{FilesOfRelatedItem}") {
		  	linkData.type = this.row.data.itemNode.getAttribute("type");
		}
		// other rules to resolve to link ID go here ...
		
		return linkData;	
	  }
	  return null;
	},

	convertValueForUI: function(value) {
	    if (this.isRelProp) {
			value = fn_formatCellValueByValueType (this.grid, value, this.cellValueType, this.propname, this.row.data.relationshipNode, true);
	    }
	    else {
			value = fn_formatCellValueByValueType (this.grid, value, this.cellValueType, this.propname, this.row.data.itemNode, false);
	    }
		return value;
	},

	getValueFromDom: function() {
	 if (this.cellStaticValue) {
	   return this.cellStaticValue;
	 }
	
	 if(this.propname) {
	  var propName = this.propname.replace(/ /g,"");  // strip spaces
	  
	  // evaluate concatenation rule of properties within the same item type
	  var propNames = [];
	  if (propName.indexOf("+") > 0) {
	    propNames = propName.split("+");
	  }
	  else {
	    propNames[0] = propName;
	  }
	  var propValue = "";
	  var sep = "";
	  // loop - concatenated props
	  for (var i=0;i<propNames.length; i++) {
	    var isRelProp = this.isRelProp;
		
		propName = propNames[i];
		if (propName.indexOf("rel.") >=0) {
		  isRelProp = true;
		  propName = propName.replace(/rel./,"");
		}
	  
	    if (isRelProp) {
		  if (this.row.data.relationshipNode) {propValue += sep + this.row.data.relationshipNode.getProperty(propName,"");}
	    }
	    else {
	     if(this.row.data.itemNode) {propValue += sep + this.row.data.itemNode.getProperty(propName,"");}
	    }
		sep = " - ";
	  }
	  return propValue;
	 }
	 else {
	  return "";
	 }
	 return "";
	}
};

fn_formatCellValueByValueType = function(gridCntxt, cellValue, cellValueType, propName, dataItem, isRelationship)
{
    switch(cellValueType)
	{
	case "lock":
	  cellValue = fn_GetLockedCellFormatFromLockedById(gridCntxt,cellValue);
	  break;
	case "check":
	  cellValue = fn_GetCheckBoxCellFormat(gridCntxt,cellValue);
	  break;
	case "not_current_gen":
	  cellValue = fn_GetNotCurrentGenImageFormat(gridCntxt,cellValue);
	  break;
	case "image":
	  cellValue = "<img src='"+cellValue+"' />";
	  break;
	case "date":
	  cellValue = fn_GetI18NShortDate(cellValue,"--");
	  break;
	case "keyed_name":
	case "item(keyed_name)":
	  if (isRelationship) {
	    cellValue = dataItem.getPropertyItem("related_id").getPropertyAttribute(propName,"keyed_name","");
	  }
	  else {
	    cellValue = dataItem.getPropertyAttribute(propName,"keyed_name","");
	  }
	  
	}
	return cellValue;
};	  


ActionBase = function (actionGrid) {
	/// <summary>Base class to implement action handler</summary>
	this.actionGrid = actionGrid;
};

ActionBase.prototype = {
	execute: function () {

	    var selectedIds = this.actionGrid.grid.getSelectedItemIds("|").split("|");
		var id_array = selectedIds[0] ? selectedIds : [];

		for (i = 0; i < id_array.length; i++) {
			var selRowId = id_array[i],
				rowItem = this.actionGrid.GridRowUserData[selRowId],
				affectedItem = this.actionGrid.AffectedItemDictionary[rowItem.itemId];
			this.executeItem(rowItem, affectedItem, selRowId);
		}
	},

	executeItem: function (rowItem, affectedItem, selRowId) {
		//Execute action for Item
	},

	Validate: function (selRowId, selItem) {
		//validate item
		return true;
	},

	searchItem: function (itemTypeName, sourceItemTypeName, sourcePropertyName) {
		var param = { aras: top.aras, itemtypeName: itemTypeName, multiselect: false, sourceItemTypeName: sourceItemTypeName, sourcePropertyName: sourcePropertyName };
		var dlgRes = showModalDialog('searchDialog.html', param, 'dialogHeight:450px; dialogWidth:700px; status:0; help:0; resizable:1');

		if(!dlgRes) {
			return;
		} else if (dlgRes.itemID === "") {
			return "";
		} else if(!dlgRes.item) {
			top.aras.AlertError(top.aras.getResource("PLM", "impactmatrix.message.item_should_be_selected"));
			return;
		}

		var itemId = top.aras.getItemProperty(dlgRes.item, "id", "");
		var itemType = dlgRes.item.getAttribute('type');
		var requiredItem = top.aras.getItemById(itemType, itemId, 0);

		return requiredItem;
	}
};

// MISC HELPER FUNCTION
//==================================
fn_IsCurrUserMemberOfIdentityId = function (identity_id_to_check)
{
  if (!identity_id_to_check || identity_id_to_check === undefined || identity_id_to_check === "" ) {return false;}

  var sessionIdentitites_array = top.aras.getIdentityList().split(",");
  // now we have all identities the current user (session) is member of
  // scan if given identity is in the list - if yes, return true
  for (var i=0;i<sessionIdentitites_array.length;i++) {
    if (identity_id_to_check == sessionIdentitites_array[i]) {return true;}
  }
  return false;
};

fn_GetSmallIconFormatOfItemType = function (itemType)   {
  // retrieving ICONs - get the small icon from item types "Part"
  var qryIcon = top.aras.newIOMItem();
  qryIcon.loadAML("<Item type='ItemType' action='get' select='name,open_icon'><name>"+itemType+"</name></Item>");
  qryIcon = qryIcon.apply();
  var smallIcon = "../images/Icons/16x16/16x16_relationship1.gif";
  if (qryIcon.getItemCount() === 1) {smallIcon = qryIcon.getProperty("open_icon",smallIcon);}
  return smallIcon;
};

//=========================
fn_SetBackgroundColorOfCellsInRow = function(gridCtrl, row, colStart, colEnd, bgColor)
{
  if (this.arasRelease === "Aras9") {
	for (c = colStart; c < colEnd + 1; c++)
	{
		if (gridCtrl.cells(row,c).getBgColor() === "#ffffff") {
		  gridCtrl.cells(row, c).setBgColor(bgColor);
		}
	}
  }
  else {
    var rowBg = [];
	for (c = colStart; c < colEnd + 1; c++)
	{
	  rowBg.push(bgColor);
	}
    gridCtrl.setRowBgColor(row, rowBg.join("|"));
  }
};

//==================================
fn_LockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='lock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};

//==================================
fn_UnLockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='unlock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};

//==================================
fn_GetCheckBoxCellFormat = function (gridCntxt, on_off_value)   {
  var checked_icon = "<img src='"+gridCntxt.icons["item_chk0"]+"' />";
  if (on_off_value === "1") {checked_icon = "<img src='"+gridCntxt.icons["item_chk1"]+"' />";}
  return checked_icon;
};
//==================================
fn_GetNotCurrentGenImageFormat = function (gridCntxt,on_off_value)   {
  var newer_gen_icon = "";
  if (on_off_value === "0") {newer_gen_icon = "<img src='"+gridCntxt.icons["newerItemGen"]+"' />";}
  return newer_gen_icon;
};
//==================================
fn_GetI18NShortDate = function (dateString, defaultVal)   {
  if (dateString && dateString !== "" && dateString !== defaultVal) {
	   return I18Ncntx.ConvertFromNeutral(dateString,"date","short_date");
  }
  else {
    return defaultVal;
  }
};
// =============================
fn_enableToolbarElement = function (toolbarCtrl, tbElementName, doEnable, hideWhenDisabled) {
  if (!toolbarCtrl) {return;}

  if (doEnable === undefined) {doEnable = true;}
  else {doEnable = Boolean(doEnable);}
  if (!hideWhenDisabled || hideWhenDisabled === undefined) {hideWhenDisabled=false;}
  else {hideWhenDisabled = Boolean(hideWhenDisabled);}

  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
    var tbi  = AT.getElement(tbElementName);
    if (!tbi) {return;}

    tbi.setEnabled(doEnable);
    if (!doEnable && hideWhenDisabled)
    {
      AT.hideItem(tbElementName);
    }
    else
    {
      AT.showItem(tbElementName);
    }
  }
  catch (excep) {top.aras.AlertError('exception during fn_enableToolbarElement()');}
};
// =============================
fn_setChoiceSelectionOnToolbar = function (toolbarCtrl, listElementName, listItemId) {
  if (!toolbarCtrl) {return;}
  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
	 var tbi  = AT.getElement(listElementName);
	 if (tbi) {
       tbi.setSelected(listItemId);
       return listItemId;
	 }
  }
  catch (excep) {top.aras.AlertError('exception during fn_setChoiceSelectionOnToolbar()');}
  return "";
};
// =============================
fn_getChoiceSelectionOnToolbar = function (toolbarCtrl, listElementName) {
  if (!toolbarCtrl) {return;}
  var AT = toolbarCtrl.getActiveToolbar();
  try
  {
	 var tbi  = AT.getElement(listElementName);
	 if (tbi) {
       return tbi.getSelectedItem();
	 }
  }
  catch (excep) {top.aras.AlertError('exception during fn_getChoiceSelectionOnToolbar()');}
  return "";
};
//==================================
fn_GetLockedCellFormatFromLockedById = function (gridCntxt,lockedById)   {
	if (!lockedById || typeof(lockedById) == "undefined" || lockedById === "") {
	   return "";
	}
    var currUserId = top.aras.getUserID();
	if (lockedById === currUserId) {
	   return "<img src='"+gridCntxt.icons["locked"]+"' />"; // locked by this user
	}
    return "<img src='"+gridCntxt.icons["locked_else"]+"' />"; // locked by other  user
};
//==================================
fn_GetLockedCellFormatByStatusCode = function (gridCntxt, statusCode)   {
  switch (statusCode)
  {
   case 0:
     return "";
   case 1:
     return "<img src='"+gridCntxt.icons["locked"]+"' />";
  }
  return "<img src='"+gridCntxt.icons["locked_else"]+"' />";
};
//==================================
fn_GetLockedStatusOfItemFromServer = function (itemType, itemId)   {
  //to avoid 2 requests to server, get locked_by_id and determine lock status
  //locked_by_id not set --> lockStatus = 0
  //locked_by_id = current User  --> lockStatus = 1,  else  --> lockStatus = 2
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='get' select='locked_by_id' id='"+itemId+"' serverEvents='0' />");
  itm = itm.apply();
  if (itm.isError()) {return 0;}
  var lockUser = itm.getProperty("locked_by_id","");
  if (lockUser === "") {return 0;}
  if (lockUser === top.aras.getUserID()) {return 1;}
  return 2;
};
//==================================
fn_LockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='lock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};
//==================================
fn_UnLockThisItem = function (itemType, itemId)   {
  var itm = top.aras.newIOMItem(itemType,"get");
  itm.setID(itemId);
  itm.loadAML("<Item type='"+itemType+"' action='unlock' id='"+itemId+"' />");
  itm = itm.apply();
  return itm;
};
//==================================
fn_GetItemsOfCurrentGeneration = function (itemType, itemIds, selectProperties)   {
  //add single quotes to ids list, if needed
  var idCondition;
  if (itemIds.indexOf(",") > 0) { //multiple ids
    if (itemIds.indexOf("'") < 0) {itemIds = "'" + itemIds.replace(/,/g,"','") + "'";}
    idCondition = "<id condition='in'>" +itemIds+ "</id>";
  }
  else { //single id passed in
    idCondition = "<id>" +itemIds+ "</id>";
  }

  var itm = top.aras.newIOMItem(itemType,"get");
  itm.loadAML("<Item type='"+itemType+"' action='Get Current Items By IDs' select='" + selectProperties + "' >"+idCondition+"</Item>");
  itm = itm.apply();
  return itm;
};
//==================================
fn_GetItemsOfReleasedGeneration = function (itemType, itemIds, selectProperties)   {
  //add single quotes to ids list, if needed
  var idCondition;
  if (itemIds.indexOf(",") > 0) { //multiple ids
    if (itemIds.indexOf("'") < 0) {itemIds = "'" + itemIds.replace(/,/g,"','") + "'";}
    idCondition = "<id condition='in'>" +itemIds+ "</id>";
  }
  else { //single id passed in
    idCondition = "<id>" +itemIds+ "</id>";
  }

  var itm = top.aras.newIOMItem(itemType,"get");
  itm.loadAML("<Item type='"+itemType+"' action='Get Latest Released Items By IDs' select='" + selectProperties + "' >"+idCondition+"</Item>");
  itm = itm.apply();
  return itm;
};
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>CommonBaseTreeGridFuncs</name>
 </Item>
</AML>