<AML>
 <Item type="Method" id="DC91D02A7D5B4C06AD9C5220EAD605EC" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA['MethodTemplateName=VBMain;
'
' Context must be item of type file pointiong to an existing physical file in vault
' Content must contain properties:
'  filename
'
' custom context attributes
'  newFilename
'  localVaultPath
'  newFilenamePrefix
'
Dim inn As Innovator = Me.getInnovator()
Dim res As Item
Function Main() As Item
  'System.Diagnostics.Debugger.Break()
  Dim localVaultRoot As String = Me.getAttribute("localVaultPath","")
  Dim newFilename As String = Me.getAttribute("newFilename","")
  Dim newFilenamePrefix As String = Me.getAttribute("newFilenamePrefix","")
  Dim fid As String = Me.getID()
  Dim fn As String = Me.getProperty("filename","")
  Dim ArasDBName As String = CCO.DB.DatabaseName

  'get filePath to filename
  Dim vaultedSourceFile As String = buildVaultPathFromFileId(fid,localVaultRoot,ArasDBName) & fn
  If Not File.Exists(vaultedSourceFile) Then Return inn.newError("File not found ! (in vault path:'" & vaultedSourceFile & "')")
  
  'create new file item

  ' remove template keyword in file name - just in case
  newFilename = newFilename.Replace("Templ","templ")
  newFilename = newFilename.Replace("template ","")
  newFilename = newFilename.Replace(" template","")
  newFilename = newFilename.Replace(" template ","")
  newFilename = newFilename.Replace("template","")
  newFilename = newFilename.Replace(" templ","")
  newFilename = newFilename.Replace("templ ","")
  newFilename = newFilename.Replace(" templ ","")
  newFilename = newFilename.Replace("templ","")
  
  newFilename = newFilenamePrefix & newFilename
  
  Dim newFileId As String = inn.getNewID()
  Dim vaultNewFile As String = buildVaultPathFromFileId(newFileId,localVaultRoot,ArasDBName) & newFilename
  If File.Exists(vaultNewFile) Then Return inn.newError("File already exists ! (in vault path:'" & vaultNewFile & "')")

  Dim newFileItem As Item = inn.newItem("File", "add")
  newFileItem.setID(newFileId)
  newFileItem.setProperty("filename", newFilename)
  newFileItem.attachPhysicalFile(vaultedSourceFile)
  newFileItem = newFileItem.apply()
  
  Return newFileItem
End Function
	
'-----------------------------
Private Function buildVaultPathFromFileId (fileId As String,localVaultRoot As String, dbName As String) As String

  Dim vaultPath As String = ""
'  vaultPath = VSLogic.VSLogic.GetPathFromID(fileId, "\\", False, ArasDBName, localVaultRoot)

  Dim treeConfig(2) As Integer
  treeConfig(0) = 1
  treeConfig(1) = 2
  treeConfig(2) = 29 

  vaultPath = "\\"
  vaultPath = vaultPath & fileId.Substring(treeConfig(0)-1,1) & "\\"
  vaultPath = vaultPath & fileId.Substring(treeConfig(1)-1,2) & "\\"
  vaultPath = vaultPath & fileId.Substring(fileId.length - treeConfig(2),treeConfig(2)) & "\\"
  vaultPath = localVaultRoot & dbName & vaultPath

  Return vaultPath     
End Function

]]></method_code>
  <method_type>VB</method_type>
  <name>CopyFileToNewFileInVault</name>
 </Item>
</AML>