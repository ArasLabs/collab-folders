<AML>
 <Item type="Method" id="D442C93015774654868DB25C857139BA" action="add">
  <comments>custom Action handling -- extend with your logic -- or clone it and use clone instead</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// =======================================================
// JavaScript Method to "handle" grid menu custom actions
//
// is load with Form "configStructure Grid" 
//   "CommonBase GridUtiltities"
//   "CommonBase GridConfiguration"
//   must be loaded before method "configStructure GridHandler"
//  
// If you want to create your own specialized menu actions logic, you can CLONE this JS method and then
// modify its logic to be used instead.
// Then you must replace the grid event on Form "configStructure Grid" with your new method.
//
// Rolf Laudenbach
// 2015
// =======================================================

//+++++  BEGIN: Custom Menu Actions Handler
//-----------------
customMenuAction = function customMenuActionFunc() {
};

// NOTE: to add your new action, you must add logic in 3 places:
//        ShowOnMenu, ValidateAction, ExecuteAction

customMenuAction.prototype.isShowOnMenuCustom = function customMenuAction_isShowOnMenuCustom(eActionArgs, menuAction) {
	// this logic must return true, if menu action should be shown on context menu
	//      or false, if menu action should not be shown.
	
	// determine to show custom actions on menu that are row type independent here (if required)
	if (menuAction.name === "my_menu_action") {return true;}


	// determine to show custom actions on menu that are row type specific here (if required)
    switch(eActionArgs.rowItemType)
	{
	case "XXX":
		if (menuAction.name === "my_menu_action") {return true;}
		break;
	default:
		break;
	}
	return false;	
};

/* see documentation on context for eActionArgs and menuAction in  method "CommonBase GridUtilities"
*/
customMenuAction.prototype.executeAction = function customMenuAction_executeAction(eActionArgs, menuActionName) {
  fn_onToolbarAndMenuClickLocalAction(eActionArgs, menuActionName, this);
  return "";
};
customMenuAction.prototype.validateAction = function customMenuAction_validateAction(eActionArgs, menuAction) {
  //returns "" if validations are OK. Else the function returns an Error message.
  return fn_ValidateActionRequest(eActionArgs, menuAction, this);
};
//^^^^^  END: Custom Menu Actions Handler

//+++++  BEGIN: local helper functions

//+++++ custom validation functions
fn_ValidateActionRequest = function (eActionArgs, menuAction) {
  // run various custom checks specific to action
  // this logic must return "" if validations are ok.
  // or an error message, if validations ar NOT ok.
  //debugger;
  if ((!menuAction.allowOnGroupRows || menuAction.allowOnGroupRows === undefined) && menuAction.relQueryName !== "default" && menuAction.relQueryName !== eActionArgs.rowOfGroupName) {
    return top.aras.getResource("CommonUtilities","commonUtilities.message.action_not_allowed_on_rows_of_this_type");
  }
  
  var checkForNewerVersionOfItem = false;
  if ((eActionArgs.checkForNewerVersionOfItem && eActionArgs.checkForNewerVersionOfItem === true) || eActionArgs.effectivityMode === "current_config")
	{checkForNewerVersionOfItem = true;}
  if (checkForNewerVersionOfItem && menuAction.ifItemIsCurrentVersion && menuAction.ifItemIsCurrentVersion === true)
	{checkForNewerVersionOfItem = true;}

  var disallowForRootItems = false;   
  // add logic with your new actions to switch 
  switch (menuAction.name)
  {
	case "my_menu_action":
	  disallowForRootItems = true;
	  break;
  }
  if (checkForNewerVersionOfItem) {
    var itm = fn_GetItemsOfCurrentGeneration(eActionArgs.rowItemType,eActionArgs.rowItemId,"id");
	if (itm.getID() != eActionArgs.rowItemId)
        {return top.aras.getResource("CommonUtilities","commonUtilities.message.newer_item_version_found_refresh_grid_first");}
  }
  if (disallowForRootItems) {
    // check selected rowId
    if (!eActionArgs.gridHandler.grid.getParentId(eActionArgs.rowId))
      {return top.aras.getResource("CommonUtilities","commonUtilities.message.action_not_allowed_on_root_rows");}
  }
  // success
  return "";
};
//^^^^^ Custom validation functions

//+++++ Custom menu actions
fn_onToolbarAndMenuClickLocalAction = function (eActionArgs, menuActionName, menuActionHandler) {
   // dispatches the menu action to local handlers
   //debugger;
   var actionId = eActionArgs.actionSource + "." + menuActionName;
   var plannedAction = "";

    // NOTE: toolbar actions like : expand, collapse, refresh are covered directly by toolbar click event
	switch(actionId)
	{
	  //+++ your custom action cases ...
	  case "menu.my_menu_action":
		fn_myActionHandler(eActionArgs);
	  	break;

	  //^^^ your custom actions
	}
};

//-----------------
fn_myActionHandler = function (eRowArgs) {
	alert ("execute my_menu_action");
  return;
};
//^^^^^ Custom menu actions
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>configStructure GridMenuHandler</name>
 </Item>
</AML>