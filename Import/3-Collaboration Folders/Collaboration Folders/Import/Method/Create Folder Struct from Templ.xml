<AML>
 <Item type="Method" id="96DE761643CE48A88AC2581E82C97EC4" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA['MethodTemplateName=VBMain;
Dim inn As Innovator = Me.getInnovator()
Dim res As Item
Dim folderItemPropertiesToCopy As String
Dim ItemTypesWithConfig As String
Dim ItemTypesAutoNumberMethods As String
Dim localVaultRoot As String

'
' called on ItemType: Folder Item
' Server Events: onAfterAdd
'
' check if new folder is a template (is_template flag = "1")
' if yes, make sure the folder template permission set is used !
'
' check if new folder has property "item_folder_template_id" set and it is not a template folder.
' if set, clone the structure of sub folders from this template
' Merge some properties from the 'top' folder of the template to this 'top' item folder
'
' Merge relationships from template folders with defined rules
'  For Rel: "Item Folder File" (Attachments) -> read prop "referenced_file"
'           if set (1) -> copy related_ids (re-use same File items)
'           if not set (0) -> copy file in vault and use copied files (on related_ids)
'  For Rel: "Item Folder Controlled Item" -> read prop "template_action"
'           template_action = 'Reference" -> copy related_id (re-use same item)
'           template_action = 'Copy" -> create a new controlled item of same type
'
' ##NOTE##:
' Cloning attached file on controlled items depends on vault configuration - the logic below must be adjusted.
' if vault config is not the default !!!
' vault subPath configs - could be different in VaultServerConfig.xml
' default is - 1st char of 32charId - 2-3char of 32charId - rest of 32charId
'  treeConfig(0) = 1
'  treeConfig(1) = 2
'  treeConfig(2) = 29 
'
Function Main() As Item
  'System.Diagnostics.Debugger.Break()
  Dim thisItemType As String = Me.GetType()
  Dim thisItemId As String = Me.GetID()

  folderItemPropertiesToCopy = "name,description,allow_sub_folders,allowed_relationships"  ' add more custom properties to this list ....
  
  Dim qry As Item = inn.newItem(thisItemType,"get")
  qry.setID(thisItemId)
  qry.setAttribute("serverEvents","0")
  qry.setAttribute("select","name,description,item_number,state,item_folder_template_id,is_template")
  Dim thisItemFolder As Item = qry.apply() ' fetch this item from server
  Dim SQLstr As String
  If thisItemFolder.getProperty("is_template","0") = "1" Then
    ' set "Item Folder Template" Pemissions (Id) to permission of new ItemFolder
    SQLstr = "UPDATE [Item_Folder] SET [Item_Folder].permission_id='E2227109B19B45E0B4690EEE5E890FBB' WHERE [Item_Folder].id='" & thisItemId & "'"
    thisItemFolder = Me.getInnovator().applySQL(SQLstr)
    If thisItemFolder.isError() Then Return thisItemFolder
    
    Return Me 'Item is a template folder. logic ends here
  End If

  ' if folder is not a template continue logic ...
  
  ' get the folder template item (which is only set on top level). if no reference, exit
  Dim thisFolderTemplateId As String = thisItemFolder.getProperty("item_folder_template_id","")
  If thisFolderTemplateId = "" Then Return Me ' nothing to do
  
  qry = inn.newItem("Item Folder Template","get")
  qry.setID(thisFolderTemplateId)
  qry.setAttribute("select","name,item_number,state,top_item_folder_id")
  Dim folderTemplItem As Item = qry.apply()
  If folderTemplItem.isError() Then Return Me ' template not found, nothing to do
 
  ' check, if this folder already has sub folders. if yes exit (don't copy from folder)
  qry = inn.newItem("Item Sub Folder","get")
  qry.setProperty("source_id",thisItemId)
  qry.setAttribute("select","source_id(keyed_name),related_id(name,description,keyed_name)")
  qry.setAttribute("serverEvents","0")
  qry = qry.apply()
  If qry.getItemCount() > 0 Then Return Me

  ' get the template's top folder item (to copy from)
  Dim templateTopFolderId As String = folderTemplItem.getProperty("top_item_folder_id","")
  If templateTopFolderId = "" Then Return Me ' nothing to do
  qry = inn.newItem("Item Folder","get")
  qry.setProperty("id",templateTopFolderId)
  qry.setProperty("is_template","1") ' make sure it's a template folder
  qry.setAttribute("select","id,is_template," & folderItemPropertiesToCopy)
  qry = qry.apply()
  If qry.isError() Then Return Me ' template top folder not found, nothing to do
  
  ' merge properties from template folder to new folder
  res = copyItemProperties(qry, Me, folderItemPropertiesToCopy, True, True)
  If res.isError() Then Return res
  
  SetItemTypesWithConfigFromCtrItemsConfig(thisFolderTemplateId)  'inits global vars
  localVaultRoot = GetLocalVaultPath() 
  
  ' create sub folders for top level folder (from template structure)
  createSubFoldersFromTemplate (templateTopFolderId,thisItemId)
  
  Return Me
End Function  

'-----------------------------
Private Function createSubFoldersFromTemplate (templateFolderParentId As String, newParentFolderId As String) As Item
  ' copy Folder Files (attachments) of this level from template
  res = addFolderFilesFromTemplateToThisItem (templateFolderParentId,newParentFolderId)
  If res.isError() Then Return res

  ' copy controlled Items of this level from template
  res = addFolderControlledItemsFromTemplateToThisItem (templateFolderParentId,newParentFolderId)
  If res.isError() Then Return res
  
  ' build structure from template
  Dim thisSubFolderRel As Item = inn.newItem("Item Sub Folder","get")
  thisSubFolderRel.setProperty("source_id",templateFolderParentId)
  thisSubFolderRel.setAttribute("select","org_number,source_id(keyed_name),related_id(" & folderItemPropertiesToCopy & ",keyed_name)")
  thisSubFolderRel.setAttribute("serverEvents","0")
  thisSubFolderRel = thisSubFolderRel.apply()

  If thisSubFolderRel.getItemCount() = 0 Then Return Me 'nothing to do
  If thisSubFolderRel.isError() Then Return thisSubFolderRel

  Dim i As Integer
  For i=0 To thisSubFolderRel.getItemCount()-1
  	Dim templRelItem As Item = thisSubFolderRel.getItemByIndex(i)
    Dim templSubFolderId As String = templRelItem.getProperty("related_id","")

    If  (templSubFolderId <> "") Then
      Dim newSubFolderItem As Item = inn.newItem("Item Folder","add")
	  
	  ' merge properties from template folder to new folder
	  res = templRelItem.getPropertyItem("related_id")
      res = copyItemProperties(res, newSubFolderItem, folderItemPropertiesToCopy, False, False)

      newSubFolderItem.setProperty("is_root","")
      newSubFolderItem = newSubFolderItem.apply()
      If newSubFolderItem.isError() Then Return newSubFolderItem
      
     ' assume new parent folder already exists on server - then only new relationship needs to be added
      Dim newSubFolderRel As Item = inn.newItem("Item Sub Folder","add")
      newSubFolderRel.setProperty("org_number",templRelItem.getProperty("org_number",""))
      newSubFolderRel.setProperty("source_id",newParentFolderId)
      newSubFolderRel.setProperty("related_id",newSubFolderItem.getID())
      newSubFolderRel = newSubFolderRel.apply()
      If newSubFolderRel.isError() Then Return newSubFolderRel

      ' recursion - create next level sub folders
      res = createSubFoldersFromTemplate (templSubFolderId,newSubFolderItem.GetID())
      If res.isError() Then Return res

    End If
  
  Next i
  Return Me
End Function

'-----------------------------
Private Function copyItemProperties (ByRef fromItem As Item, ByRef toItem As Item, propsToCopy As String, isTop As Boolean, doApply As Boolean) As Item
  If isTop Then propsToCopy = propsToCopy.Replace("name","") ' prevent that name property is copied
  Dim propName As String() = propsToCopy.split(",")
  Dim copyToItem As Item = toItem

  If doApply Then
    copyToItem = inn.newItem(toItem.GetType(),"merge")
	copyToItem.SetID(toItem.GetID())
	copyToItem.setAttribute("version","0")
	copyToItem.setAttribute("serverEvents","0")
	copyToItem.setAttribute("doGetItem","0")
  End If
  
  Dim i As Integer
  For i=0 To propName.Length -1
  	If propName(i) <> "" Then
  	  Dim propVal As String = fromItem.getProperty(propName(i), "")
  	  If propVal <> "" Then  copyToItem.setProperty(propName(i),propVal)
  	End If
  Next i

  If doApply Then
    Return copyToItem.apply()
  Else
    Return fromItem
  End If
End Function  

'-----------------------------
Private Function GetLocalVaultPath() As String
  ' call utility Method
  Dim qry As Item = inn.newItem("Method","GetLocalVaultPath")
  qry = qry.apply()
  
  If qry.isError() Then Return ""
  Dim path As String = qry.getResult()
  Return path.Replace("\","\\")
End Function  

'-----------------------------
Private Function SetItemTypesWithConfigFromCtrItemsConfig(sourceId As String) As Boolean
  If sourceId = "" Then Return False
  
  Dim controlledItemConfig As Item = inn.newItem("","")	
  Dim aml As String = "<Item type=""Item Folder Tmpl CtrItemConfig"" action=""get"" select=""controlled_item_type,auto_number_method(name)"" >"
  aml = aml & "<source_id>" & sourceId & "</source_id>"   	
  aml = aml & "</Item>"   	
  controlledItemConfig.loadAML(aml)
  controlledItemConfig = controlledItemConfig.apply()
  
  ItemTypesWithConfig = ""
  ItemTypesAutoNumberMethods = ""
  Dim i As Integer
  For i=0 To controlledItemConfig.getItemCount()-1
  	Dim propVal As String = controlledItemConfig.getItemByIndex(i).getProperty("controlled_item_type")
  	ItemTypesWithConfig = ItemTypesWithConfig & "," & propVal

  	propVal  = controlledItemConfig.getItemByIndex(i).getProperty("auto_number_method","")
  	If propVal <> "" Then
  	  propVal = controlledItemConfig.getItemByIndex(i).getPropertyItem("auto_number_method").getProperty("name","")
  	End If
  	ItemTypesAutoNumberMethods = ItemTypesAutoNumberMethods & "," & propVal
  Next i
 
  Return True

End Function  

'-----------------------------
Private Function addFolderFilesFromTemplateToThisItem (templateFolderParentId As String, newFolderId As String) As Item
  'System.Diagnostics.Debugger.Break()  

  Dim FolderFileRels As Item = inn.newItem("Item Folder File","get")
  FolderFileRels.setProperty("source_id",templateFolderParentId)
  FolderFileRels.setAttribute("select","is_template,sort_order,source_id(keyed_name),related_id(filename),is_shared,referenced_file")
  FolderFileRels.setAttribute("serverEvents","0")
  FolderFileRels = FolderFileRels.apply()

  If FolderFileRels.getItemCount() = 0 Then Return Me 'nothing to do
  If FolderFileRels.isError() Then Return FolderFileRels

  Dim i As Integer
  For i=0 To FolderFileRels.getItemCount()-1
  	Dim templRelItem As Item = FolderFileRels.getItemByIndex(i)
    Dim templSubFolderId As String = templRelItem.getProperty("related_id","")

    If  (templSubFolderId <> "") Then

     ' assume new folder already exists on server - then only new relationship needs to be added
      Dim newFolderFileRel As Item = inn.newItem("Item Folder File","add")
      newFolderFileRel.setProperty("sort_order",templRelItem.getProperty("sort_order",""))
      newFolderFileRel.setProperty("is_shared",templRelItem.getProperty("is_shared",""))
      newFolderFileRel.setProperty("referenced_file",templRelItem.getProperty("referenced_file",""))
      newFolderFileRel.setProperty("source_id",newFolderId)

      Dim newFileId As String = templSubFolderId
      ' copy file or use reference to same file ? - if flag = 0 then copy the file
      If templRelItem.getProperty("referenced_file","0") = "0" Then
      	 Dim clonedFileItem As Item = cloneFileInVault(FolderFileRels.getItemByIndex(i).getPropertyItem("related_id"), i)
		 If clonedFileItem.IsError() Then Return clonedFileItem
         newFileId = clonedFileItem.getID() 
      End If    

      newFolderFileRel.setProperty("related_id",newFileId)
      newFolderFileRel = newFolderFileRel.apply()
      If newFolderFileRel.isError() Then Return newFolderFileRel
    
    End If
  Next i
  Return Me
End Function

'-----------------------------
Private Function addFolderControlledItemsFromTemplateToThisItem (templateFolderParentId As String, newFolderId As String) As Item
  'System.Diagnostics.Debugger.Break()
  Dim FolderCtrldItemRels As Item = inn.newItem("Item Folder Controlled Item","get")
  FolderCtrldItemRels.setProperty("source_id",templateFolderParentId)
  FolderCtrldItemRels.setAttribute("select","is_template,template_action,source_id(keyed_name),related_id(keyed_name)")
  FolderCtrldItemRels.setAttribute("serverEvents","0")
  FolderCtrldItemRels = FolderCtrldItemRels.apply()

  If FolderCtrldItemRels.getItemCount() = 0 Then Return Me 'nothing to do
  If FolderCtrldItemRels.isError() Then Return FolderCtrldItemRels

  Dim i As Integer
  For i=0 To FolderCtrldItemRels.getItemCount()-1
  	Dim templRelItem As Item = FolderCtrldItemRels.getItemByIndex(i)
    Dim templSubFolderId As String = templRelItem.getProperty("related_id","")
    
    Dim templAction As String = templRelItem.getProperty("template_action","")
    Dim relItemId As String = ""
    Dim relItemType As String = ""
    
    'define new related Item accroding to template action
    Select Case (templAction)
      Case "Reference"
         relItemId = templRelItem.getProperty("related_id","")

      Case "New Item","Copy"
         relItemId = templRelItem.getProperty("related_id","")
         If relItemId <> "" Then
           relItemType = templRelItem.getPropertyItem("related_id").getAttribute("type","")
           
           Dim relItem As Item = inn.newItem(relItemType,"get")
           Dim fileRelshipItem As Item
           Dim fileRelshipName As String = ""
           Dim relItemPropertiesSelect As String = ""
           Dim fileRelPropertiesSelect As String = ""
           
           Select Case (relItemType)
             Case "Document"
               fileRelshipName = "Document File"
               fileRelPropertiesSelect = "sort_order,source_id,related_id(filename,file_type),is_shared"
               
               relItemPropertiesSelect = "item_number,name,description,classification"
               ' set item type specific conditions etc... here ...
            
             Case "Part"
               relItemPropertiesSelect = "item_number,name,description,classification"

               ' set item type specific conditions etc... here ...
               
             '--------------
             ' add more item type cases, if folder controlled (poly)item gets extended
             Case "add your item type case.."
               relItemPropertiesSelect = "name,description,classification"
               ' set item type specific conditions etc... here ...
             '--------------
            
           End Select 
           
           relItem.setID(relItemId)
           relItem.setAttribute("select",relItemPropertiesSelect)

           If fileRelshipName <> "" Then
             fileRelshipItem = inn.newItem(fileRelshipName,"get")
             fileRelshipItem.setAttribute("select",fileRelPropertiesSelect)
             relItem.addRelationship(fileRelshipItem)
           End If  
           
           relItem = relItem.apply()
           If relItem.isError() Then Return relItem
          
           ' create the new Item with same setting and relationships as in item context
           Dim newRelItem As Item = relItem.clone(False)
           newRelItem.setAction ("add")
           If relItemPropertiesSelect.indexOf("item_number") >= 0 Then
             Dim newItemNumber As String = generateItemNumberForItemType(relItemType)
             If (newItemNumber <> "") Then newRelItem.setProperty("item_number",newItemNumber)
           End If
           newRelItem = newRelItem.apply()          
           If newRelItem.isError() Then Return newRelItem
           
           relItemId = newRelItem.GetID()
           
           ' clone the file relationships
           Dim fileRels As Item = relItem.getItemsByXPath("/*/*/Result/Item/Relationships/Item[@type='" & fileRelshipName & "']")
           Dim f As Integer
           For f=0 To fileRels.getItemCount() -1
		     Dim clonedFileItem As Item = cloneFileInVault(fileRels.getItemByIndex(f).getPropertyItem("related_id"), f)
			 If clonedFileItem.IsError() Then Return clonedFileItem
         	 Dim newFileRel As Item = inn.newItem(fileRelshipName,"add")
             newFileRel.setProperty("sort_order",fileRels.getItemByIndex(f).getProperty("sort_order",""))
             newFileRel.setProperty("is_shared",fileRels.getItemByIndex(f).getProperty("is_shared",""))
             newFileRel.setProperty("source_id",relItemId) ' set to new RelItem
			 
             newFileRel.setProperty("related_id",clonedFileItem.getID())
			 
             newFileRel = newFileRel.apply()
           Next f
         End If

    End Select
  
    If  (relItemId <> "") Then
     ' assume new folder already exists on server - then only new relationship needs to be added
      Dim newFolderCtrldItemRel As Item = inn.newItem("Item Folder Controlled Item","add")
      newFolderCtrldItemRel.setProperty("sort_order",templRelItem.getProperty("sort_order",""))
      newFolderCtrldItemRel.setProperty("template_action",templAction)
      newFolderCtrldItemRel.setProperty("source_id",newFolderId)
      newFolderCtrldItemRel.setProperty("related_id",relItemId)
      newFolderCtrldItemRel = newFolderCtrldItemRel.apply()
      If newFolderCtrldItemRel.isError() Then Return newFolderCtrldItemRel
    
    End If
  Next i
  Return Me
End Function

'-----------------------------
Private Function cloneFileInVault (fileItem As Item, count As Integer) As Item
	
    Dim runMethod As Item = inn.newItem("File","CopyFileToNewFileInVault") 'calls utilities server method
    runMethod.setID(fileItem.getID())
	runMethod.setProperty("filename",fileItem.getProperty("filename",""))
	runMethod.setAttribute("newFilenamePrefix",count+1 & "-")
	runMethod.setAttribute("newFilename",fileItem.getProperty("filename",""))
	runMethod.setAttribute("localVaultPath",localVaultRoot)
	
    runMethod = runMethod.apply()
    Return runMethod
End Function

'-----------------------------
Private Function generateItemNumberForItemType (itemType As String) As String
  'detect, if given itemType has is marked for auto numbering
  'when it is listed in comma separated list "ItemTypesWithConfig" defined on the "Item Folder TeEmplate"
   
  If (ItemTypesWithConfig.indexOf(itemType) < 0) Then Return ""  ' not listed
   
  Dim autoNumMethodName  As String = ""
  Dim itAutoNumType As String() = ItemTypesWithConfig.split(",")
  Dim itAutoNumTypeMethods As String() = ItemTypesAutoNumberMethods.split(",")
  Dim i As Integer
  For i=0 To itAutoNumType.Length -1
  	If itAutoNumType(i) = itemType Then
  	  autoNumMethodName = itAutoNumTypeMethods(i)
   	End If
  Next i
     
  If autoNumMethodName <> "" Then
    Dim runMethod As Item = inn.newItem(itemType,autoNumMethodName)
    runMethod = runMethod.apply()
    If runMethod.isError() Then Return ""
     
    Return runMethod.getResult()
   
  End If
   
  Return ""
      
End Function
]]></method_code>
  <method_type>VB</method_type>
  <name>Create Folder Struct from Templ</name>
 </Item>
</AML>