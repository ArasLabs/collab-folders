<AML>
 <Item type="Method" id="DED68DD389B24E198757710DCB5D6EC8" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// called: onAferDelete
//   requires method: 'Add Props to Folder BeforeDelete' to be run onBeforeDelete
Innovator inn = this.getInnovator();
  

  // System.Diagnostics.Debugger.Break()
 
  string ItemConfigId = this.getProperty("config_id","");
  string ItemId = this.getID();

  // delete the Team Item associated with this folder
  Item amlCmd = inn.newItem("Team","delete");
  
  string whereStr = "[Team].description like '%" + ItemConfigId  + "%'";
  whereStr += " or [Team].private_team_item_id_string like '%" + ItemConfigId  + "%'";
  amlCmd.setAttribute("where",whereStr);

  // run as root
  Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Super User");
  bool PermissionWasSet = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

  try {
    amlCmd = amlCmd.apply(); // if team still linked to other folders, project, or programs, this may fail
  }
  catch {
    return this;
  }
  
  // Revoke 'Aras PLM' permissions
  if (PermissionWasSet) { Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);}
  
  return this;


]]></method_code>
  <method_type>C#</method_type>
  <name>Delete cFolder related Team</name>
 </Item>
</AML>