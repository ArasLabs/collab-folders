<AML>
 <Item type="Method" id="DD140C7820444F2984BABCEE64A57947" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//*/ Client side Method: treeGrid1 misc. function
// 
// load with --> onLoad Event on Forms
// works together with 'CommonBase Grid Funcs' - must be loaded first
// works together with 'CommonBase GridRow Funcs' - must be loaded first

// global variable "gridInstance"   must be declared in grid's html field on the form !!!
// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!

window.initGrid = function() {
    var arasRelease = "Aras10";
	
	gridInstance = new AttachedFilesGrid(arasRelease);
	gridInstance.loadHTML_DojoGridAndToolbar();
};

AttachedFilesGrid = function AttachedFilesGridFunc(arasRelease) {
    this.arasRelease = arasRelease;
    this.initialized = false;

	// Item must be passed as a parameter
	var param = top.dialogArguments;
	this.contextItem = param.item;
	this.itemFileRelationship = this.contextItem.getProperty("file_relationship","");

    this.hasInputRow = false;
	this.numberOfGridColumns=-1; //init
	
	this.icons = {};
	this.icons["locked"] = 					"../images/Icons/GridIcons/locked.gif";
	this.icons["locked_else"] = 			"../images/Icons/GridIcons/locked_else.gif";
	this.icons["item_chk0"] = 				"../images/Icons/GridIcons/item_chk0.gif";
	this.icons["item_chk1"] = 				"../images/Icons/GridIcons/item_chk1.gif";
	this.icons["newerItemGen"] = 			"../images/Icons/GridIcons/newerItemGen.gif";

	this.constants = {
		fileItemTypeName: 		"File"
	};	
};

AttachedFilesGrid.prototype = new BaseGrid();

AttachedFilesGrid.prototype.isEditable = function AttachedFilesGrid_isEditable() {
    //conditions when grid should be editable
	var node = document.thisItem.node;
	return top.aras.isLockedByUser(node);
//	return top.aras.isTempEx(node) || ((!state || state === "Preliminary" || state === "In Work") && top.aras.isLockedByUser(node));
};

AttachedFilesGrid.prototype.onBeforeInitialize = function AttachedFilesGrid_onBeforeInitialize() {
};

AttachedFilesGrid.prototype.initialize = function AttachedFilesGrid_Initialize() {
    this.currentUserIsOwner = fn_IsCurrUserMemberOfIdentityId(this.contextItem.getProperty("owned_by_id",""));	
	this.onBeforeInitialize();
	
 	this.toolbarXmlUrl = top.aras.getI18NXMLResource("ReverseItemsGrid_toolbar.xml", "../Solutions/PLM/");

	this.toolbar.loadXml(this.toolbarXmlUrl);
	this.toolbar.show();
 
    //register column layouts of different row types
	this.columnHeadingsAndLayout = fn_getGridTableColumnHeadingsAndLayout("File", this.itemFileRelationship);
	this.numberOfGridColumns = this.columnHeadingsAndLayout.length;
	this.itemColumnDefList = fn_fetGridTableColumnDefOfRowItems("File", this.itemFileRelationship);
	this.itemSelectProperties = "name,locked_by_id,state";
	this.fileSelectProperties = "filename,file_type(keyed_name),file_size,generation";
	this.fileRelSelectProperties = "sort_order,is_shared";
	
	//Build empty grid XML
	var xml = '' +
	'<table font="Microsoft Sans Serif-8" backgroundColor="white" sel_bgColor="steelbue" sel_TextColor="white" delim ="|" editable="true" ' +
	' draw_grid="true" multiselect="false" enableHtml="false" enterAsTab="false" bgInvert="true" expandroot="true" expandall="false" treelines="1" column_draggable="false" >' +
	' <thead>';
	for(var columnIndex = 0; columnIndex < this.columnHeadingsAndLayout.length; columnIndex++) {
	  var colTitle;
	  if (this.columnHeadingsAndLayout[columnIndex].Title) {
	    colTitle = this.columnHeadingsAndLayout[columnIndex].Title;
	  }
	  else {
	    colTitle = this.getColumnLabelByName(this.columnHeadingsAndLayout[columnIndex].PropItemType, this.columnHeadingsAndLayout[columnIndex].PropName);
	  }
	  xml += ' <th align="c">' + colTitle + '</th>';
	}
	xml += '' +
	' </thead>' +
	' <columns>';	
	for(columnIndex = 0; columnIndex < this.columnHeadingsAndLayout.length; columnIndex++) {
		xml += ' <column width="' + this.columnHeadingsAndLayout[columnIndex].Width + '" align="' + this.columnHeadingsAndLayout[columnIndex].Align + '" edit="' + 
				this.columnHeadingsAndLayout[columnIndex].EditType + '" order="' + columnIndex + '" colname="' + this.columnHeadingsAndLayout[columnIndex].Name + '" />';
	}	
	xml += '' +
	' </columns>' +
	'<menu><emptytag/></menu>';


	xml += '</table>';
	this.gridEmptyTable_xml = xml;
	this.gridFullContent_xml = undefined;

	this.initialized = true;

	if (this.arasRelease === "Aras9") {
 	  this.grid.clear();
	  this.grid.InitXml(xml);
	}
	else {
	  this.grid.InitXML(xml);
	}

	// now load data into grid	
	this.gridRefresh(); 
};

//==== helper function to wrap missing old grid method
AttachedFilesGrid.prototype.getGridRowUserData = function AttachedFilesGrid_getGridRowUserData(rowId, dataName) {
  if (!rowId || rowId === "") {return;}
  var retValue = "";
  switch(dataName)
  {
    case "gridData_rowItemType":
	  return this.GridRowUserData[rowId].itemType;
	  
    case "gridData_rowItemID":
    case "gridData_rowItemId":
	  return this.GridRowUserData[rowId].itemId;
  }
};


// ======= Custom functions to get and populate grid with data =======
AttachedFilesGrid.prototype.GetGridData = function AttachedFilesGrid_GetData(topItemType, topItemId) {
//debugger;
var aml = '<Item type="' + topItemType + '" action="get" select="id,config_id,generation,';
  aml += this.itemSelectProperties + '" id="' + topItemId + '">' +
  '<Relationships>' +
	'<Item type="' + this.itemFileRelationship + '" select="';
       aml += this.fileRelSelectProperties + ',related_id" orderBy="sort_order" >' +
	 '<related_id>' +
		'<Item type="File" action="get" select="id,config_id,generation,';
       aml += this.fileSelectProperties + '" >' +
		'</Item>' +
	  '</related_id>' +
	'</Item>' +
  '</Relationships>' +
  '</Item>';

  var resItem = top.aras.newIOMItem("","");
  resItem.loadAML(aml);
  resItem = resItem.apply();
  return resItem;
};

// ======= Draw grid contents =======
AttachedFilesGrid.prototype.Draw = function AttachedFilesGrid_Draw() {
	this.grid.removeAllRows();
 	this.GridRowUserData = {};
	this.defaultMenu = this.initDefaultMenu();	

	fn_enableToolbarControls(this.toolbar, false);

    this.gridFullContent_xml = this.GetGridData(this.contextItem.getType(), this.contextItem.getID());
	
	if (this.gridFullContent_xml.getItemCount() === 0) {return;} // do nothing 

	this.DrawGridRows(this.gridFullContent_xml);

	fn_enableToolbarControls(this.toolbar, true);

};

AttachedFilesGrid.prototype.DrawGridRows = function AttachedFilesGrid_DrawGridRows(dataItem) {
	var fileRels = dataItem.getRelationships(this.itemFileRelationship);

	for(var i = 0; i < fileRels.getItemCount(); i++) {
	    var fileRel = fileRels.getItemByIndex(i);
		var relItem = fileRel.getRelatedItem();
		var relItemId = fileRel.getProperty("related_id");

		if (relItem.getAttribute("typeId","") !== "") {
		  var rowID = this.DrawGridRow(relItem, fileRel);
		}
	}
};

AttachedFilesGrid.prototype.DrawGridRow = function AttachedFilesGrid_DrawGridRow(itemNode, relationshipNode) {
	var data = {itemNode: itemNode, relationshipNode: relationshipNode};
	var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.itemColumnDefList);
	var newRowID = itemNode.getID();

	this.grid.addRow(newRowID, row.getValues(), newRowID);
	row.bind(newRowID,null,"File",newRowID);
	return newRowID;
};

AttachedFilesGrid.prototype.gridRefresh = function AttachedFilesGrid_gridRefresh() {
	this.setToolbarItemEnable("reload", false);
	var self = this;
	setTimeout(function(){
		try {
//			var gridState = self.GetGridState();
			self.Draw();
//			setTimeout(function()
//			{
//				self.SetGridState(gridState);
//			},0);
		} finally {
			self.toolbarRefresh();
		}
	} ,0);
};

AttachedFilesGrid.prototype.refreshGridWithTimout = function AttachedFilesGrid_refreshGridWithTimout() {
	//If Refresh will be called multiple times per one execution scope then postponned call of Refresh_Impl will be canceled and initiated new call
	//That is mean that Refresh_Impl will be called once.
	if(this.Refresh_Impl_timeout) {
		clearTimeout(this.Refresh_Impl_timeout);
		delete this.Refresh_Impl_timeout;
	}
	var self = this;
	//Need setTimeout because during handling OnPopulated event document.thisItem contain old item and it will be refreshed after OnPopulated event
	this.Refresh_Impl_timeout = setTimeout(function () {
		self.gridRefresh();
	}, 0);
};

AttachedFilesGrid.prototype.toolbarRefresh = function AttachedFilesGrid_toolbarRefresh() {
	this.setToolbarItemEnable("reload", true);

	this.toolbar.showLabels((top.aras.getVariable('ShowLabels') === 'true'));
};

AttachedFilesGrid.prototype.onGridMenuInit = function AttachedFilesGrid_onGridMenuInit(eArg) {
	//reset menu items, enable all
	for (var i = 0; i < this.defaultMenu.length; i++) {
		if (!this.defaultMenu[i].separator) {
			eArg.menuItems.push({
				label: this.defaultMenu[i].label,
				enabled: true,
				handler: this.defaultMenu[i].handler
			});
		} else {
			eArg.menuItems.push(this.defaultMenu[i]);
		}
	}
	return true;
};

AttachedFilesGrid.prototype.onToolbarClick = function AttachedFilesGrid_onToolbarClick(eArg) {
	if (!this.initialized) {return;}
	var id = eArg.id;
    // add toolbar actions here ...	
	switch(id)
	{
		case "reload":
			this.gridRefresh();
			break;
	}
	// call additional toolbar action handler
	fn_onToolbarAndMenuClickLocalAction(this,id,"toolbar");
};

//-----------  BEGIN Grid's custom grid handlers
AttachedFilesGrid.prototype.onGridMenuClick = function AttachedFilesGrid_onGridMenuClick(menuChoice) {
  var menuItem = this.defaultMenu[parseInt(menuChoice, 10)];
  
  // call additional menu action handler
  fn_onToolbarAndMenuClickLocalAction(this,menuItem.name,"menu");
};

AttachedFilesGrid.prototype.onGridClick = function AttachedFilesGrid_onGridClick(eArg) {
	if (!this.initialized) {return;}
};

AttachedFilesGrid.prototype.onGridDoubleClick = function AttachedFilesGrid_onGridDoubleClick(eArg) {
  var rowId = eArg.rowId;

  var rowItemType = this.getGridRowUserData(rowId,"gridData_rowItemType");
  var rowItemId = this.getGridRowUserData(rowId,"gridData_rowItemID");
  eArg = {selectedId: rowId, rowItemType: rowItemType, rowItemId: rowItemId};

  fn_onOpenRowItem(this, eArg);
};

AttachedFilesGrid.prototype.onGridLinkClick = function AttachedFilesGrid_onGridLinkClick(eArg) {
    var data = eArg.linkData.replace(/'/g,"");
    var linkInfo = data.split(",");
    var rowId = linkInfo[2];
	if (linkInfo[1] === "{OpenRowItem}") {  
	  eArg = {selectedId: rowId, rowItemType: this.getGridRowUserData(rowId,"gridData_rowItemType"), rowItemId: this.getGridRowUserData(rowId,"gridData_rowItemId")};
	  fn_onOpenRowItem(this, eArg);
	}
	
	 //assumes only 1 link per row that links to the row's data item
  //  this.clickedGridLinkValue = strLink; 
};

//-----------  END Grid's custom grid handlers

//------ Definition of default grid context menu
AttachedFilesGrid.prototype.initDefaultMenu = function AttachedFilesGrid_initDefaultMenu() {
	var defaultMenu = [];
    defaultMenu.push({name: "view_item", label: "View File"});
	return defaultMenu;
};

//------ BEGIN: local action handlers for menu or toolbar clicks
fn_onToolbarAndMenuClickLocalAction = function (treeGridCtxt, actionId, actionSource) {
   var selectedId = treeGridCtxt.grid.getSelectedId(); //selected grid row
   if (actionSource === "menu") {
    if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
       return;
	 }
   }

   var rowItemType = treeGridCtxt.getGridRowUserData(selectedId,"gridData_rowItemType");
   var rowItemId = treeGridCtxt.getGridRowUserData(selectedId,"gridData_rowItemID");
   
   var checkMsg = fn_ValidateActionRequest(treeGridCtxt, actionId, rowItemType, selectedId);
   if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

   //debugger;
   var eArg = {selectedId: selectedId, rowItemType: rowItemType, rowItemId: rowItemId};

   actionId = actionSource + "." + actionId;
   // NOTE: toolbar actions: expand, collapse, refresh are covered by default handler
	switch(actionId)
	{
	  case "toolbar.view_item":
	  case "menu.view_item":
	     fn_onOpenRowItem(treeGridCtxt, eArg);
	  	 break;

//	  case "menu.xx":
//	  	 break;
	}
};
//-----------------
fn_onOpenRowItem = function (treeGridCtxt, eArg, checkForItemType) {
  //debugger;
  var itemId = eArg.rowItemId;
  var itemType = eArg.rowItemType;
  if (itemId === "") {return;}

  top.window.close();
  if (top.aras.uiFindWindowEx(itemId)){return;}
  top.aras.uiShowItem(itemType, itemId);
};

//------ END: local action handlers for menu or toolbar clicks

//------ BEGIN: validation functions
//--------------
fn_ValidateActionRequest = function (treeGridCtxt, actionId, itemType, rowId) {
  // run various checks specific to action
  //debugger;
  switch (actionId)
  {
    case "view_item":
      break;
  }

  // success
  return "";
};
//------ END: validation functions

//-------------
fn_enableToolbarControls = function (toolbarCtxt, isOn, msg) {
  if (!msg && msg === undefined) {msg = "Loading";}  

  fn_enableToolbarElement(toolbarCtxt, "reload", isOn, false);
  fn_enableToolbarElement(toolbarCtxt, "view_item", isOn, false);
   
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbarCtxt.showLabels(val);
  //toolbarCtxt.focus();
};

//------ END: local helper functions

// =======  Definition of grid header and columns layout =======
fn_getGridTableColumnHeadingsAndLayout = function (itemTypeName,relTypeName) {
  // PARAMETERS ARE:
	// Name: name of column, must be the same in all column definitions !!!
	// Title: if Title = undefined,  PropItemType and PropName must be set
	// PropItemType:
  	// PropName:
	// Width: in pixel
	// Align: l,r,c
	// EditType: noedit=disables edit on entire column, FIELD=text input, COMBO=drop down list
	// FilterEdit: same values as EditType. controls if cell in input_row can be edited
	// display order of columns left to right in order listed !!!
	var columnList = [
	{Name: "FNAME", PropItemType:itemTypeName,	PropName: "filename",			Width: "200",	Align: "l"},
	{Name: "SHARED", PropItemType:relTypeName,	PropName: "is_shared",			Width: "70",	Align: "c"},
	{Name: "FTYPE", PropItemType:itemTypeName,	PropName: "file_type",			Width: "140",	Align: "c"},
	{Name: "FSIZE", PropItemType:itemTypeName,	PropName: "file_size",			Width: "80",	Align: "c"},
	{Name: "FGEN", PropItemType:itemTypeName,	PropName: "generation",			Width: "40",	Align: "c"}
];
 
	return columnList;
};

fn_fetGridTableColumnDefOfRowItems = function (itemTypeName,relTypeName) {
  // COLUMN VALUE PARAMETERS ARE:
	// Class: optional - if missing "DefaultCellClass" will be used. Listed class can overwrite default cell functions,like UI formatting,if used.
	// PropItemType: optional
	// PropName: required, if Class is missing.
	// isRelProp: set to "false", if property value can be retrieved from item; set to "true", if property value can be retrieved from relationship  (if missing, it is set to "false")
	// CellBg: optional - set to a valid color value (i.e. "#ff0000") - if set to keyword "{propCSS}", the background color set in property's CSS will be used.
	// CellStaticValue: optional - if set to a text, it this text will be displayed instead of the property's value 
	// CellLinkKey: optional, CellLinkItemType must be set. 	if set to keyword {OpenRowItem}, the registered type and id of the row will be opened.
    //															if set to keyword {FilesOfRelatedItem}, the files attached to rowItem (i.e. Document will be shown (more rules TBD)
	// isEditable: optional (default= false), set to "true" to allow edits (grid must be set to editable, as well)

    // Index must match a columnName of HeadingsAndLayout !!! 
	var columnList = [];
	columnList["FNAME"] =	{PropItemType:itemTypeName,			PropName: "filename",	CellLinkKey:"{OpenRowItem}"};
	columnList["SHARED"] =	{PropItemType:relTypeName,			PropName: "is_shared",		CellValueType: "check"};
	columnList["FTYPE"] =	{PropItemType:itemTypeName,			PropName: "file_type",		CellValueType: "keyed_name"};
	columnList["FSIZE"] =	{PropItemType:itemTypeName,			PropName: "file_size"};
	columnList["FGEN"] =	{PropItemType:itemTypeName,			PropName: "generation"};
	
	return columnList;
};
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Item Folder RelFiles GridHandler</name>
 </Item>
</AML>