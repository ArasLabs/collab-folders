<AML>
 <Item type="Method" id="226369A462964B6ABC146012FEDE614D" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Client side Method: treeGrid1 Handler
// 
// load with --> onLoad Event on Form:
//
// the variable treeGrid1_Control is defined globally in separate HTML code on form field
// the variable toolbar1_Control is defined globally in separate HTML code on form field
//
//  ---- history -----
//  RL  5.05.2013          v1-8 reworked to work with new html skeleton and TreeGridContainer of Innovator10beta
//                         - added drag-n-drop of files onto folder rows.
//                         - added menu actions, if rootItem is locked by user
//                             lock/unlock
//                             Attach File
//                             Add Controlled Item
//                             Add New Contrilled Item
//
//  RL  28.08.2013          v2-0. Added i18n support for toolbar, menus and messages. (language files in: Client/Solutions/DocumentHierarchies/xml)
//                         - improved loaded utilizing "has_sub_folder" flags and logic (level by level)
//                         - added menu actions, if rootItem is locked by user
//                             Add Sub Folder
//
//  RL  16.10.2013          v2-1. reduced server calls to get sub folders and related items in one AML
//                          - added owner column to grid
//
// ====================================================================================================================
// grid.setUserData/grid.getUserData is used to store additional information critical for the logic to work properly.
// Like: click actions after the grid is loaded. or, reloading logic on expand events.

// the user data keys used in this module are:
//    gridData_rowItemType         --> holds the item type name of the child item presented on the grid's tree
//    gridData_rowItemID           --> holds the 32char id of the child item presented on the grid's tree
//    gridData_rowItemNumber       --> holds the value of property 'item_number' of the child item presented on the grid's tree
//    gridData_relshipDetails      --> holds relationship property values relevant to store to "CM2_chgImp Matrix" later.
//    gridData_hasSubLevelsLoaded  --> set to '1', if this row was expanded once already
// ====================================================================================================================
if (OnLoadMethodsLoaded) {return;}

//----- callback called from html field's code -------------
window.RefreshGrid = function(doInit,item)
{
  if(doInit) { setTimeout("fn_RefreshGrid (true);", 150); }
  else  { setTimeout("fn_RefreshGrid (false);", 150); }
};

//----- callback called from html field's code -------------
window.populateToolbar1 = function(enableControls)
{
  if(enableControls && enableControls !== undefined) {enableControls = true;}

  initGlobalVariables();
  //debugger;

  //fn_loadGridToolbarXML(enableControls); 
  //toolbar1_Control.loadXML(top.aras.getI18NXMLResource("ItemFolderNavigatorToolbar.xml", "../Solutions/ItemFolders/"));
  toolbar1_Control.loadXML(top.treeGrid1.toolbarXmlUrl);
  
  toolbar1_Control.show();
  
  // initialize setting on toolbar control
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbar1_Control.showLabels(val);
  
// -- give the toolbar some time to load before accessing its controls
  setTimeout("initTbControls();", 100); 
  
};
initTbControls = function()
{
  fn_enableToolbarControls(false); 

  // define startup effectivity mode
  if (fn_isUserMemberOfThisItemTeamGuest(rootItem)) {
    fixEffectivityToReleased = true;
    fn_setChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode", "latest_released"); // triggers a refresh
  }
  else {
    fixEffectivityToReleased = false;
    fn_setChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode", "current_config"); // triggeres a refresh
  }
};

//----- callback called from html field's code -------------
window.populateTreeGrid1 = function(item)
{
  // populate the grid
  if(item && item !== undefined) {argsItem = item;}
  
  setTimeout("window.RefreshGrid (true,item);", 150); 
};
//=================================================
//------ start of grid specific logic .... --------
var isStartedFromTab = (top.relationships && top.relationships !== undefined);

// common global variables
var innovator = new top.Innovator();
var GridXMLHeader = '';
var result,argsItem;
var rootItem, rootItemId, rootItemType;
var topFolderItem,topFolderItemId;
var thisStructRelType;
var statusMsgId ="";
var showRootItem;
var skipRefresh;
var isTopFolderParentItemLocked;
var fixEffectivityToReleased;
var isAllLoaded;

var folderGroupFiles_label = "Attachments";  // read from server UserMessage to get multi Language config
var folderGroupFiles_openIcon = "../images/icons/GridIcons/has_files.gif";
var folderGroupFiles_closedIcon = "../images/icons/GridIcons/has_files.gif";
var folderIconClosed = "../images/Icons/16x16/16x16_folder_closed.gif";
var folderIconOpened = "../images/Icons/16x16/16x16_folder_open.gif";
var hasFiles_Icon = "../images/icons/GridIcons/has_files.gif";
var hasDetails_Icon = "../images/Icons/16x16/16x16_i.gif";
var isShared_Icon = "../images/icons/GridIcons/is_shared.gif";
var tbProgressImage = "icons/tbProgress.gif";
//var tbProgressImage = "../images/Animated/ProgressSmall.gif";

var folderGroupCtrldItems_label = "Controlled Items"; // read from server UserMessage to get multi Language config
var folderGroupCtrldItems_openIcon = "../images/Icons/16x16/16x16_files.gif";
var folderGroupCtrldItems_closedIcon = "../images/Icons/16x16/16x16_files.gif";


//--------------
initGlobalVariables = function ()
{
  top.treeGrid1 = new FolderStructGrid;
  topFolderItemId = "";
  
  if (isStartedFromTab) 
  {
    rootItem = document.thisItem;
  }
  else
  {
    // this mode is not supported
	return false;
  }
  rootItemType = document.thisItem.GetType();
  rootItemId = document.thisItem.getAttribute("id","");

  switch (rootItemType)
  {
    case "Item Folder Template":
    case "Program":
    case "Project":
       var rootItemTopFolderLinkId = rootItem.getProperty("top_item_folder_id","");
       if (rootItemTopFolderLinkId !== "") {
         topFolderItem = innovator.getItemById("Item Folder", rootItemTopFolderLinkId);
         showRootItem = true;
         topFolderItemId = rootItemTopFolderLinkId;
       }
       break;
    case "Item Folder":
       showRootItem = true;
       topFolderItemId = rootItemId;
       break;
  }
  
  skipRefresh = true;
  isAllLoaded = false;

  thisStructRelType = "Item Sub Folder";
  top.treeGrid1.currentUserIsOwner = IsCurrUserMemberOfIdentityId(rootItem.getProperty("owned_by_id",""));

  return true;
};

//-----------------------------------
DefCellClass = function() {  // ## cell classes are not in use, yet - future extentions
};

// Grid Class instantiation
//-----------------------------------
FolderStructGrid = function FolderStructGridFunc()
{
  if (this.Initialized) {return;}

  this.clickedGridLinkValue = "";
  this.numberOfGridColumns = 0;

  // define Folder Item and Rel property data sources
  this.folderItemSelectProperties = "item_number,name,description,state,locked_by_id,classification,major_rev,generation,has_files,has_files_icon,has_sub_folders,has_controlled_items,is_released,team_id,owned_by_id,managed_by_id";
  this.folderControlledItemSelectProperties = "item_number,name,description,state,locked_by_id,classification,major_rev,generation,has_files,has_files_icon,css,is_released,team_id,owned_by_id,managed_by_id";
  this.folderRelItemSelectProperties = "sort_order,org_number";

  // Definiton of grid layout and header titles -- must be in order left to right !
  
  this.gridColumnList = [
	{Name: "Tree",		Width: "280",	Align: "l"	,Edit: "noedit",	DefaultOrder: 0, CellValueFormat: "tree++",			Title: top.aras.getResource("ItemFolders", "itemfoldertreegrid.gridheading.col0") , Property: "rel.org_number+name", Class: DefCellClass}, 
	{Name: "Sort",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 1, CellValueFormat: "text:#-#", Title: fn_getColumnLabelByName("Item Sub Folder","sort_order") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Lock",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 2, CellValueFormat: "lock", Title: fn_getColumnLabelByName("Item Folder","locked_by_id") , Property: "item.locked_by_id", Class: DefCellClass}, 
	{Name: "HasFiles",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 3, CellValueFormat: "text:#-#", Title: fn_getColumnLabelByName("Item Folder","has_files") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Status",	Width: "80",	Align: "c"	,Edit: "noedit",	DefaultOrder: 4, CellValueFormat: "text", Title: fn_getColumnLabelByName("Item Folder","state") , Property: "state", Class: DefCellClass}, 
	{Name: "Revision",	Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 5, CellValueFormat: "text:#-#", Title: fn_getColumnLabelByName("Item Folder","major_rev") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Gen",		Width: "40",	Align: "c"	,Edit: "noedit",	DefaultOrder: 6, CellValueFormat: "text:#-#", Title: fn_getColumnLabelByName("Item Folder","generation") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "ModifiedOn",Width: "80",	Align: "l"	,Edit: "noedit",	DefaultOrder: 7, CellValueFormat: "text:#-#", Title: fn_getColumnLabelByName("Item Folder","modified_on") , Property: "<empty>", Class: DefCellClass}, 
	{Name: "Owner",		Width: "120",	Align: "l"	,Edit: "noedit",	DefaultOrder: 8, CellValueFormat: "keyed_name", Title: fn_getColumnLabelByName("Item Folder","owned_by_id") , Property: "item.owned_by_id", Class: DefCellClass},
	{Name: "Descr",		Width: "300",	Align: "l"	,Edit: "noedit",	DefaultOrder: 9, CellValueFormat: "text", Title: fn_getColumnLabelByName("Item Folder","description") , Property: "item.description", Class: DefCellClass}
  ];

  this.toolbarXmlUrl = top.aras.getI18NXMLResource("ItemFolderNavigatorToolbar.xml", "../Solutions/ItemFolders/");
  
  // comma separated lists needed for AddRow helper functions (later)
  this.columnProperties = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnProperties");
  this.columnWidths = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnWidths");
  this.columnAlign = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnAlign");
  this.columnDisplayTypes = fn_BuildListFromColumnsDefinition(this.gridColumnList, "ColumnCellValueFormats");

  this.columnPropertiesControlledItem = "item.item_number,rel.sort_order,item.locked_by_id,item.has_files_icon,item.state,item.major_rev,item.generation,item.release_date,item.owned_by_id,item.name";
  this.columnDisplayTypesControlledItem = "tree:as_link,text,lock,text:as_link,text:bg_color,text,text,date,keyed_name,text";
  
  this.columnPropertiesFileItem = "item.filename,rel.sort_order,item.locked_by_id,<empty>,<empty>,<empty>,item.generation,item.modified_on,rel.comments";
  this.columnDisplayTypesFileItem = "tree:as_link,text,lock,text:#-#,text:#-#,text:#-#,text,date,text";

  this.numberOfGridColumns = this.columnWidths.split(",").length; 
  
  this.lockIconColumnNo = fn_GetColumnNoByCellName(this.gridColumnList, "Lock");
  this.hasFilesIconColumnNo =  fn_GetColumnNoByCellName(this.gridColumnList, "HasFiles");
  this.statusColumnNo =  fn_GetColumnNoByCellName(this.gridColumnList, "Status");
    
  this.currentUserIsOwner = false;
  
};

//------- Initialize the layout of the Grid
//==================== Grid Layout & Style ===================================
FolderStructGrid.prototype.Initialize = function FolderStructGrid_Initialize()
{
  if (top.treeGrid1 && top.treeGrid1.Initialized) {return;}

  GridXMLHeader = '';
  GridXMLHeader += '<?xml version="1.0"?><table font="Microsoft Sans Serif-8" ';
  GridXMLHeader += 'backgroundColor="white" ';
  GridXMLHeader += 'sel_bgColor="steelbue" '; // html predefined
  GridXMLHeader += 'sel_TextColor="white" ';
  GridXMLHeader += 'header_BgColor="buttonface" ';
  GridXMLHeader += 'delim ="|" ';
  //GridXMLHeader += 'zebra="true" ';
  GridXMLHeader += 'editable="false" ';
  GridXMLHeader += 'draw_grid="true" ';
  GridXMLHeader += 'multiselect="false" ';
  GridXMLHeader += 'enableHtml="false" ';
  GridXMLHeader += 'enterAsTab="false" ';
  GridXMLHeader += 'bgInvert="true" ';    
  GridXMLHeader += 'expandroot="true" ';
  GridXMLHeader += 'expandall="false" ';
  GridXMLHeader += 'treelines="1" ';
//  GridXMLHeader += 'locale="enUS" ';
  GridXMLHeader += 'onrowselect="treeGrid1_onGridClick" ';
  GridXMLHeader += 'onDoubleClick="treeGrid1_onGridDoubleClick" ';

  GridXMLHeader += '  column_draggable="true" ';
//  GridXMLHeader += '  xmlns:msxsl="urn:schemas-microsoft-com:xslt" ';
//  GridXMLHeader += '  xmlns:aras="http://www.aras.com" ';
//  GridXMLHeader += '  xmlns:usr="urn:the-xml-files:xslt" >';

  GridXMLHeader += '> ';
  // column headings
  GridXMLHeader += '<thead>';
  
	for(var columnIndex = 0; columnIndex < top.treeGrid1.gridColumnList.length; columnIndex++) {
		GridXMLHeader += ' <th align="c">' + top.treeGrid1.gridColumnList[columnIndex].Title + '</th>';
	}
	GridXMLHeader += '' +
	' </thead>' +
	' <columns>';	
	for(columnIndex = 0; columnIndex < top.treeGrid1.gridColumnList.length; columnIndex++) {
		GridXMLHeader += ' <column width="' + top.treeGrid1.gridColumnList[columnIndex].Width + '" align="' + top.treeGrid1.gridColumnList[columnIndex].Align + '" edit="' + 
				top.treeGrid1.gridColumnList[columnIndex].Edit + '" order="' + top.treeGrid1.gridColumnList[columnIndex].DefaultOrder + '" colname="' + top.treeGrid1.gridColumnList[columnIndex].Name + '" />';
	}	
	GridXMLHeader += '' +
	' </columns>';
  
  GridXMLHeader += '<menu>';
  GridXMLHeader += '<emptytag/>';
  GridXMLHeader += '</menu>';
  GridXMLHeader += '</table>';

  top.treeGrid1.Initialized = true;  

  var lockStat = document.thisItem.getLockStatus();
  if (lockStat == 1) {isTopFolderParentItemLocked = true;}
  else {isTopFolderParentItemLocked = false;}

};

//-----------------------------------
fn_RefreshGrid = function(doInit, isLoadAll)
{
  if(doInit === undefined) {doInit = true;}
   	
  if(doInit)
  {
    top.treeGrid1.Initialized = false;
    top.treeGrid1.Initialize();
  }
  if (skipRefresh) {skipRefresh = false; return;}   

  try
  {
    top.treeGrid1.Draw(true,isLoadAll);
    skipRefresh = false;
  }
  finally
  {
  }
};

//--------------
//------- populate the Grid
FolderStructGrid.prototype.Draw = function FolderStructGrid_Draw(forceGetRelationships, isLoadAll)
{
  if (!topFolderItemId || topFolderItemId === undefined || topFolderItemId === "") {fn_enableToolbarControls(true);return;}
  
  fn_enableToolbarControls(false);
  isAllLoaded = false;
  var isLoadReleasedItems = (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode") === "latest_released");
  
  //debugger;
  treeGrid1_Control.clear();treeGrid1_Control.focus();
  treeGrid1_Control.InitXml(GridXMLHeader);	
  fn_clearResultsOnStatusBar();

// treeGrid1_Control.RowHeight="50";
// treeGrid1_Control.InputRow="true";
  treeGrid1_Control.HideOnLoad="true";
    
  // check if top folder already saved to server, if error just exit
  var rootItem = fn_GetFolderItemWithRelatedItems(topFolderItemId,isLoadReleasedItems);
  if (rootItem.isError()) {fn_enableToolbarControls(true);return;}
  rootItemId = rootItem.getID();

  var rootRowId = "ROOT-" + rootItemId;
  fn_MultiLevelItems_AddRootRowWithIconToGrid (treeGrid1_Control, rootRowId,
       top.treeGrid1.columnProperties,top.treeGrid1.columnDisplayTypes,folderIconClosed,folderIconOpened, rootItem, false);

  // add related items to root row
  fn_addFolderGroupsAndRelatedItemsToRow(rootRowId, rootItem);
  
  // add 1 level sub folders
  fn_AddSubFoldersToThisFolder(rootItemId, rootRowId, folderIconClosed, folderIconOpened, isLoadAll, isLoadReleasedItems);

  if (rootItem.getProperty("has_sub_folders","0") == "1") {
    treeGrid1_Control.setUserData(rootRowId,"gridData_hasSubLevelsLoaded","1");
  }
  
  if (treeGrid1_Control.GetRootItemsCount() === 1) {
    skipRefresh = true;
    treeGrid1_Control.openItem(rootRowId);  // this will trigger another "Draw" event, that can be skipped
  }
  // color code root row
  fn_SetBackgroundColorInRow(treeGrid1_Control,rootRowId,0,top.treeGrid1.numberOfGridColumns-1, "#ffeeee");

  fn_enableToolbarControls(true);
  treeGrid1_Control.ShowContent();
};


//--------------
fn_GetFolderItemWithRelatedItems = function(folderItemId, isReleased)  {
  var aml =
  '    <Item type="Item Folder" action="get" select="id,config_id,'+top.treeGrid1.folderItemSelectProperties+'" id="'+folderItemId+'" >' +
  '    <Relationships>' +
  '      <Item type="Item Folder File" action="get" select="sort_order,is_shared,related_id(id,config_id,file_type,filename,generation,modified_on)" >' +
  '      </Item>' +
  '      <Item type="Item Folder Controlled Item" action="get" select="sort_order,related_id(id,config_id,'+top.treeGrid1.folderControlledItemSelectProperties+')" >' +
  '        <related_id>' +
  '          <Item type="Folder Controlled Item" action="get" select="id,config_id,'+top.treeGrid1.folderControlledItemSelectProperties+'" >';
             if (isReleased) {aml += '<is_released>1</is_released>';} aml += 
  '           </Item>' +
  '        </related_id>' +
  '      </Item>' +
  '    </Relationships>' +
  '    </Item>';
  var folderItem = top.aras.newIOMItem("","");
  folderItem.loadAML(aml);
  return folderItem.apply();
};

//--------------
fn_AddSubFoldersToThisFolder = function(parentFolderId, parentRowId, folderIconClosed, folderIconOpened, isLoadAll, isReleased)  {
  if (!isReleased || isReleased === undefined) {isReleased = false;}

  var amlQry;
  var qry;
  // get effective sub folders  
  amlQry =
  '<Item type="Item Sub Folder" action="get" ' +
  ' select="id,source_id(owned_by_id,managed_by_id,team_id,locked_by_id,has_files,has_controlled_items,has_sub_folders),related_id,'+top.treeGrid1.folderRelItemSelectProperties+'" ' +
  ' orderBy="org_number,sort_order" >' +
  '  <source_id>'+parentFolderId+'</source_id>' +
  '  <related_id>' +
  '    <Item type="Item Folder" action="get" select="id,config_id,'+top.treeGrid1.folderItemSelectProperties+'">';
       if (isReleased) {amlQry += "<state>Active</state>";} amlQry += 
  '    </Item>' +
  '  </related_id>' +
  '</Item>';
  qry = top.aras.newIOMItem("","");
  qry.loadAML(amlQry); 
  var subFolderRels = qry.apply();

  //debugger;
  // remove dummy sub folder from grid as real next level get loaded
  if (treeGrid1_Control.IsItemExists(parentFolderId+"-DUMMY") ) {treeGrid1_Control.DeleteRow(parentFolderId+"-DUMMY");}
  
  //loop
  var thisRel,relId;
  var srcId = parentFolderId;
  for (var i=0; i < subFolderRels.getItemCount(); i++)
  {
    thisRel = subFolderRels.getItemByIndex(i);
	relId = thisRel.getProperty("related_id",""); 
	var srcItem = thisRel.getPropertyItem("source_id");
	var relItem = thisRel.getPropertyItem("related_id");
    var newRowId = srcId + "-" + relId;

    // now add the sub folder row
	fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parentRowId, newRowId,
       top.treeGrid1.columnProperties,top.treeGrid1.columnDisplayTypes,folderIconClosed,folderIconOpened, thisRel, true);

	treeGrid1_Control.setUserData(newRowId,"gridData_parentItemId",srcId );
	treeGrid1_Control.setUserData(newRowId,"gridData_rowItemType","Item Folder" );
	treeGrid1_Control.setUserData(newRowId,"gridData_rowItemID",relId );

    // add dummy sub folder to allow expand event to load of next levels
	if (relItem.getProperty("has_sub_folders","0") == "1")
	{
	  if (treeGrid1_Control.GetChildItemsCount(newRowId) <= 0)
	  {
	    treeGrid1_Control.InsertNewChild(newRowId,relId+"-DUMMY", "||||", relId+"-DUMMY",folderIconClosed,folderIconOpened);
	  }
	}
  }
  
  // get effective sub folders with effective related items (Files, Docs, Parts ...) 
  amlQry =
  '<Item type="Item Sub Folder" action="get" ' +
  ' select="id,source_id,related_id" >' +
  '  <source_id>'+parentFolderId+'</source_id>' +
  '  <related_id>' +
  '    <Item type="Item Folder" action="get" select="id,config_id" >';
       if (isReleased) {amlQry += "<state>Active</state>";} amlQry += 
  '    <Relationships>' +
  '      <Item type="Item Folder File" action="get" select="sort_order,is_shared,related_id(id,config_id,file_type,filename,generation,modified_on)" >' +
  '      </Item>' +
  '      <Item type="Item Folder Controlled Item" action="get" select="sort_order,related_id(id,config_id,'+top.treeGrid1.folderControlledItemSelectProperties+')" >' +
  '        <related_id>' +
  '          <Item type="Folder Controlled Item" action="get" select="id,config_id,'+top.treeGrid1.folderControlledItemSelectProperties+'" >';
             if (isReleased) {amlQry += '<is_released>1</is_released>';} amlQry += 
  '           </Item>' +
  '        </related_id>' +
  '      </Item>' +
  '    </Relationships>' +
  '    </Item>' +
  '  </related_id>' +
  '</Item>';

  qry = top.aras.newIOMItem("","");
  qry.loadAML(amlQry); 
  var relItemRels = qry.apply();

  //loop results with relationships (related Item) and add to all folders
  for (i=0; i < relItemRels.getItemCount(); i++)
  {
    thisRel = relItemRels.getItemByIndex(i);
	relId = thisRel.getProperty("related_id",""); 

	// add related items to this folder (relItem) row
    fn_addFolderGroupsAndRelatedItemsToRow(srcId + "-" + relId, thisRel.getPropertyItem("related_id"));
  }
  
  // run recursion to load all
  if (isLoadAll)
  {
    for (i=0; i < subFolderRels.getItemCount(); i++)
    {
      thisRel = subFolderRels.getItemByIndex(i);
	  relId = thisRel.getProperty("related_id",""); 
      fn_AddSubFoldersToThisFolder(relId, srcId + "-" + relId, folderIconClosed, folderIconOpened, isLoadAll, isReleased);
    }
  }
};

//--------------
fn_addFolderGroupsAndRelatedItemsToRow = function(parent_row_id, folderItem)  {
  fn_addRelatedFileRowsToRow(parent_row_id, folderItem,"Item Folder File");  
  fn_addFolderControlledItemsToRow(parent_row_id, folderItem);
};

//--------------
fn_addFolderControlledItemsToRow = function(parent_row_id, parentItem)  {
  var ctrldItemsGroupsNodeId = "";

  var sourceItemId = parentItem.getID();

  // get controlled item relationships from parentFolderItem
  var relItemRels = parentItem.getRelationships("Item Folder Controlled Item");
  if (!relItemRels)  {return 0;}
  if (relItemRels.isError())  {return 0;}
  
  // add phantom grid row to group controlled Items
  if (ctrldItemsGroupsNodeId === "" && relItemRels.getItemCount() > 0) {ctrldItemsGroupsNodeId = fn_InsertControlledItemsGroupRowToTreeGrid (parent_row_id,sourceItemId); }

  // loop through query results and match config_ids to replace with effective related item
  // then add the rows to the tree grid
  for (var r = 0 ; r < relItemRels.getItemCount() ; r++) {
      var relItemRel = relItemRels.getItemByIndex(r);
	  var relItem = relItemRel.getPropertyItem("related_id");
      var ctrldItemType = relItemRel.getPropertyItem("related_id").getAttribute("type","");

      var newNodeId = sourceItemId + "-" + relItemRel.getProperty("related_id");
      fn_AddOrUpdateRowItemDataOnThisRow(ctrldItemsGroupsNodeId, newNodeId, ctrldItemType, relItemRel, true);

	  treeGrid1_Control.setUserData(newNodeId,"gridData_parentItemId",sourceItemId );
  }   
  return relItemRels.getItemCount();
};

//--------------
fn_getFolderControlledItemRel = function(sourceItemId, relatedItemId  )  {
  var itemSelectProperties = top.treeGrid1.folderControlledItemSelectProperties;

    // get relationship of related this ItemType
    var amlQry = "<Item type='Item Folder Controlled Item' action='get' select='id,source_id(owned_by_id,managed_by_id,team_id,locked_by_id),related_id,"+top.treeGrid1.folderRelItemSelectProperties+"' >";
    amlQry += "<source_id>"+sourceItemId+"</source_id>";
    amlQry += "<related_id>";
    amlQry += "<Item type='Folder Controlled Item' action='get' select='id,config_id,"+itemSelectProperties+"'>";
    amlQry += "<id>"+relatedItemId+"</id>";
    amlQry += "</Item>";
    amlQry += "</related_id>";
    amlQry += "</Item>";
    var qry = top.aras.newIOMItem("","");
    qry.loadAML(amlQry); 
    var relItemRels = qry.apply();
    
	if (relItemRels.getItemCount() <=0) {return relItemRels;}  // no controlled items for this folder 

	// with given relatedID result is expected to be 1
	// if poly item's config lists the same item type multiple times, then the same relship is returned multiple times
	// Poly item config must be corrected manually (due to packages import issues)
	// still continue by using the first rel listed.
	return relItemRels.getItemByIndex(0);
};

//--------------
fn_isUserMemberOfThisItemTeamGuest = function(itm)  {
  return false; //always grants access
 
  //##TODO##
 
  //var teamId = itm.getProperty("team_id");
  
  
  //get team member rows with team role "Team Guest"
  
  //loop rows and check if current user is member of any guest identity. if yes return true
  
  
  //return false;
};

//--------------
fn_addRelatedFileRowsToRow = function(row_id, parentFolderItem, fileRelationshipName )  {
  if (!fileRelationshipName || fileRelationshipName === undefined || fileRelationshipName === "") {return 0;}
  
  var fileSourceItemId = parentFolderItem.getID();
  var parent_row_id = row_id;
  var createTempFolder = false;
  var filesGroupNodeId = null;
  var parentRowId = row_id;

  // get File relationships from this parentFolderItem
  var fileRels = parentFolderItem.getRelationships("Item Folder File");
  if (!fileRels)  {return 0;}
  if (fileRels.isError())  {return 0;}

  var filesCount = fileRels.getItemCount();
  if (filesCount <=0) {return 0;}

  if (fileRelationshipName === "Item Folder File") {
    // add phantom grid row to group files
    parentRowId = fn_InsertFilesGroupRowToTreeGrid (row_id, fileSourceItemId);  
  }
  var p;
  for (p=0; p<filesCount; p++) {
    // debugger;
  	var fileRel = fileRels.getItemByIndex(p);
    var fileItem = fileRel.getPropertyItem("related_id");
	
	// do not display un-shared files, if user ia team guest of folder
	if (!fn_isUserMemberOfThisItemTeamGuest(parentFolderItem) || fileRel.getProperty("is_shared","0") === "1" )
    {
	var newNodeId=fileSourceItemId + "-" + fileRel.getProperty("related_id");  // combine parent & child id - for unique grid-ID
		
    fn_AddOrUpdateRowItemDataOnThisRow(parentRowId, newNodeId, "File", fileRel, true);
    
	treeGrid1_Control.setUserData(newNodeId,"gridData_parentItemId",fileSourceItemId );
    }
  }
  filesCount = p;
  return filesCount;
};

//--------------
fn_getFolderAttachedFileRel = function(fileRelationshipName, folderItem, relatedItemId  )  {
  var sourceItemId = folderItem.getID();
  var amlQry = "<Item type='"+fileRelationshipName+"' action='get' select='sort_order,is_shared,comments,source_id(owned_by_id,managed_by_id,team_id,locked_by_id),related_id' >";
  amlQry += "<source_id>"+sourceItemId+"</source_id>";
  amlQry += "<related_id><Item type='File' action='get' select='id,config_id,file_type,filename,generation,locked_by_id,modified_on' ";
  amlQry += "id='"+relatedItemId+"' ";
  amlQry += "></Item></related_id>";
  amlQry += "</Item>";
  var qry = top.aras.newIOMItem("","");
  qry.loadAML(amlQry); 
  return qry.apply();
};

//-----------------
fn_SetBackgroundColorInRow = function (gridCtrl, row_id, startCell, endCell, colorCode, upToRoot) {
  if (!upToRoot || upToRoot === undefined) {upToRoot = false;}
  fn_SetBackgroundColorOfCellsInRow(gridCtrl, row_id, startCell, endCell, colorCode);
  // include one parent level
  var parent_row_id = gridCtrl.getParentId(row_id);
  if (parent_row_id && parent_row_id.indexOf("ROOT") < 0) {fn_SetBackgroundColorOfCellsInRow(gridCtrl, parent_row_id, startCell, endCell, colorCode);}

  if (!upToRoot) {return;}
  parent_row_id = gridCtrl.getParentId(parent_row_id);
  while (parent_row_id)
  {
    if (parent_row_id.indexOf("ROOT") < 0)
      {fn_SetBackgroundColorOfCellsInRow(gridCtrl, parent_row_id, startCell, endCell, colorCode);}
    parent_row_id = gridCtrl.getParentId(parent_row_id);
  }
  return;
};

//-----------------
fn_InsertControlledItemsGroupRowToTreeGrid = function (parentNodeId, sourceItemId) {
  var groupNodeId = sourceItemId + "-CTRLD_ITEMS_GROUP";
  if (treeGrid1_Control.isItemExists(groupNodeId)) {return groupNodeId;}

  // add summary row for documents as child of PI row
  var gridRow = folderGroupCtrldItems_label + ":|||";
  treeGrid1_Control.InsertNewChild(parentNodeId, groupNodeId, gridRow, groupNodeId, folderGroupCtrldItems_openIcon, folderGroupCtrldItems_closedIcon);
  treeGrid1_Control.setUserData(groupNodeId,"gridData_rowItemType","CTRLD_ITEMS_GROUP");

  // show Details icon on folder row 
  //treeGrid1_Control.setCellValue(parentNodeId,top.treeGrid1.statusColumnNo,"<img src='"+hasDetails_Icon+"' />");
  treeGrid1_Control.setUserData(parentNodeId,"gridData_hasFolderDetails","1");
  fn_SetBackgroundColorInRow(treeGrid1_Control,groupNodeId,0,top.treeGrid1.numberOfGridColumns-1, "#eeeeee");
  return groupNodeId;
};

//-----------------
fn_InsertFilesGroupRowToTreeGrid = function (parentNodeId, sourceItemId) {
  var groupNodeId = sourceItemId + "-FILES_GROUP";
  if (treeGrid1_Control.isItemExists(groupNodeId)) {return groupNodeId;}

  // add summary row for documents as child of PI row
  var gridRow = folderGroupFiles_label + ":|||";
  treeGrid1_Control.InsertNewChild(parentNodeId, groupNodeId, gridRow, groupNodeId, folderGroupFiles_openIcon, folderGroupFiles_closedIcon);
  treeGrid1_Control.setUserData(groupNodeId,"gridData_rowItemType","FILES_GROUP");

  // show Details icon on folder row 
  //treeGrid1_Control.setCellValue(parentNodeId,top.treeGrid1.statusColumnNo,"<img src='"+hasDetails_Icon+"' />");
  treeGrid1_Control.setUserData(parentNodeId,"gridData_hasFolderDetails","1");
  fn_SetBackgroundColorInRow(treeGrid1_Control,groupNodeId,0,top.treeGrid1.numberOfGridColumns-1, "#eeeeee");
  
  return groupNodeId;
};

//-----------------
fn_AddOrUpdateRowItemDataOnThisRow = function(parent_row_id, row_id, itemType, rowItem, isRelship)
{
  if (itemType == "Item Folder") {
    if (parent_row_id && parent_row_id !== undefined && parent_row_id !== "" && !treeGrid1_Control.isItemExists(row_id))
      {
        // add new Folder row to grid
        fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parent_row_id ,row_id,
               top.treeGrid1.columnProperties, top.treeGrid1.columnDisplayTypes,
               "../images/Icons/16x16/16x16_folder_closed.gif","../images/Icons/16x16/16x16_folder_open.gif", rowItem, isRelship);
      }
      else {
        // update the existing row
        fn_MultiLevelItems_UpdateRowWithIconOnGrid (treeGrid1_Control, row_id,
               top.treeGrid1.columnProperties, top.treeGrid1.columnDisplayTypes,
               "../images/Icons/16x16/16x16_folder_closed.gif","../images/Icons/16x16/16x16_folder_open.gif", rowItem, isRelship); 
	  }
  }
  else
  { 
      if (itemType == "File") {
      //	   var fileTypeItem = fileItem.getItemsByXPath("//Item[@type='FileType']");
      //	   var fileType = fileTypeItem.getProperty("keyed_name","-").toLowerCase();
      var fileType = ""; //##### fix this  later
	  rowIcon = getFileIcon(fileType);
     
      if (parent_row_id && parent_row_id !== undefined && parent_row_id !== "" && !treeGrid1_Control.isItemExists(row_id)) {
      // add new child row to grid
        fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parent_row_id ,row_id,
			   top.treeGrid1.columnPropertiesFileItem, top.treeGrid1.columnDisplayTypesFileItem,
               rowIcon, rowIcon, rowItem, isRelship);
               
      }
      else {
        // update the existing row
        fn_MultiLevelItems_UpdateRowWithIconOnGrid (treeGrid1_Control, row_id,
			   top.treeGrid1.columnPropertiesFileItem, top.treeGrid1.columnDisplayTypesFileItem,
               rowIcon, rowIcon, rowItem, isRelship);
      
      }
      if (isRelship && rowItem.getProperty("is_shared","0") === "1")
        {treeGrid1_Control.setCellValue(row_id,top.treeGrid1.hasFilesIconColumnNo,"<img src='"+isShared_Icon+"' />");}

      }
      else
      {
    
      // determine icon to be used for new row
      switch (itemType)
      {
      case "Document":
      case "CAD":
      case "Part":
        rowIcon = fn_GetSmallIconFormatOfItemType(itemType);
        break;
      default:
        rowIcon = fn_GetSmallIconFormatOfItemType("Folder Controlled Item");
      }
      // use resolved rowIcon
      
      if (parent_row_id && parent_row_id !== undefined && parent_row_id !== "" && !treeGrid1_Control.isItemExists(row_id)) {
        // add new child row to grid
        fn_MultiLevelItems_AddRowWithIconToGrid (treeGrid1_Control, parent_row_id ,row_id,
			   top.treeGrid1.columnPropertiesControlledItem, top.treeGrid1.columnDisplayTypesControlledItem,
               rowIcon, rowIcon, rowItem, isRelship);
      }
      else {
        // update the existing row
        fn_MultiLevelItems_UpdateRowWithIconOnGrid (treeGrid1_Control, row_id,
			   top.treeGrid1.columnPropertiesControlledItem, top.treeGrid1.columnDisplayTypesControlledItem,
               rowIcon, rowIcon, rowItem, isRelship);

      }      
    }
  }

  var itemId = "";
  if (isRelship) {itemId=rowItem.getProperty("related_id");}
  else  {itemId=rowItem.getID();}
  treeGrid1_Control.setUserData(row_id,"gridData_rowItemID",itemId );
  treeGrid1_Control.setUserData(row_id,"gridData_rowItemType",itemType );

  return;
};

//--------------
getFileIcon = function(fileType)  {
	//var fileIcon = fn_GetSmallIconFormatOfItemType("File");
	var fileIcon = folderGroupFiles_closedIcon;
	if (fileType.indexOf("acrobat") !== -1) {
	  fileIcon = "icons/16x16_icon_PDF.gif";
	}
	if (fileType.indexOf("word") !== -1) {
	  fileIcon = "icons/16x16_icon_msWord.gif";
	}
	if (fileType.indexOf("excel") !== -1) {
	  fileIcon = "icons/16x16_icon_msExcel.gif.gif";
	}
	if (fileType.indexOf("powerpoint") !== -1) {
	  fileIcon = "icons/16x16_icon_msPPT.gif";
	}
    return fileIcon;
};

//-------------
fn_AddNewSubFolderToFolder = function (folderRowId, folderItemId, orgNumber, subFolderName, subFolderDescr) {
  // Create new SubFolder Rel and new Folder Item
  folderItemRel = top.aras.newIOMItem("Item Sub Folder","add");
  if (orgNumber && orgNumber !== "") {folderItemRel.setProperty("org_number", orgNumber);}
  folderItemRel.setProperty("source_id", folderItemId);
  var subFolderItem = top.aras.newIOMItem("Item Folder","add");
  subFolderItem.setProperty("name",subFolderName);
  if (subFolderDescr && subFolderDescr !== "") {subFolderItem.setProperty("description",subFolderDescr);}
  folderItemRel.setRelatedItem(subFolderItem);
 
  folderItemRel = folderItemRel.apply(); //add new relationship on server
  if (folderItemRel.isError()) {return folderItemRel;}

  newNodeId = folderItemId + "-" + subFolderItem.getID();

  fn_AddOrUpdateRowItemDataOnThisRow(folderRowId, newNodeId, subFolderItem.getType(), folderItemRel, true);

  treeGrid1_Control.openItem(folderRowId);  
  //treeGrid1_Control.showRow(newNodeId);
  
  return folderItemRel;
};

//-------------
fn_AddNewControlledItemToFolder = function (folderRowId, folderItem, newCtrldItem, isNew) {
var folderItemRel;
var itemsGroupRowId;
var newNodeId;

if (isNew)
{
  //do auto numbers (like on folder Template
  var ctrldItemType = newCtrldItem.getAttribute("type");
  var methodName = "";
  switch (ctrldItemType)
  {
  case "Document":
    methodName = "Folder Template Default DocNum";
    break;
  case "CAD":
    methodName = "Folder Template Default CADNum";
    break;
  case "Part":
    methodName = "Folder Template Default PartNum";
    break;
  }
  if (methodName === "") {return innovator.newError("Auto number logic for new items not defined for type '"+ctrldItemType+"' !");}
  
  var runMethod = top.aras.newIOMItem(ctrldItemType,methodName);
  runMethod = runMethod.apply();
  if (runMethod.isError()) {return innovator.newError("Cannot create auto number for type '"+ctrldItemType+"' !");}

  top.aras.setItemProperty(newCtrldItem,"item_number",runMethod.getResult());
  //top.aras.uiShowItemEx(newCtrldItem);
  //top.aras.itemsCache.addItem(newCtrldItem);

//## TODO - add new item and relationship in cache instead of server - like standard "create related" on relationships ???

/*
debugger;
  var relTypeId = top.aras.getItemFromServerByName("RelationshipType","Item Folder Controlled Item","id").node.getAttribute("id");
  
  folderItemRel = top.aras.newRelationship(relTypeId, newCtrldItem);
  top.aras.setItemProperty(folderItemRel, "related_id", newCtrldItem);

  // add phantom grid row to group controlled items
  itemsGroupRowId = fn_InsertControlledItemsGroupRowToTreeGrid (folderRowId, folderItem.getID());  
  newNodeId = folderItem.getID() + "-" + top.aras.getItemProperty(newCtrldItem, "id");

  fn_AddOrUpdateRowItemDataOnThisRow(itemsGroupRowId, newNodeId, newCtrldItem.getAttribute("type"), folderItemRel, true);

  treeGrid1_Control.openItem(folderRowId);  
  treeGrid1_Control.openItem(itemsGroupRowId);  
  //treeGrid1_Control.showRow(newNodeId);
  return folderItemRel;  
  
*/  
}

  folderItemRel = top.aras.newIOMItem("Item Folder Controlled Item","add");
  folderItemRel.setProperty("source_id", folderItem.getID());
  var ctrldItem = top.aras.newIOMItem("Folder Controlled Item");
  ctrldItem.loadAML(newCtrldItem.xml);
  folderItemRel.setRelatedItem(ctrldItem);
 
  folderItemRel = folderItemRel.apply(); //add new relationship on server
  if (folderItemRel.isError()) {return folderItemRel;}

  // retrieve new relationship with details from server
  folderItemRel = fn_getFolderControlledItemRel(folderItem.getID(),ctrldItem.getID());

  // add phantom grid row to group controlled items
  itemsGroupRowId = fn_InsertControlledItemsGroupRowToTreeGrid (folderRowId, folderItem.getID());  
  newNodeId = folderItem.getID() + "-" + ctrldItem.getID();

  fn_AddOrUpdateRowItemDataOnThisRow(itemsGroupRowId, newNodeId, ctrldItem.getType(), folderItemRel, true);

  treeGrid1_Control.openItem(folderRowId);  
  treeGrid1_Control.openItem(itemsGroupRowId);  
  //treeGrid1_Control.showRow(newNodeId);
  
  return folderItemRel;
};

//-------------
fn_AddNewFileToFolder = function (folderRowId, folderItem, newFileItem) {
  fn_enableToolbarControls(false);
  
  var folderFileRel = top.aras.newIOMItem("Item Folder File","add");
  
  folderFileRel.setProperty("source_id", folderItem.getID());
  var fileItem = top.aras.newIOMItem("File");
  fileItem.loadAML(newFileItem.xml);
  folderFileRel.setRelatedItem(fileItem);
 
  folderFileRel = folderFileRel.apply(); //triggers upload to vault.
  if (folderFileRel.isError()) {fn_enableToolbarControls(true);return folderFileRel;}

  // retrieve new relationship with file details details from server
  folderFileRel = fn_getFolderAttachedFileRel("Item Folder File", folderItem, fileItem.getID());
  if (folderFileRel.isError()) {
    fn_enableToolbarControls(true);
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.attached_files_not_retrieved"));
    return folderFileRel;
  }
  
  // add phantom grid row to group files
  fileGroupRowId = fn_InsertFilesGroupRowToTreeGrid (folderRowId, folderItem.getID());  
  var newNodeId = folderItem.getID() + "-" + fileItem.getID();

  fn_AddOrUpdateRowItemDataOnThisRow(fileGroupRowId, newNodeId, "File", folderFileRel, true);

  treeGrid1_Control.openItem(folderRowId);  
  treeGrid1_Control.openItem(fileGroupRowId);  
  //treeGrid1_Control.showRow(newNodeId);
  
  fn_enableToolbarControls(true);  
  return folderFileRel;
};

//-------------
fn_reloadNextLevelOfThisRow = function (rowId, nextLevels) {
  if (!rowId) {return;}
  var rowType = treeGrid1_Control.getUserData(rowId,"gridData_rowItemType");
  if (!rowType || rowType === undefined){ rowType="";}
  
  // reload the next 2 levels of this Item Foler  
  if (rowType === "Item Folder")
  {
    //treeGrid1_MsgsId = fn_showStatusMessage(0, "Loading Next Levels...");
    var rowItemId = treeGrid1_Control.getUserData(rowId,"gridData_rowItemID");

	fn_AddSubFoldersToThisFolder(rowItemId, rowId, folderIconClosed, folderIconOpened, false, (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode") === "latest_released"));

	/*
	
    fn_MultiLevelItems_LoadNextLevelsForThisNodeToTreeGrid ( treeGrid1_Control,rowId,
      "Item Folder",top.treeGrid1.folderItemSelectProperties,
      thisStructRelType,top.treeGrid1.folderRelItemSelectProperties,
      top.treeGrid1.columnProperties,top.treeGrid1.columnDisplayTypes,nextLevels,"org_number,sort_order");
  */
    //fn_clearStatusMessage(treeGrid1_MsgsId);
  }
};

// ============================= Toolbar and Menu  Handlers ===============================
//-------------
fn_enableToolbarControls = function (isOn, msg) {
  if (!msg && msg === undefined) {msg = top.aras.getResource("ItemFolders","itemfoldertreegrid.message.loading_please_wait");}
  if (isOn) {
//      statusMsgId = fn_showStatusMessage(0, "");
      if (statusMsgId !== ""){
        if (fn_clearStatusMessage(statusMsgId)){statusMsgId="";} //reset
      }
  }
  else  {
  //debugger;
     if (statusMsgId === ""){statusMsgId = fn_showStatusMessage(0, msg, true);}
  } 
  fn_enableToolbarElement(toolbar1_Control, "expandall", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "collapseall", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "refresh", isOn, false);
  fn_enableToolbarElement(toolbar1_Control, "open_row_item", isOn, false);

  // ensures that at least permission for top folder is granted to switch view to "current" effectivity.
  //debugger;
  if (fixEffectivityToReleased && isOn){fn_enableToolbarElement(toolbar1_Control, "effectivity_mode", false, false);}
  else {fn_enableToolbarElement(toolbar1_Control, "effectivity_mode", isOn, false);}
  
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbar1_Control.showLabels(val);
};

toolbar1_onToolbarClick = function (item) {
	treeGrid1_Control.turnEditOff();
	if (item.getId() == "expandall") {treeGrid1_onExpandAll();}
	if (item.getId() == "collapseall") {treeGrid1_onCollapseAll();}
	if (item.getId() == "refresh") {treeGrid1_onRefresh();}
    if (item.getId() == "open_row_item") {treeGrid1_onOpenRowItem();}
//	if (item.getId() == "insert_new_row") {treeGrid1_onInsertNewRow();}
};


treeGrid1_onRefresh = function () {
 // fn_enableToolbarControls (false,top.aras.getResource("ItemFolders","itemfoldertreegrid.message.re_loading_please_wait"));
  fn_RefreshGrid(true);
 // fn_enableToolbarControls (true);
  return;
};

toolbar1_onToolbarOnChange = function (item) {
  if (item.getId() == "effectivity_mode") 
  {
    fn_RefreshGrid(true);
  }
  return;
};

treeGrid1_onGridMenuInit = function (row,col,p) {
	var mnu = treeGrid1_Control.getMenu();
	mnu.removeAll();
	
	mnu.add("view_folder",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.view_folder"));
	mnu.add("refresh_this_row",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.refresh_this_row"));

   //ensures that for these actions at least edit permissions for top folder is granted
   if (isTopFolderParentItemLocked) {
	 mnu.addSeparator(); 
	 mnu.add("lock_row_item",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.lock_row_item"));
	 mnu.add("unlock_row_item",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.unlock_row_item"));
	 mnu.addSeparator();
	 mnu.add("add_new_controlled_item",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.add_new_controlled_item"));
	 mnu.add("add_existing_controlled_item",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.add_existing_controlled_item"));
	 mnu.add("add_new_file_to_folder",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.add_new_file_to_folder"));
	 mnu.add("add_sub_folder",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.add_sub_folder"));
  }

  if (top.treeGrid1.currentUserIsOwner) {
      mnu.addSeparator();
	  mnu.add("promote_folders_to_active_down",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.promote_folders_to_active_down"));
	  mnu.add("promote_folders_to_archived_down",top.aras.getResource("ItemFolders", "itemfoldertreegrid.contextmenu.promote_folders_to_archived_down"));
  }

  mnu.show();
};

treeGrid1_onGridMenuClick = function (menuChoice) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  
  if (menuChoice == "view_folder") {treeGrid1_onOpenRowItem("Item Folder");}
  if (menuChoice == "view_realted_files") {treeGrid1_onViewRelatedFiles();}
  if (menuChoice == "refresh_this_row") {treeGrid1_onRefreshThisFolder();}
  if (menuChoice == "promote_folders_to_active_down") {treeGrid1_onPromoteFoldersDown("Active");}
  if (menuChoice == "promote_folders_to_archived_down") {treeGrid1_onPromoteFoldersDown("Archived");}
  
  if (menuChoice == "lock_row_item") {treeGrid1_onLockRowItem();}
  if (menuChoice == "unlock_row_item") {treeGrid1_onUnLockRowItem();}
  if (menuChoice == "add_new_controlled_item") {treeGrid1_onAddControlledItem(true);}
  if (menuChoice == "add_existing_controlled_item") {treeGrid1_onAddControlledItem(false);}
  if (menuChoice == "add_new_file_to_folder") {treeGrid1_onAddFileToFolder();}
  if (menuChoice == "add_sub_folder") {treeGrid1_onAddSubFolder(true);}
};

//---------------
fn_checkRowItemIsLocked = function (selectedId, itemType, itemId) {
  // return error msg or "" if lockStatus OK.
  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);
  // update grid in case lock status got change by someone else
  treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,fn_GetLockedCellFormatByStatusCode(lockStatus));

  if (lockStatus === 1) {return "";}  
  if (lockStatus === 0) {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_row_must_be_locked_for_action");}
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_row_locked_by_other_no_permission_action");
};

//---------------
fn_checkIfAttachmentsOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folder,allowed_relationships' />");
  itm = itm.apply();
  
  var allowedRelsMode = itm.getProperty("allowed_relationships","attachments_and_controlled_items");  //if prop not set use this default
  
  if (allowedRelsMode !== "" && allowedRelsMode.indexOf("attachments") >= 0) {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_files_to_folder_not_allowed");
};

//---------------
fn_checkIfControlledItemsOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folders,allowed_relationships' />");
  itm = itm.apply();
  
  var allowedRelsMode = itm.getProperty("allowed_relationships","attachments_and_controlled_items");  //if prop not set use this default
  
  if (allowedRelsMode !== "" && allowedRelsMode.indexOf("controlled_items") >= 0) {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_ctrld_items_to_folder_not_allowed");
};

//---------------
fn_checkIfSubFoldersOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folders,allowed_relationships' />");
  itm = itm.apply();

  var allowSubFolders = itm.getProperty("allow_sub_folders","");
  if (allowSubFolders === "") {allowSubFolders = "1";}  // if prop not set, then allow subfolders
  
  if (allowSubFolders === "1") {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_sub_folder_not_allowed");
};

//--------------
fn_ValidateActionRequest = function (actionId, itemType, rowId) {
  // run various checks specific to action
  //debugger;

  //if (!isTopFolderParentItemLocked)
  // {return "Folder structure's parent item must be locked to do this action !";}

  var effectivityMustBeCurrent = false;
  var disallowForRootItems = false;  
  
  switch (actionId)
  {
    case "lock":
    case "unlock":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType === "CTRLD_ITEMS_GROUP" || itemType === "FILES_GROUP" || itemType === "File")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}

      break;
    case "addItem":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType !== "CTRLD_ITEMS_GROUP" && itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}

      break;
    case "dropFile":
    case "addFile":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType !== "FILES_GROUP" && itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}
      break;

    case "addSubFolder":
      effectivityMustBeCurrent = true;
      disallowForRootItems = false;
      if (itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_onrows_of_type_x") + itemType + " !";}
      break;
  }

  if (disallowForRootItems) {
    // check rowId
    if (!treeGrid1_Control.getParentId(rowId))
      {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_root_rows");}
  }

  if (effectivityMustBeCurrent) {
    if (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode") !== "current_config")
      {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.effectivity_must_be_current_for_action");}
  }
  
  // success
  return "";
};

treeGrid1_onLockRowItem = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("lock", itemType, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);
  
  if (lockStatus > 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.already_locked"));
  }
  else {
    // lock the item an report error, if failed
    var res = fn_LockThisItem(itemType, itemId);
    if (res.isError()) {top.aras.AlertError(res.getErrorString());return;}

    // update lock cell of row 
    var col = top.treeGrid1.lockIconColumnNo;
    treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,fn_GetLockedCellFormatByStatusCode(1));
  }
  return;
};

treeGrid1_onUnLockRowItem = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}

  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("unlock", itemType, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);

  if (lockStatus === 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.item_not_locked"));
  }
  else {
    if (lockStatus > 1) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.cannot_unlock_locked_by_other"));return;}
    // unlock the rowItem
    var res = fn_UnLockThisItem(itemType, itemId);
    if (res.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.unlock_error") + res.getErrorString());return;}
  
    // update lock cell of row 
    treeGrid1_Control.setCellValue(selectedId,top.treeGrid1.lockIconColumnNo,"");
  }
  return;
};

treeGrid1_onAddSubFolder = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("addSubFolder", itemType, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");

  checkMsg = fn_checkRowItemIsLocked(selectedId,itemType,itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfSubFoldersOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}
 
  // dialog with sub folder form
  var formNd = top.aras.getItemByName("Form", "Item Folder Add SubFolder", 0);
  var res;
  if (formNd)
  {
    var param = new Object();
    param.title = "Add New Sub Folder";
    param.formId = formNd.getAttribute("id");
    param.aras = top.aras;
    param.itemTypeName = itemType;

    var width = top.aras.getItemProperty(formNd, "width");
    var height = top.aras.getItemProperty(formNd, "height");

    res = showModalDialog("ShowFormAsADialog.html", param,"dialogHeight:"+height+"px; dialogWidth:"+width+"px; " +  "status:0; help:0; resizable:1; scroll:0;");

  if (res) {
    subFolderItem = fn_AddNewSubFolderToFolder(selectedId,itemId,res.org_number,res.name,res.description);
    if (subFolderItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_sub_folder_error") + subFolderItem.getErrorString()); return;} 
  } 
  }
  return;

};

treeGrid1_onAddControlledItem = function (isNew) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("addItem", itemType, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  if (itemType === "CTRLD_ITEMS_GROUP") {selectedId = treeGrid1_Control.getParentId(selectedId);}
  if (!selectedId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_grid_row")); return;}
  itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");

  checkMsg = fn_checkRowItemIsLocked(selectedId,itemType,itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfControlledItemsOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var ctrldItem;
  if (isNew) {
    // Create temporary Item
    ctrldItem = top.aras.newItem("Folder Controlled Item", "add");
    if(!ctrldItem)	{return;} // canceled
  }
  else {
    var searchItemTypeName = "Folder Controlled Item";
    var param = { aras: top.aras, itemtypeName: searchItemTypeName, multiselect: false };

    var dlgRes = showModalDialog('searchDialog.html', param, 'dialogHeight:450px; dialogWidth:700px; status:0; help:0; resizable:1');
	
    if(!dlgRes) {return;}

    ctrldItem = dlgRes.item; 
    if(!ctrldItem)	{return;} // no item selected
  }
  var folderItem = top.aras.newIOMItem(itemType,"get");
  folderItem.setID(itemId);
  folderItem.setAttribute("select",top.treeGrid1.folderItemSelectProperties);
  folderItem = folderItem.apply();
  
  ctrldItem = fn_AddNewControlledItemToFolder(selectedId,folderItem,ctrldItem,isNew);
  if (ctrldItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_ctrld_item_error") + ctrldItem.getErrorString()); return;} 
   
  return;
};

treeGrid1_onAddFileToFolder = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var checkMsg = fn_ValidateActionRequest("addFile", itemType, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  if (itemType === "FILES_GROUP") {selectedId = treeGrid1_Control.getParentId(selectedId);}
  if (!selectedId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_grid_row")); return;}
  itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");

  checkMsg = fn_checkRowItemIsLocked(selectedId,itemType,itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfAttachmentsOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}
  
  var newItem = fn_showFileDialog();
  if (!newItem) {return;} //no file selected

  //debugger;
  var folderItem = top.aras.newIOMItem(itemType,"get");
  folderItem.setID(itemId);
  folderItem.setAttribute("select",top.treeGrid1.folderItemSelectProperties);
  folderItem = folderItem.apply();
 
  newItem = fn_AddNewFileToFolder(selectedId,folderItem,newItem);
  if (newItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_file_error") + newItem.getErrorString()); return;}

  return;
};

fn_showFileDialog = function () {
  var fileItem = top.aras.newItem('File');
  //top.aras.itemsCache.addItem(fileItem);
      
  treeGrid1_Control.requestFocus();
  if (!fileItem) {return null;}

  return fileItem;
};

treeGrid1_onExpandAll = function () {
//debugger;
  // get confirmation to load from sercver
  // else current structure already loaded will be expanded
  if(!isAllLoaded)
  {
   fn_enableToolbarControls(false,top.aras.getResource("ItemFolders","itemfoldertreegrid.message.expanding_all_please_wait"));
   
   if (confirm(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.confirm_expanding_all_large_struture")))
   {
    fn_RefreshGrid(false,true); //load all option = on
    
    isAllLoaded = true;
   }
   fn_enableToolbarControls(true);
  }
  treeGrid1_Control.ExpandAll();
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

treeGrid1_onCollapseAll = function () {
  treeGrid1_Control.CollapseAll();
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

// ============================= registered Grid Callbacks ===============================

treeGrid1_onTreeGridOpenNode = function (rowId) {
  //debugger;
  var hasSubLevelsLoaded = treeGrid1_Control.getUserData(rowId,"gridData_hasSubLevelsLoaded");
  if (hasSubLevelsLoaded !== "1") {
    fn_enableToolbarControls(false,top.aras.getResource("ItemFolders","itemfoldertreegrid.message.loading_next_level_please_wait"));

    fn_reloadNextLevelOfThisRow (rowId,1);
    treeGrid1_Control.setUserData(rowId,"gridData_hasSubLevelsLoaded","1");
    fn_enableToolbarControls(true);
  }
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");

};

treeGrid1_onTreeGridCloseNode = function (rowId) {
//debugger;
  fn_setResultsCountOnStatusBar(treeGrid1_Control.GetRowCount(),"Rows in view:");
};

treeGrid1_onGridDoubleClick = function (r) {
  treeGrid1_onOpenRowItem();
};

treeGrid1_onGridClick = function (row,c) {
  // if clicked on a link ?
  //evaluate link string to define action
  if (top.treeGrid1.clickedGridLinkValue && top.treeGrid1.clickedGridLinkValue !== "")
  {
      // is clicked on files icon image
      if (top.treeGrid1.clickedGridLinkValue.indexOf("has_files.gif") >=0)
      {
        treeGrid1_onViewRelatedFiles();
        top.treeGrid1.clickedGridLinkValue = "";
        return;
      }
      // other images - not supported
      if (top.treeGrid1.clickedGridLinkValue.indexOf("<img") >=0)
      {
        top.treeGrid1.clickedGridLinkValue = "";
        return;
      }

    var selectedId = treeGrid1_Control.getSelectedId();
    var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
    if (itemType !== "Item Folder")
    {    
      switch (top.treeGrid1.clickedGridLinkValue)
      {
      case "latest_released_item":
       treeGrid1_onOpenRowItem();
       break;
       
      default:
       treeGrid1_onOpenRowItem();
       break;
      }   
    }
    //reset global variable
    top.treeGrid1.clickedGridLinkValue = "";
  }
};

treeGrid1_onGridLinkClick = function (strLink) {
  //assumes only 1 link per row that links to the row's data item
  top.treeGrid1.clickedGridLinkValue = strLink; 
};

treeGrid1_onPromoteFoldersDown = function (targetState) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  if (itemType !== "Item Folder"){top.aras.AlertError(top.aras.getResource("ItemFolders","itemfoldertreegrid.message.action_not_valid_on_folder_rows"));return;}

  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId); 
  if (lockStatus > 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_locked_by_you_or_other_please_unlock"));
    return;
  }

  if (targetState === "Archived"){if(!confirm(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.confirm_promote_to_archived"))){return;}}
  if (targetState === "Active")  {if(!confirm(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.confirm_promote_to_active"))){return;}}

  var argsItem = innovator.newItem(itemType,"get");
  argsItem.setAttribute("select","id,name,state,owned_by_id,managed_by_id,team_id");
  argsItem.setID(itemId);
  argsItem = argsItem.apply();

  var folderCurState = argsItem.getProperty("state","");
  if (folderCurState === targetState) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_already_in_status_x")+targetState+" !");
    return;
  }
  if (targetState === "Active" && folderCurState !== "Planning") {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_must_be_in_status_planning"));
    return;
  }
  if (targetState === "Archived" && folderCurState !== "Active") {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_must_be_in_status_active"));
    return;
  }

  argsItem.setProperty("state",targetState); // state to promote to
  top.aras.evalMethod ("Item Folders Promote DownA",argsItem.dom.xml);
  
  return;
};

treeGrid1_onRefreshThisFolder = function () {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  if (itemType !== "Item Folder"){top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_valid_on_folder_rows"));return;}

  // delete all Children down from this node (selectedId)
  var allChildIds = treeGrid1_Control.getChildItemsId(selectedId,true,"|").split("|");
  for (var i=0;i<allChildIds.length;i++)
  {
    treeGrid1_Control.deleteRow(allChildIds[i]);
  }

  var isReleased = (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode") === "latest_released");

  //reload this folder item and update grid row
  var aml =
  '<Item type="Item Sub Folder" action="get" ' +
  ' select="id,source_id(owned_by_id,managed_by_id,team_id,locked_by_id,has_files,has_controlled_items,has_sub_folders),related_id,'+top.treeGrid1.folderRelItemSelectProperties+'" ' +
  ' orderBy="org_number,sort_order" >' +
  '  <related_id>' +
  '    <Item type="Item Folder" action="get" select="id,config_id,'+top.treeGrid1.folderItemSelectProperties+'" id="'+itemId+'">';
       if (isReleased) {aml += "<state>Active</state>";} aml += 
  '    </Item>' +
  '  </related_id>' +
  '</Item>';
  var folderItem = top.aras.newIOMItem("","");
  folderItem.loadAML(aml);
  folderItem = folderItem.apply();

  fn_AddOrUpdateRowItemDataOnThisRow ("", selectedId, itemType, folderItem, true);

  // reload folder Item with related items relationships and update children rows
  folderItem = fn_GetFolderItemWithRelatedItems(itemId,isReleased);
  fn_addFolderGroupsAndRelatedItemsToRow(selectedId, folderItem);
  
  //relaod next levels of this row into grid
  fn_reloadNextLevelOfThisRow(selectedId,1);
  treeGrid1_Control.setUserData(selectedId,"gridData_hasSubLevelsLoaded","1");
  
  treeGrid1_Control.openItem(selectedId);
  //treeGrid1_Control.closeItem(selectedId);
};

treeGrid1_onOpenRowItem = function (checkForItemType) {
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId) {return;}
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  // phantom rows cannot be opened - open parent folder instead
  if (itemType === "CTRLD_ITEMS_GROUP" || itemType === "FILES_GROUP"){
    selectedId = treeGrid1_Control.getParentId(selectedId);
    itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
    itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");
    top.aras.uiShowItem(itemType, itemId);
    return;
  }
  // if check option set, check if row is of correct type
  if (checkForItemType && checkForItemType !== "")
  {
    if (checkForItemType.indexOf(itemType) < 0)
    {
      top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_this_type"));
      return;
    }
  }

  // if Folder row, just open the row item
  if (itemType === "Item Folder"){top.aras.uiShowItem(itemType, itemId);return;}

  // files and controlled items are versionable
  //item version might have changed since grid was loaded, get right version of item based on effectivity mode
  var itm = null;
  var selectProps = "";
  if (itemType === "File") {selectProps = "filename,generation,modified_on,comments";}
  else {selectProps = "item_number,major_rev,state,locked_by_id,generation,name,released_date";}

  switch (fn_getChoiceSelectionOnToolbar(toolbar1_Control,"effectivity_mode"))
  {
    case "current_config":   
//      itm = fn_GetItemsOfReleasedGeneration(itemType,"'0680E81AEFCB46ACA36D90A673C6ACBB','D45072B9014740F1A797D0597C3EA112','237546E10EF745C8B9499C248ADBC188'",selectProps);
//      debugger;
      itm = fn_GetItemsOfCurrentGeneration(itemType,itemId,selectProps);
      if (itm.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.get_item_current_generation_error") + itm.getErrorString());return;}
      break;
    case "latest_released":
      itm = fn_GetItemsOfReleasedGeneration(itemType,itemId,selectProps);
      if (itm.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.get_item_released_generation_error") + itm.getErrorString());return;}
      break;
  }
  
  //update grid data, if id had changed
  var newId = itm.getID();
  if (itm && itemId !== newId ) {
    fn_AddOrUpdateRowItemDataOnThisRow ("", selectedId, itemType, itm, false);
    itemId=newId;
  }
  top.aras.uiShowItem(itemType, itemId);
};

treeGrid1_onViewRelatedFiles = function () {
  //debugger;
  var selectedId = treeGrid1_Control.getSelectedId();
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
   return;
  }
  var itemId = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemID");
  var itemType = treeGrid1_Control.getUserData(selectedId,"gridData_rowItemType");

  var argsItem = innovator.newItem(itemType,"get");
  argsItem.setID(itemId);

  var result = top.aras.evalMethod ("Item Folder ViewItemFiles Action",argsItem.dom.xml);
  if (result.isError ()) {top.aras.AlertError (top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.view_item_files_error") + result);} 
  return;
};

treeGrid1_onTreeGridDragStart = function (a,b) {
  return;
};
treeGrid1_onTreeGridDragEnter = function (a,b) {
  //TODO  check if rowType is "Item Folder"
  if (isTopFolderParentItemLocked && b.Data.GetDataPresent("FileDrop"))  // allow drop for files only
  {
	b.Effect = -2147483645;
  }
  return;
};

treeGrid1_onTreeGridDragDrop = function (a,b) {
    
  if (b.Data.GetDataPresent("FileDrop")) // allow drop for files only
  {
    //debugger;
    //var dropCol = b.Data.Column;
    var dropRowId = b.Data.RowId;
    if (!dropRowId) {return;}
    var itemType = treeGrid1_Control.getUserData(dropRowId,"gridData_rowItemType");

    var checkMsg = fn_ValidateActionRequest("dropFile", itemType, dropRowId);
    if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

    if (itemType === "FILES_GROUP") {dropRowId = treeGrid1_Control.getParentId(dropRowId);}
    if (!dropRowId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_group_row")); return;}
    itemType = treeGrid1_Control.getUserData(dropRowId,"gridData_rowItemType");
    var itemId = treeGrid1_Control.getUserData(dropRowId,"gridData_rowItemID");

    var errMsg = fn_checkRowItemIsLocked(dropRowId,itemType,itemId);
    if (errMsg !== "") {top.aras.AlertError(errMsg); return;}

	errMsg = fn_checkIfAttachmentsOnThisFolderAllowed(itemId);
    if (errMsg !== "") {top.aras.AlertError(errMsg); return;}

	var fileNames = b.Data.GetData("FileDrop");
	var arrayListOfFiles = top.aras.utils.GetArrayListForStringArray(fileNames);

	for (var i = 0; i < arrayListOfFiles.count; i++)
	{
	  var fileName = arrayListOfFiles(i);
	  if (top.aras.vault.FileExists(fileName))
	  {
		doRowUpdateAfterDrag = true;
		var fileNd = top.aras.newFileItem(fileName);
		if (!fileNd)
		{
		  alert('Error on Drag-n-Drop file handling');
		  return;
		}
		var folderItem = top.aras.newIOMItem(itemType,"get");
        folderItem.setID(itemId);
        folderItem.setAttribute("select",top.treeGrid1.folderItemSelectProperties);
        folderItem = folderItem.apply();

        fileNd = fn_AddNewFileToFolder(dropRowId,folderItem,fileNd);
        if (fileNd.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_file_error") + fileNd.getErrorString()); return;}
	  }
	}
  }
  return;
};

]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Item Folder Struct Grid Handler</name>
 </Item>
</AML>