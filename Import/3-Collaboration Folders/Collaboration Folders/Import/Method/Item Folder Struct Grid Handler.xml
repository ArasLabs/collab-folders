<AML>
 <Item type="Method" id="226369A462964B6ABC146012FEDE614D" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//*/ Client side Method: treeGrid1 misc. function
// 
// load with --> onLoad Event on Form:
// works together with 'Base TreeGrid' - must be loaded first

// top variable "top.folderGrid1"  holds the grid class
// global variable "innovator"  must be declared in grid's html field on the form !!!
// global variable "I18Ncntx"   must be declared in grid's html field on the form !!!
var arasRelease;
var	folderGroupCtrldItemsRowType = 	"CTRLD_ITEMS_GROUP";
var	folderGroupFilesRowType =	"FILES_GROUP";

// callback from html field on form
window.initTreeGrid = function() {
    // assumes html field on form with id="arasRelease" is defined
    var el = document.getElementById("arasRelease"); 
    arasRelease = "";
    if (el) {arasRelease = el.innerHTML;}

	top.folderGrid1 = new FolderStructGrid();
	if (arasRelease === "Aras9") {
	  top.folderGrid1.loadGridDefinitionHTML("treeGrid1","toolbar1","folderTreeGrid");  //3rd arg must be name of global variable !!!
	}
	else {
	  top.folderGrid1.loadDojoGridDefinitionHTML();
	}
};

// callback from method "ForceGridRefreshOnRelTabs"
window.forceGridRefreshOnRelationship = function(relshipTypeName) {
 if(relshipTypeName.indexOf("Folder") > 0 && relshipTypeName.indexOf("Structure")) {
  if (arasRelease === "Aras9") {
	top.folderGrid1.gridRefresh(true);
  } else {
	top.folderGrid1.refreshGridWithTimout(true);
  }
 }
};

FolderStructGrid = function FolderStructGridFunc() {
    this.arasRelease = arasRelease;
    this.initialized = false;
    this.topFolderItemId = "undefined";
    this.topFolderItem = null;
	this.inputRowTdVals = null;
	this.fullTopFolderStructConfigXML=null;

    this.hasInputRow = false;
    this.IsExpandOnStart = false;
	this.numberOfGridColumns=-1; //init

	this.constants = {
		subFolderRelationshipName: 		"Item Sub Folder",
		folderGroupCtrldItems_label: 	"Controlled Items",
		folderGroupFiles_label:			"Attachments"
	};

	this.icons = {};
	this.iconsOpen = {};
	
	this.icons[folderGroupCtrldItemsRowType] = 		"../images/icons/GridIcons/folder_items_group.gif";
	this.iconsOpen[folderGroupCtrldItemsRowType] = 	"../images/icons/GridIcons/folder_items_group.gif";
	this.icons[folderGroupFilesRowType] = 			"../images/icons/GridIcons/folder_files_group.gif";
	this.iconsOpen[folderGroupFilesRowType] = 		"../images/icons/GridIcons/folder_files_group.gif";

	this.icons["Item Folder"] = 			"../images/Icons/GridIcons/folder_closed.gif";
	this.iconsOpen["Item Folder"] = 		"../images/Icons/GridIcons/folder_open.gif";

  if (arasRelease == "Aras9")
  {
	this.icons["Document"] = 				fn_GetSmallIconFormatOfItemType("Document");
	this.icons["CAD"] = 					fn_GetSmallIconFormatOfItemType("CAD");
	this.icons["Part"] = 					fn_GetSmallIconFormatOfItemType("Part");
  }
  else
  {
	this.icons["Document"] = 				"../images/Icons/GridIcons/document.gif";
	this.icons["CAD"] = 					"../images/Icons/GridIcons/CAD.gif";
	this.icons["Part"] = 					"../images/Icons/GridIcons/part.gif";
  }

    this.icons["File"] = 					"../images/icons/GridIcons/has_files.gif";
	this.icons["has_details"] = 			"../images/Icons/GridIcons/has_details.gif";
	this.icons["is_shared"] = 				"../images/icons/GridIcons/is_shared.gif";
	this.icons["newerItemGen"] = 			"../images/Icons/GridIcons/newerItemGen.gif";

	this.use_svg_icons = true;  /*enables icons: "locked","locked_else","item_chk0","item_chk1" */
};

FolderStructGrid.prototype = new BaseTreeGrid();

FolderStructGrid.prototype.isEditable = function FolderStructGrid_isEditable() {
    //conditions when grid should be editable
	var node = document.thisItem.node;
	return top.aras.isLockedByUser(node);
//	return top.aras.isTempEx(node) || ((!state || state === "Preliminary" || state === "In Work") && top.aras.isLockedByUser(node));
};

FolderStructGrid.prototype.refreshTopItemContext = function FolderStructGrid_refreshTopItemContext() {
	this.rootItem = document.thisItem; //context if started from tab
	this.rootItemType = document.thisItem.GetType();

    var rootItemId = document.thisItem.getAttribute("id","");
    switch (this.rootItemType)
    {
    case "Item Folder Template":
    case "Program":
    case "Project":
       var rootItemTopFolderLinkId = this.rootItem.getProperty("top_item_folder_id","");
       if (rootItemTopFolderLinkId !== "") {
         this.topFolderItem = innovator.getItemById("Item Folder", rootItemTopFolderLinkId);
       }
       this.topFolderItemId = rootItemTopFolderLinkId;
	   break;
    case "Item Folder":
       this.topFolderItem = this.rootItem;
       this.topFolderItemId = rootItemId;
       break;
    }
	
    this.currentUserIsOwner = fn_IsCurrUserMemberOfIdentityId(this.rootItem.getProperty("owned_by_id",""));	
	this.currentUserIsTeamGuestOfRootItem = fn_isUserMemberOfThisItemTeamGuest(document.thisItem);
};

FolderStructGrid.prototype.onBeforeInitialize = function FolderStructGrid_onBeforeInitialize() {
};

FolderStructGrid.prototype.initialize = function FolderStructGrid_Initialize() {
	this.onBeforeInitialize();

  if (arasRelease == "Aras9") {
    this.toolbarXmlUrl = top.aras.getI18NXMLResource("ItemFolderNavigatorToolbar9.xml", "../Solutions/ItemFolders/"); }
  else {
    this.toolbarXmlUrl = top.aras.getI18NXMLResource("ItemFolderNavigatorToolbar.xml", "../Solutions/ItemFolders/"); }

	this.toolbar.loadXml(this.toolbarXmlUrl);
	this.toolbar.show();
	
	// register all possible menu actions - during event onGridMenuInit() apply rules to disable individual actions
	this.gridContextMenu = [
		{ name: "view_folder", 						label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.view_folder"), 				handler: new handleMenuActionByName(), menuindex:-1},
		{ name: "view_attached_files",				label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.view_attached_files"), 		handler: new handleMenuActionByName(), menuindex:-1 },
		{ separator: true },
		{ name: "refresh_this_row",					label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.refresh_this_row"), 			handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "action_revise_section", 			label: top.aras.getResource("DocumentHierarchies", "dochierarchygrid.contextmenu.revise_sections_up"), 	handler: new handleMenuActionByName(), menuindex:-1 },
		{ separator: true },
		{ name: "lock_row_item", 					label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.lock_row_item"), 				handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "unlock_row_item", 					label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.unlock_row_item"), 			handler: new handleMenuActionByName(), menuindex:-1 },
		{ separator: true },
		{ name: "add_new_controlled_item", 			label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.add_new_controlled_item"), 	handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "add_existing_controlled_item", 	label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.add_existing_controlled_item"),	handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "add_new_file_to_folder", 			label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.add_new_file_to_folder"), 	handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "add_sub_folder", 					label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.add_sub_folder"), 			handler: new handleMenuActionByName(), menuindex:-1 },
		{ separator: true },
		{ name: "promote_folders_to_active_down", 	label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.promote_folders_to_active_down"), handler: new handleMenuActionByName(), menuindex:-1 },
		{ name: "promote_folders_to_archived_down", label: top.aras.getResource("ItemFolders","itemfoldertreegrid.contextmenu.promote_folders_to_archived_down"), handler: new handleMenuActionByName(), menuindex:-1 }
	];
	
//debugger;
    //register column layouts of different row types
	this.columnHeadingsAndLayout = fn_getGridTableColumnHeadingsAndLayout(true);
	this.numberOfGridColumns = this.columnHeadingsAndLayout.length;
	this.lockIconColumnNo = fn_getGridTableColumnIndexByName(this.columnHeadingsAndLayout,"LOCK");
	this.itemFolderColumnList = fn_getGridTableColumnDefOfFolderRows();
	this.ctrldItemsColumnList = fn_getGridTableColumnDefOfCtrlItemsRows();
	this.filesColumnList = fn_getGridTableColumnDefOfFileRows();

	this.folderItemSelectProperties = "item_number,name,description,state,locked_by_id,classification,major_rev,generation,has_files,has_files_icon,has_sub_folders,has_controlled_items,is_released,team_id,owned_by_id,managed_by_id";
	this.folderRelItemSelectProperties = "sort_order,org_number";
	this.folderCtrlItemSelectProperties = "id,config_id,generation,is_released,is_current,item_number,name,major_rev,state,locked_by_id,owned_by_id,managed_by_id,team_id,modified_on,description,has_files,has_files_icon,itemtype";
	this.folderRelCtrlItemSelectProperties = "sort_order";
	
	//Build empty grid XML
	var xml = '' +
	'<table font="Microsoft Sans Serif-8" backgroundColor="white" sel_bgColor="steelbue" sel_TextColor="white" delim ="|" editable="true" ' +
	' draw_grid="true" multiselect="false" enableHtml="false" enterAsTab="false" bgInvert="true" expandroot="true" expandall="false" treelines="1" column_draggable="false" >' +
	' <thead>';
	for(var columnIndex = 0; columnIndex < this.columnHeadingsAndLayout.length; columnIndex++) {
	  var colTitle;
	  if (this.columnHeadingsAndLayout[columnIndex].Title) {
	    colTitle = this.columnHeadingsAndLayout[columnIndex].Title;
	  }
	  else {
	    colTitle = this.getColumnLabelByName(this.columnHeadingsAndLayout[columnIndex].PropItemType, this.columnHeadingsAndLayout[columnIndex].PropName);
	  }
	  xml += ' <th align="c">' + colTitle + '</th>';
	}
	xml += '' +
	' </thead>' +
	' <columns>';	
	for(columnIndex = 0; columnIndex < this.columnHeadingsAndLayout.length; columnIndex++) {
		xml += ' <column width="' + this.columnHeadingsAndLayout[columnIndex].Width + '" align="' + this.columnHeadingsAndLayout[columnIndex].Align + '" edit="' + 
				this.columnHeadingsAndLayout[columnIndex].EditType + '" order="' + columnIndex + '" colname="' + this.columnHeadingsAndLayout[columnIndex].Name + '" />';
	}	
	xml += '' +
	' </columns>' +
	'<menu><emptytag/></menu>';

	if (this.hasInputRow) {
      xml += '<inputrow>';
	  for(columnIndex = 0; columnIndex < this.columnHeadingsAndLayout.length; columnIndex++) {
		xml += '  <td edit="FIELD" bgColor="#BDDEF7"/>';
	  }
      xml += '</inputrow>';
	}

	xml += '</table>';
	this.gridEmptyTable_xml = xml;

	// initially set variables related to top/root item
	this.refreshTopItemContext();
	
	// define startup effectivity mode
    this.fixEffectivityToReleased = false;
	this.ignoreToolbarChangeEvent = true;
    fn_setChoiceSelectionOnToolbar(this.toolbar,"effectivity_mode", "current_config"); // triggeres a refresh
    	
	this.initialized = true;

	if (arasRelease === "Aras9") {
 	  this.grid.clear();
	  this.grid.InitXml(xml);
	}
	else {
	  this.grid.InitXml(xml);
	}

	// now load data into grid	
	if (!top.aras.Browser.isIe() && this.rootItemType === "Item Folder") {this.skipNextDraw = true;}
	this.gridRefresh(true);  //refresh with load=true will come later from "forceRefreh" method of form's onPopulate event
	
};

FolderStructGrid.prototype.SetIsDirtyAndUpdateAction = function FolderStructGrid_SetIsDirtyAndUpdateAction(item) {
	//+++ set action update if action is null
	var ancestorAndSelf = item.selectNodes("ancestor-or-self::Item");
	for (var i = 0; i < ancestorAndSelf.length; i++) {
		var itemNode = ancestorAndSelf[i];
		itemNode.setAttribute("isDirty", "1");
		if(!itemNode.getAttribute("action")) {
			itemNode.setAttribute("action", "update");
		}
	}
};

FolderStructGrid.prototype.onBeginEditCell = function FolderStructGrid_onBeginEditCell(eArg) {
	var rowID = eArg.rowId;
	var columnPosition = eArg.column;
	//debugger;

	if (rowID=="input_row") {
	  if (!this.columnHeadingsAndLayout[columnPosition].FilterEdit || this.columnHeadingsAndLayout[columnPosition].FilterEdit === "noedit")
        {return false;}
      else
        {return true;}
    }
	
	if(!this.isEditable()) {
		return false;
	}

	// add logic with condtions when a cell should be editable here ...
};

FolderStructGrid.prototype.onEndEditCell = function FolderStructGrid_onEndEditCell(eArg) {
	var rowID = eArg.rowId;
	var columnPosition = eArg.column;
    var affectedItem;
    // special handling for input row (execute filtering)
	if (rowID=="input_row") {
		var filters = fn_getInputRowVals(this);
    }

	// add logic to trigger actions after edit cell has finished here ...
	
	return;
};
//==== helper function to wrap missing old grid method
FolderStructGrid.prototype.gridRowExists = function FolderStructGrid_gridRowExists(rowId) {
  if (arasRelease === "Aras9") {
    return this.grid.isItemExists(rowId);
  }
  else {
    var idx = this.grid.getRowIndex(rowId);
	return (idx >= 0);
  }
};

FolderStructGrid.prototype.gridSetCellValue = function FolderStructGrid_gridSetCellValue(rowId,col,value) {
  if (arasRelease === "Aras9") {
	  this.grid.setCellValue(rowId,col,value);
  }
  else {
	  var cell = this.grid.cells(rowId, col);
	  this.grid.cells(rowId, col).setValue(value);
  }
};

FolderStructGrid.prototype.setGridRowUserData = function FolderStructGrid_setGridRowUserData(rowId, dataName, dataValue) {
  if (!rowId || rowId === "") {return;}
  switch(dataName)
  {
  case "gridData_rowItemType":
  	this.GridRowUserData[rowId] = {
	  itemType: dataValue
	};
    break;
  case "gridData_rowItemId":
  	this.GridRowUserData[rowId] = {
	  itemId: dataValue
	};
    break;
  }
};

FolderStructGrid.prototype.getGridRowUserData = function FolderStructGrid_getGridRowUserData(rowId, dataName) {
  if (!rowId || rowId === "") {return;}
  var retValue = "";
  switch(dataName)
  {
    case "gridData_rowItemType":
	  return this.GridRowUserData[rowId].itemType;
	  
    case "gridData_rowItemID":
    case "gridData_rowItemId":
	  return this.GridRowUserData[rowId].itemId;
  }
};

// ======= Custom functions to get and populate grid with data =======
FolderStructGrid.prototype.GetFullFolderStructConfig = function FolderStructGrid_GetDataSource(topFolderId, isReleased) {
var aml = '<Item type="Item Folder" action="GetItemRepeatConfig" select="id,config_id,generation,';
  aml += this.folderItemSelectProperties + '" id="'; aml+= topFolderId + '">' +
' <Relationships>' +
'  <Item type="Item Sub Folder" repeatProp="related_id" repeatTimes="0" select="';
       aml += this.folderRelItemSelectProperties + ',related_id" orderBy="org_number,sort_order" >' +
'   <related_id>' +
'    <Item type="Item Folder" action="get" select="id,config_id,generation,';
       aml += this.folderItemSelectProperties + '" >';
       if (isReleased) {
          aml+=' <is_released>1</is_released>';
       }
       else {
          aml+=' <is_current>1</is_current>';
       }
aml+='</Item>' +
'   </related_id>' +
'  </Item>' +
'  <Item type="Item Folder Controlled Item" action="get" select="sort_order,related_id,itemtype" >' +
'   <related_id>' +
'    <Item type="Folder Controlled Item" action="get" select="';
      aml += this.folderCtrlItemSelectProperties + '" >';
      if (isReleased) {
        aml+=' <is_released>1</is_released>';
      }
      else {
        aml+=' <is_current>1</is_current>';
      }
aml+='</Item>' +
'   </related_id>' +
'  </Item>' +
'  <Item type="Item Folder File" action="get" select="sort_order,related_id,is_shared" >' +
'   <related_id>' +
'    <Item type="File" action="get" select="id,config_id,generation,filename,filetype,locked_by_id,modified_on" >' +
'    </Item>' +
'   </related_id>' +
'  </Item>' +
'  </Relationships>' +
'</Item>';

  var resItem = top.aras.newIOMItem("","");
  resItem.loadAML(aml);
  resItem = resItem.apply();
  return resItem;
};

//--------------
fn_getFolderSubFolderRel = function(sourceItemId, relatedItemId )  {
var amlQry = '<Item type="Item Sub Folder" action="get" select="';
    amlQry += top.folderGrid1.folderRelItemSelectProperties + ',related_id" orderBy="org_number,sort_order" >';
    amlQry += "<source_id>"+sourceItemId+"</source_id>";
	amlQry += '<related_id>';
	amlQry += '<Item type="Item Folder" action="get" select="id,config_id,generation,';
    amlQry += top.folderGrid1.folderItemSelectProperties + '" >';
    amlQry += '<id>'+relatedItemId+'</id>';
    amlQry += '</Item>';
    amlQry += '</related_id>';
	amlQry += '</Item>';

	var qry = top.aras.newIOMItem("","");
    qry.loadAML(amlQry); 
    var relItemRels = qry.apply();
	if (relItemRels.getItemCount() <=0) {return relItemRels;}  // error: no controlled items for this folder 
	return relItemRels.getItemByIndex(0);
};

//--------------
fn_getFolderControlledItemRel = function(sourceItemId, relatedItemId  )  {
  var itemSelectProperties = top.folderGrid1.folderCtrlItemSelectProperties;

    // get relationship of related this ItemType
    var amlQry = "<Item type='Item Folder Controlled Item' action='get' select='id,source_id(owned_by_id,managed_by_id,team_id,locked_by_id),related_id,"+top.folderGrid1.folderRelItemSelectProperties+"' >";
    amlQry += "<source_id>"+sourceItemId+"</source_id>";
    amlQry += "<related_id>";
    amlQry += "<Item type='Folder Controlled Item' action='get' select='id,config_id,"+itemSelectProperties+"'>";
    amlQry += "<id>"+relatedItemId+"</id>";
    amlQry += "</Item>";
    amlQry += "</related_id>";
    amlQry += "</Item>";
    var qry = top.aras.newIOMItem("","");
    qry.loadAML(amlQry); 
    var relItemRels = qry.apply();
    
	if (relItemRels.getItemCount() <=0) {return relItemRels;}  // error: no controlled items for this folder 

	// with given relatedID result is expected to be 1
	// if poly item's config lists the same item type multiple times, then the same relship is returned multiple times
	// Poly item config must be corrected manually (due to packages import issues)
	// still continue by using the first rel listed.
	return relItemRels.getItemByIndex(0);
};

//--------------
fn_getFolderAttachedFileRel = function(fileRelationshipName, folderItem, relatedItemId  )  {
  var sourceItemId = folderItem.getID();
  var amlQry = "<Item type='"+fileRelationshipName+"' action='get' select='sort_order,is_shared,comments,source_id(owned_by_id,managed_by_id,team_id,locked_by_id),related_id' >";
  amlQry += "<source_id>"+sourceItemId+"</source_id>";
  amlQry += "<related_id><Item type='File' action='get' select='id,config_id,file_type,filename,generation,locked_by_id,modified_on' ";
  amlQry += "id='"+relatedItemId+"' ";
  amlQry += "></Item></related_id>";
  amlQry += "</Item>";
  var qry = top.aras.newIOMItem("","");
  qry.loadAML(amlQry); 
  return qry.apply();
};

// ======= Draw grid contents =======
FolderStructGrid.prototype.Draw = function FolderStructGrid_Draw(isReLoad) {
//	alert(this.skipNextDraw);
	if (this.skipNextDraw === true) {this.skipNextDraw=false; return;}

    this.hasInputRow = false;
	if (this.hasInputRow) {this.grid.showInputRow(true);}
	
	// get data from server
	if (isReLoad) {
		// re-set variables related to top/root item
		this.refreshTopItemContext();
		var isReleased = (fn_getChoiceSelectionOnToolbar(this.toolbar,"effectivity_mode") === "latest_released");
	
		this.fullTopFolderStructConfigXML = this.GetFullFolderStructConfig(this.topFolderItemId,isReleased,this.gridEmptyTable_xml);
		if (this.fullTopFolderStructConfigXML.getItemCount() === 0) {return;} // do nothing 
	}
    // draw data into grid
	//alert("draw");
    if (!this.fullTopFolderStructConfigXML) {return;}  //cannot draw, if XML is null
	this.grid.removeAllRows();
	this.GridRowUserData = {};

	var rootPartItem = this.fullTopFolderStructConfigXML.getItemByIndex(0);
	var rowID = this.DrawFolderRow(rootPartItem, null, null, null);
    fn_SetBackgroundColorInRow(rowID,0,this.numberOfGridColumns-1, "#ffeeee");

//debugger;	
	var parents = {};	
	this.DrawFolderChildren(rootPartItem, rootPartItem.getID(), rowID, parents);
	
	// need a timeout before openItem can be called. 	  
	var self = this;
	setTimeout(function(){
		try {
		} finally {
		    self.grid.openItem(rowID); //Root Item
		}} , 100);

};

FolderStructGrid.prototype.DrawFolderChildren = function FolderStructGrid_DrawFolderChildren(parentItem, parentItemId, parent_row_id, parents) {
	parents[parentItemId] = true;
	var structRels = parentItem.getRelationships("Item Sub Folder");

	for(var i = 0; i < structRels.getItemCount(); i++) {
	    var structRel = structRels.getItemByIndex(i);
		var childFolderItem = structRel.getRelatedItem();
		var childPartId = structRel.getProperty("related_id");

		if (childFolderItem.getAttribute("typeId","") !== "") {
		  var rowID = this.DrawFolderRow(childFolderItem, structRel, parentItemId, parent_row_id);
		  if (parents[childPartId] !== true) {
			this.DrawFolderChildren(childFolderItem, childPartId, rowID, parents);
		  }
		}
	}
	delete parents[parentItemId];
};

FolderStructGrid.prototype.DrawFolderRow = function FolderStructGrid_DrawFolderRow(itemNode, relationshipNode, parentItemId, parentRowId) {
	var data = {itemNode: itemNode, relationshipNode: relationshipNode, parentRowId: parentRowId};
	var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.itemFolderColumnList);
	
	var itemID = itemNode.getID();
	var	folderItemType = "Item Folder";
	var icon = this.icons["Item Folder"];
	var iconOpen = this.iconsOpen["Item Folder"];
	
	var newRowID;
	if (parentRowId) {newRowID=parentItemId+"-"+itemID;}
	else {newRowID="ROOT-"+itemID;}

	if(!parentRowId) {
		this.grid.insertRoot(newRowID, row.getValues(), newRowID, icon, iconOpen);
	} else {
		this.grid.insertNewChild(parentRowId, newRowID, row.getValues(), newRowID, icon, iconOpen);
	}
	
	row.bind(newRowID,null,folderItemType,itemID);
//	row.setGridRowUserData(folderItemType,itemID);
	
	// add tools rows as children
	this.DrawFolderFileRows(itemNode, newRowID);
	this.DrawFolderControlledItemRows(itemNode, newRowID);

	return newRowID;
};

FolderStructGrid.prototype.UpdateFolderRowValues = function FolderStructGrid_UpdateFolderRowValues(rowId, itemNode, relationshipNode) {
    // row must exist
	if (!this.gridRowExists(rowId)) {return;}
	
	var data = {itemNode: itemNode, relationshipNode: relationshipNode};
	var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.itemFolderColumnList);
    var rowCellVals = row.getValues().split("|");
	
	for (var i=0; i<rowCellVals.length; i++) {
	  this.gridSetCellValue(rowId,i,rowCellVals[i]);
	}
};

FolderStructGrid.prototype.DrawFolderControlledItemRows = function FolderStructGrid_DrawFolderControlledItemRows(folderItem, folderRowId) {
	var folderCtrldItemRels = folderItem.getRelationships("Item Folder Controlled Item");
	var icon="";

	var ctrldItemsGroupsNodeId = "";

   // add phantom grid row to group controlled Items
    if (ctrldItemsGroupsNodeId === "" && folderCtrldItemRels.getItemCount() > 0) {ctrldItemsGroupsNodeId = fn_InsertControlledItemsGroupRowToTreeGrid (folderRowId,folderItem.getID()); }
	
	for(var i = 0; i < folderCtrldItemRels.getItemCount(); i++) {
	  var folderCtrldItemRel = folderCtrldItemRels.getItemByIndex(i);
	  var ctrldItem = folderCtrldItemRel.getRelatedItem();
	  var ctrldItemId = folderCtrldItemRel.getProperty("related_id","");
	  var ctrldItemType = ctrldItem.getAttribute("type","");
	  icon = this.icons[ctrldItemType];
	  
		var data = {itemNode: ctrldItem, relationshipNode: folderCtrldItemRel, parentRowId: folderRowId};
		var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.ctrldItemsColumnList);
		
		var newRowID = folderItem.getID() +"-"+ ctrldItemId;
		if (!this.gridRowExists(newRowID)) {
  		  this.grid.insertNewChild(ctrldItemsGroupsNodeId, newRowID, row.getValues(), newRowID, icon, icon);
  	      row.bind(newRowID,null,ctrldItemType, ctrldItemId);
		}
	}
};
FolderStructGrid.prototype.UpdateFolderControlledItemRowValues = function FolderStructGrid_UpdateFolderControlledItemRowValues(rowId, ctrldItem, folderCtrldItemRel ) {
    // row must exist
	if (!this.gridRowExists(rowId)) {return;}
	
	var data = {itemNode: ctrldItem, relationshipNode: folderCtrldItemRel};
	var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.ctrldItemsColumnList);
    var rowCellVals = row.getValues().split("|");
	
	for (var i=0; i<rowCellVals.length; i++) {
	  this.gridSetCellValue(rowId,i,rowCellVals[i]);
	}
};

FolderStructGrid.prototype.DrawFolderFileRows = function FolderStructGrid_DrawFolderFileRows(folderItem, folderRowId) {
	var folderFileRels = folderItem.getRelationships("Item Folder File");
	var icon="";
	var ctrldItemsGroupsNodeId = "";

   // add phantom grid row to group controlled Items
    if (ctrldItemsGroupsNodeId === "" && folderFileRels.getItemCount() > 0) {ctrldItemsGroupsNodeId = fn_InsertFilesGroupRowToTreeGrid (folderRowId,folderItem.getID()); }
	
	for(var i = 0; i < folderFileRels.getItemCount(); i++) {
	  var folderCtrldItemRel = folderFileRels.getItemByIndex(i);
	  var fileItem = folderCtrldItemRel.getRelatedItem();
	  var fileItemId = folderCtrldItemRel.getProperty("related_id","");
	  icon = this.icons["File"];
	  
		var data = {itemNode: fileItem, relationshipNode: folderCtrldItemRel, parentRowId: folderRowId};
		var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.filesColumnList);
		
		var newRowID = folderItem.getID() +"-"+ fileItemId;
		
		if (!this.gridRowExists(newRowID)) {
  		  this.grid.insertNewChild(ctrldItemsGroupsNodeId, newRowID, row.getValues(), newRowID, icon, icon);
		  row.bind(newRowID, null, "File", fileItemId);
	    }
	}
};

FolderStructGrid.prototype.UpdateFolderFileRowValues = function FolderStructGrid_UpdateFolderFileRowValues(rowId, fileItem, folderFileRel ) {
    // row must exist
	if (!this.gridRowExists(rowId)) {return;}
	
	var data = {itemNode: fileItem, relationshipNode: folderFileRel};
	var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.filesColumnList);
    var rowCellVals = row.getValues().split("|");
	
	for (var i=0; i<rowCellVals.length; i++) {
	  this.gridSetCellValue(rowId,i,rowCellVals[i]);
	}
};

//-------------
FolderStructGrid.prototype.AddNewControlledItemToFolder = function FolderStructGrid_AddNewControlledItemToFolder(folderRowId, folderItem, newCtrldItem, isNew)
{
 var ctrldItemType;
 if (isNew)
 {
  //do auto numbers (like on folder Template
  ctrldItemType = newCtrldItem.getAttribute("type");
  var methodName = "";
  switch (ctrldItemType)
  {
  case "Document":
    methodName = "Folder Template Default DocNum";
    break;
  case "CAD":
    methodName = "Folder Template Default CADNum";
    break;
  case "Part":
    methodName = "Folder Template Default PartNum";
    break;
  }
  if (methodName === "") {return innovator.newError("Auto number logic for new items not defined for type '"+ctrldItemType+"' !");}
  
  var runMethod = top.aras.newIOMItem(ctrldItemType,methodName);
  runMethod = runMethod.apply();
  if (runMethod.isError()) {return innovator.newError("Cannot create auto number for type '"+ctrldItemType+"' !");}

  //## .getResult() does no longer exist in Aras10 API
  top.aras.setItemProperty(newCtrldItem,"item_number",runMethod.getResult());
  //top.aras.uiShowItemEx(newCtrldItem);
  //top.aras.itemsCache.addItem(newCtrldItem);

//## TODO - add new item and relationship in cache instead of server - like standard "create related" on relationships ???

 }
  var ctrldItemsGroupsNodeId;
  var folderItemRel;
  folderItemRel = top.aras.newIOMItem("Item Folder Controlled Item","add");
  folderItemRel.setProperty("source_id", folderItem.getID());
  var ctrldItem = top.aras.newIOMItem("Folder Controlled Item");
  ctrldItem.loadAML(newCtrldItem.xml);
  folderItemRel.setRelatedItem(ctrldItem);
 
  folderItemRel = folderItemRel.apply(); //add new relationship on server
  if (folderItemRel.isError()) {return folderItemRel;}
  // retrieve new relationship with more details from server
  folderItemRel = fn_getFolderControlledItemRel(folderItem.getID(),ctrldItem.getID());
  if (folderItemRel.isError()) {return folderItemRel;}
  ctrldItem = folderItemRel.getPropertyItem("related_id");
 
  //## TODO - add new rel and item AML to this.fullTopFolderStructConfigXML
  
  // add phantom grid row to group controlled items
  ctrldItemsGroupsNodeId = fn_InsertControlledItemsGroupRowToTreeGrid (folderRowId, folderItem.getID());  

  ctrldItemType = newCtrldItem.getAttribute("type");
  var ctrldItemId = newCtrldItem.getAttribute("id");

  // add new grid row
  var icon = this.icons[ctrldItemType];
  var data = {itemNode: ctrldItem, relationshipNode: folderItemRel, parentRowId: folderRowId};
  var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.ctrldItemsColumnList);
		
  var newRowID = folderItem.getID() +"-"+ ctrldItemId;
  if (!this.gridRowExists(newRowID)) {
    this.grid.insertNewChild(ctrldItemsGroupsNodeId, newRowID, row.getValues(), newRowID, icon, icon);
	row.bind(newRowID,null,ctrldItemType, ctrldItemId);
  }

  // expand rows to see new rows
  this.grid.openItem(folderRowId);  
  this.grid.openItem(ctrldItemsGroupsNodeId);  
  
  return folderItemRel;
};

//-------------
FolderStructGrid.prototype.AddNewFileToFolder = function FolderStructGrid_AddNewFileToFolder(folderRowId, folderItem, newFileItem)
{
  this.toolbarRefresh(false);
  
  var folderFileRel = top.aras.newIOMItem("Item Folder File","add");
  
  folderFileRel.setProperty("source_id", folderItem.getID());
  var fileItem = top.aras.newIOMItem("File");
  fileItem.loadAML(newFileItem.xml);
  folderFileRel.setRelatedItem(fileItem);
 
  folderFileRel = folderFileRel.apply(); //triggers upload to vault.
  if (folderFileRel.isError()) {this.toolbarRefresh(true);return folderFileRel;}

  // retrieve new relationship with more details from server
  folderFileRel = fn_getFolderAttachedFileRel("Item Folder File", folderItem, fileItem.getID());
  if (folderFileRel.isError()) {
    this.toolbarRefresh(true);
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.attached_files_not_retrieved"));
    return folderFileRel;
  }
  fileItem = folderFileRel.getPropertyItem("related_id");
  
  // add phantom grid row to group files
  fileGroupRowId = fn_InsertFilesGroupRowToTreeGrid (folderRowId, folderItem.getID());  
  var newNodeId = folderItem.getID() + "-" + fileItem.getID();

  var fileItemId = folderFileRel.getProperty("related_id","");

  // add new grid row
  var icon = this.icons["File"];
  var data = {itemNode: fileItem, relationshipNode: folderFileRel, parentRowId: folderRowId};
  var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.filesColumnList);
		
  var newRowID = folderItem.getID() +"-"+ fileItemId;
  if (!this.gridRowExists(newRowID)) {
    this.grid.insertNewChild(fileGroupRowId, newRowID, row.getValues(), newRowID, icon, icon);
	row.bind(newRowID,null,"File", fileItemId);
  }
  // expand rows to see new rows
  this.grid.openItem(folderRowId);  
  this.grid.openItem(fileGroupRowId);  

  this.toolbarRefresh(true);
  return folderFileRel;
};

//-------------
FolderStructGrid.prototype.AddNewSubFolderToFolder = function FolderStructGrid_AddNewSubFolderToFolder(folderRowId, folderItemId, orgNumber, subFolderName, subFolderDescr)
{
  // Create new SubFolder Rel and new Folder Item
  folderItemRel = top.aras.newIOMItem("Item Sub Folder","add");
  if (orgNumber && orgNumber !== "") {folderItemRel.setProperty("org_number", orgNumber);}
  folderItemRel.setProperty("source_id", folderItemId);
  var subFolderItem = top.aras.newIOMItem("Item Folder","add");
  subFolderItem.setProperty("name",subFolderName);
  if (subFolderDescr && subFolderDescr !== "") {subFolderItem.setProperty("description",subFolderDescr);}
  folderItemRel.setRelatedItem(subFolderItem);
 
  folderItemRel = folderItemRel.apply(); //add new relationship on server
  if (folderItemRel.isError()) {return folderItemRel;}

  // retrieve new relationship with more details from server
  folderItemRel = fn_getFolderSubFolderRel(folderItemId,subFolderItem.getID());
  if (folderItemRel.isError()) {return folderItemRel;}
  subFolderItem = folderItemRel.getPropertyItem("related_id");
  
  // add new grid row
  var data = {itemNode: subFolderItem, relationshipNode: folderItemRel, parentRowId: folderRowId};
  var row = new RowClass(this,data,this.columnHeadingsAndLayout,this.itemFolderColumnList);
  var	folderItemType = "Item Folder";
  var icon = this.icons["Item Folder"];
  var iconOpen = this.icons["Item Folder"];
	
  var newRowID=folderItemId+"-"+folderItemRel.getProperty("related_id","");
  this.grid.insertNewChild(folderRowId, newRowID, row.getValues(), newRowID, iconOpen, icon);

  row.bind(newRowID,null,"Item Folder", folderItemRel.getProperty("related_id",""));
 
  // expand folder to see new row
  this.grid.openItem(folderRowId);  
  
  return folderItemRel;
};

FolderStructGrid.prototype.gridRefresh = function FolderStructGrid_gridRefresh(isReLoad) {
	var self = this;
	self.toolbarRefresh(false);
	self.grid.setPaintEnabled(false);

  if (this.arasRelease === "Aras9") {

	this.grid.style.visibility = 'hidden';

	setTimeout(function(){
		try {
			var gridState = self.GetGridState();
			self.Draw(isReLoad);
			self.SetGridState(gridState);
		} finally {
			self.grid.style.visibility = '';
			self.grid.setPaintEnabled(true);
			self.toolbarRefresh(true);
		}
	} ,50);
  }

  else {  
	document.getElementById(this.grid.connectId).style.visibility = 'hidden';
	document.getElementById('loadingInProgress').style.visibility = 'visible';

	setTimeout(function(){
		try {
			var gridState = self.GetGridState();
			self.Draw(isReLoad);
			self.SetGridState(gridState);
			setTimeout(function()
			{
				self.SetGridState(gridState);
				if (typeof self.IsExpandOnStart === "boolean") {
					if (self.IsExpandOnStart) {self.grid.expandAll();}
					else {self.grid.collapseAll();}
					delete self.IsExpandOnStart;
				}
			},0);
		} finally {
			document.getElementById('loadingInProgress').style.visibility = 'hidden';
			document.getElementById(self.grid.connectId).style.visibility = 'visible';
			self.grid.setPaintEnabled(true);
			self.toolbarRefresh();
		}
	} ,0);

  }	
	
};

FolderStructGrid.prototype.refreshGridWithTimout = function FolderStructGrid_refreshGridWithTimout(isReload) {
	//If Refresh will be called multiple times per one execution scope then postponned call of Refresh_Impl will be canceled and initiated new call
	//That is mean that Refresh_Impl will be called once.
	if(this.Refresh_Impl_timeout) {
		clearTimeout(this.Refresh_Impl_timeout);
		delete this.Refresh_Impl_timeout;
	}
	var self = this;
	//Need setTimeout because during handling OnPopulated event document.thisItem contain old item and it will be refreshed after OnPopulated event
	this.Refresh_Impl_timeout = setTimeout(function () {
		self.gridRefresh(isReload);
	}, 0);
};

FolderStructGrid.prototype.toolbarRefresh = function FolderStructGrid_toolbarRefresh(enableToolbarElements) {
	fn_enableToolbarControls(this.toolbar, enableToolbarElements, this.fixEffectivityToReleased);
};

FolderStructGrid.prototype.onGridMenuInit = function FolderStructGrid_onGridMenuInit(eArg) {
	var id_array = this.grid.getSelectedItemIds("|").split("|");  //supports multi-select
	var enableAction = true;
	var prevActionIsSeparator = false;
	var menuItemCount = 0;
	var lastMenuItemIndex = 0;
	var lastSepIndex = 0;
	var rowItemType = null;
	var rowItemId = null;
	var lockStatus = null;
	if (id_array.length == 1) {
		rowItemType = this.getGridRowUserData(id_array[0],"gridData_rowItemType");
		rowItemId = this.getGridRowUserData(id_array[0],"gridData_rowItemID");
		if (rowItemType === folderGroupCtrldItemsRowType || rowItemType === folderGroupFilesRowType) {
		    var folderRowId = this.grid.getParentId(id_array[0]);
			lockStatus = fn_GetLockedStatusOfItemFromServer(this.getGridRowUserData(folderRowId,"gridData_rowItemType"), this.getGridRowUserData(folderRowId,"gridData_rowItemID")); 
		} else {
		  lockStatus = fn_GetLockedStatusOfItemFromServer(rowItemType, rowItemId); 
		  this.gridSetCellValue(id_array[0],this.lockIconColumnNo,fn_GetLockedCellIconFormatByStatusCode(this.icons,lockStatus)); //update icon
		}
	}
	//build dynamic context menu items (the tricky part is to avoid duplicate separators or separators at first and last position !!)
	for (var i = 0; i < this.gridContextMenu.length; i++) {
			if (!this.gridContextMenu[i].separator) {
				if (this.gridContextMenu[i].handler.isShowOnMenu(this.gridContextMenu[i].name, this.isEditable(), rowItemType, rowItemId, this.currentUserIsOwner, lockStatus)) {
					prevActionIsSeparator = false;
					eArg.menuItems.push({
						name: this.gridContextMenu[i].name,
						label: this.gridContextMenu[i].label,
						enabled: enableAction,
						handler: this.gridContextMenu[i].handler
					});
					this.gridContextMenu[i].menuindex = menuItemCount;
					lastMenuItemIndex = i;
					menuItemCount++;
				} else {
					this.gridContextMenu[i].menuindex = -1;
				}
			} else {
				if (prevActionIsSeparator === false) {
					eArg.menuItems.push(this.gridContextMenu[i]);
					menuItemCount++;
					lastSepIndex = i;
				}
				prevActionIsSeparator = true;
			}
	}
	//clean single separator on menu
	if (menuItemCount === 1 && this.gridContextMenu[lastSepIndex].separator === true) {return false;} //show no menu
	//clean separator on top of menu
	if (eArg.menuItems[0].separator === true) {
		eArg.menuItems.splice(0,1);menuItemCount--;
		for ( i = 0; i < this.gridContextMenu.length; i++) {
			if (this.gridContextMenu[i].menuindex !== -1) {this.gridContextMenu[i].menuindex = this.gridContextMenu[i].menuindex-1;}
		}
	}
	//clean separator at bottom of menu
	if (eArg.menuItems[menuItemCount-1].separator === true) {
		eArg.menuItems.splice(menuItemCount-1,1);menuItemCount--;
		this.gridContextMenu[lastMenuItemIndex].menuindex=menuItemCount-1;
	}
	return true;
};

FolderStructGrid.prototype.onToolbarClick = function FolderStructGrid_onToolbarClick(eArg) {
	if (this.initialized === false) {return;}
	var actionId = eArg.id;

    // add toolbar actions here ...	
	switch(actionId)
	{
		case "expand_all":
			this.expandAll(true);
			break;
		case "collapse_all":
			this.expandAll(false);
			break;
		case "refresh_all":
			this.gridRefresh(true);
			break;
	}
	
	// call additional toolbar action handler
  // call additional toolbar action handler
  var selectedId = this.grid.getSelectedId(); //selected grid row
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
       return;
  }
  var rowItemType = this.getGridRowUserData(selectedId,"gridData_rowItemType");
  var rowItemId = this.getGridRowUserData(selectedId,"gridData_rowItemID");
   
  var checkMsg = top.folderGrid1.ValidateActionRequest(actionId, rowItemType, rowItemId, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg); return;}

  top.folderGrid1.onToolbarAndMenuClickLocalAction(actionId,rowItemType, rowItemId, selectedId, "toolbar");
};

FolderStructGrid.prototype.onToolbarChange = function FolderStructGrid_onToolbarChange(eArg) {
    if (this.ignoreToolbarChangeEvent === true) {this.ignoreToolbarChangeEvent = false; return;}
	if (this.initialized === false) {return;}
	var id = eArg.id;
	if (id == "effectivity_mode")  {this.gridRefresh(true);}
};

//-----------  BEGIN Grid's custom grid handlers
FolderStructGrid.prototype.onGridMenuClick = function FolderStructGrid_onGridMenuClick(menuChoice) {
  var idx = -1;
  for (var i = 0; i < this.gridContextMenu.length && idx < 0; i++) {
    if (this.gridContextMenu[i].menuindex === parseInt(menuChoice, 10)) {idx = i;}
  }
  var menuItem = this.gridContextMenu[idx];
  
  var selectedId = this.grid.getSelectedId(); //selected grid row
  if (!selectedId || typeof(selectedId) == "undefined" || selectedId === "" || selectedId === "NOTHING_MSG") {
       return;
  }
  var rowItemType = this.getGridRowUserData(selectedId,"gridData_rowItemType");
  var rowItemId = this.getGridRowUserData(selectedId,"gridData_rowItemID");
  if (rowItemType === folderGroupCtrldItemsRowType || rowItemType === folderGroupFilesRowType) {
  	var parentFolderRowId = this.grid.getParentId(selectedId); // grouping row - use parent folder context instead
	rowItemType = this.getGridRowUserData(parentFolderRowId,"gridData_rowItemType");
    rowItemId = this.getGridRowUserData(parentFolderRowId,"gridData_rowItemID");
	selectedId = parentFolderRowId;
  }
  var checkMsg = menuItem.handler.validateAction(selectedId,rowItemType,rowItemId,menuItem.name);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg); return;}
  
  menuItem.handler.executeAction(selectedId,rowItemType,rowItemId,menuItem.name);  
};

FolderStructGrid.prototype.onGridClick = function FolderStructGrid_onGridClick(eArg) {
	if (this.initialized === false) {return;}
};

FolderStructGrid.prototype.onGridDoubleClick = function FolderStructGrid_onGridDoubleClick(eArg) {
  var selectedId = eArg.rowId;

  var rowItemType = this.getGridRowUserData(selectedId,"gridData_rowItemType");
  var rowItemId = this.getGridRowUserData(selectedId,"gridData_rowItemID");
  
  var checkMsg = this.ValidateActionRequest("view_item", rowItemType, rowItemId, selectedId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg); return;}

  this.onToolbarAndMenuClickLocalAction("view_item",rowItemType, rowItemId, selectedId, "doubleclick");
};

FolderStructGrid.prototype.onGridLinkClick = function FolderStructGrid_onGridLinkClick(eArg) {
    var data = eArg.linkData.replace(/'/g,"");
    var linkInfo = data.split(",");
    var rowId = linkInfo[2];
	if (linkInfo[1] === "{OpenRowItem}") {  
	  eArg = {selectedId: rowId, rowItemType: this.getGridRowUserData(rowId,"gridData_rowItemType"), rowItemId: this.getGridRowUserData(rowId,"gridData_rowItemId")};
	  fn_onOpenRowItem(eArg);
	  //eval("top.aras.uiShowItem('" + this.getGridRowUserData(rowId,"gridData_rowItemType")+"','"+this.getGridRowUserData(rowId,"gridData_rowItemId") + "')");
	}
	if (linkInfo[1] === "{FilesOfRelatedItem}") {
	  eArg = {selectedId: rowId, rowItemType: this.getGridRowUserData(rowId,"gridData_rowItemType"), rowItemId: this.getGridRowUserData(rowId,"gridData_rowItemId")};
	  fn_onViewRelatedFiles(eArg);
    }
	
	 //assumes only 1 link per row that links to the row's data item
  //  this.clickedGridLinkValue = strLink; 

};

FolderStructGrid.prototype.onGridDragEnter = function FolderStructGrid_onGridDragEnter(eArg) {
  //TODO  check if rowType is "Item Folder"
  if (this.isEditable() && eArg.b.Data.GetDataPresent("FileDrop"))  // allow drop for files only
  {
	eArg.b.Effect = -2147483645;
  }
  return;
};

FolderStructGrid.prototype.onGridDragDrop = function FolderStructGrid_onGridDragDrop(eArg) {
  if (eArg.b.Data.GetDataPresent("FileDrop")) // allow drop for files only
  {
    //debugger;
    //var dropCol = eArg.b.Data.Column;
    var dropRowId = eArg.b.Data.RowId;
    if (!dropRowId) {return;}
    var itemType = this.getGridRowUserData(dropRowId,"gridData_rowItemType");

	var checkMsg = top.folderGrid1.ValidateActionRequest("dropFile", itemType, null, dropRowId);
    if (checkMsg !== "") {top.aras.AlertError(checkMsg); return;}

    if (itemType === "FILES_GROUP") {dropRowId = this.grid.getParentId(dropRowId);}
    if (!dropRowId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_group_row")); return;}
    itemType = this.getGridRowUserData(dropRowId,"gridData_rowItemType");
    var itemId = this.getGridRowUserData(dropRowId,"gridData_rowItemID");

    var errMsg = fn_checkRowItemIsLocked(dropRowId,itemType,itemId,this.lockIconColumnNo);
    if (errMsg !== "") {top.aras.AlertError(errMsg); return;}

	errMsg = fn_checkIfAttachmentsOnThisFolderAllowed(itemId);
    if (errMsg !== "") {top.aras.AlertError(errMsg); return;}

	var fileNames = eArg.b.Data.GetData("FileDrop");
	var arrayListOfFiles = top.aras.utils.GetArrayListForStringArray(fileNames);

	for (var i = 0; i < arrayListOfFiles.count; i++)
	{
	  var fileName = arrayListOfFiles(i);
	  if (top.aras.vault.FileExists(fileName))
	  {
		doRowUpdateAfterDrag = true;
		var fileNd = top.aras.newFileItem(fileName);
		if (!fileNd)
		{
		  alert('Error on Drag-n-Drop file handling');
		  return;
		}
		var folderItem = top.aras.newIOMItem(itemType,"get");
        folderItem.setID(itemId);
        folderItem.setAttribute("select",this.folderItemSelectProperties);
        folderItem = folderItem.apply();

        fileNd = this.AddNewFileToFolder(dropRowId,folderItem,fileNd);
        if (fileNd.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_file_error") + fileNd.getErrorString()); return;}
	  }
	}
  }
  return;
};
//-----------  END Grid's custom grid handlers
//------  Menu Action Handlers
/*++++	Default Action Handler */
handleMenuActionByName = function handleMenuActionByNameFunc() {
};
handleMenuActionByName.prototype.executeAction = function handleMenuActionByName_execute(selRowId, rowItemType, rowItemId, menuActionName) {
  top.folderGrid1.onToolbarAndMenuClickLocalAction(menuActionName,rowItemType, rowItemId, selRowId, "menu");
};
handleMenuActionByName.prototype.validateAction = function handleMenuActionByName_validate(selRowId, rowItemType, rowItemId, menuActionName) {
  //returns "" if validations are OK. Else the function returns an Error message.
  return top.folderGrid1.ValidateActionRequest(menuActionName, rowItemType, rowItemId, selRowId);
};
handleMenuActionByName.prototype.isShowOnMenu = function handleMenuActionByName_isShowOnMenu(menuActionName,isTopItemEditable,rowItemType,rowItemId,currentUserIsOwner,lockStatus) {
    switch(rowItemType)
	{
	case "Document":
		if (menuActionName === "view_attached_files") {return true;}
		break;
	case "Item Folder":
		if (menuActionName === "view_folder") {return true;}
		if (menuActionName === "refresh_this_row" && arasRelease === "Aras9") {return true;}
		if (lockStatus === 1) { //folder locked by user
			if (menuActionName === "add_new_controlled_item") {return true;}
			if (menuActionName === "add_existing_controlled_item") {return true;}
			if (menuActionName === "add_new_file_to_folder") {return true;}
			if (menuActionName === "add_sub_folder") {return true;}
		}
		if (lockStatus === 0) { //folder not locked
			if (menuActionName === "promote_folders_to_active_down" && currentUserIsOwner) {return true;}
			if (menuActionName === "promote_folders_to_archived_down" && currentUserIsOwner) {return true;}
		}
		break;
	default:
		if (rowItemType === folderGroupCtrldItemsRowType) {
			if (menuActionName === "add_new_controlled_item" && lockStatus === 1) {return true;}
			if (menuActionName === "add_existing_controlled_item" && lockStatus === 1) {return true;}
			if (menuActionName === "add_sub_folder" && lockStatus === 1) {return true;}
		}
		if (rowItemType === folderGroupFilesRowType) {
			if (menuActionName === "add_new_file_to_folder" && lockStatus === 1) {return true;}
		}
		break;	
	}
	if(isTopItemEditable) {
		if (rowItemType !== "File" && rowItemType !== folderGroupCtrldItemsRowType && rowItemType !== folderGroupFilesRowType) {
			if (menuActionName === "lock_row_item" && lockStatus === 0) {return true;}
			if (menuActionName === "unlock_row_item" && lockStatus === 1) {return true;}
		}
	}
	return false;	
};
/*-----	Default Action Handler */
FolderStructGrid.prototype.ValidateActionRequest = function FolderStructGrid_ValidateActionRequest(actionId, itemType, rowItemId, rowId) {
  // run various checks specific to action
  //debugger;

  var effectivityMustBeCurrent = false;
  var disallowForRootItems = false;  
  
  switch (actionId)
  {
	case "view_item":
      return "";  // no checks
	  
	case "lock_row_item":
    case "unlock_row_item":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType === folderGroupCtrldItemsRowType || itemType === folderGroupFilesRowType || itemType === "File")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}
      break;
    case "add_new_controlled_item":
    case "add_existing_controlled_item":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType !== "CTRLD_ITEMS_GROUP" && itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}

      break;
    case "view_folder":
      if (itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}
      break;

    case "dropFile":
    case "addFile":
    case "add_new_file_to_folder":
      effectivityMustBeCurrent = true;
      disallowForRootItems = true;
      if (itemType !== "FILES_GROUP" && itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_type_x") + itemType + " !";}
      break;

    case "add_sub_folder":
      effectivityMustBeCurrent = true;
      disallowForRootItems = false;
      if (itemType !== "Item Folder")
       {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_onrows_of_type_x") + itemType + " !";}
      break;
  }

  if (disallowForRootItems) {
    // check rowId
    if (!this.grid.getParentId(rowId))
      {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_root_rows");}
  }

  if (effectivityMustBeCurrent) {
    if (fn_getChoiceSelectionOnToolbar(this.toolbar,"effectivity_mode") !== "current_config")
      {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.effectivity_must_be_current_for_action");}
  }
  
  // success
  return "";
};

FolderStructGrid.prototype.onToolbarAndMenuClickLocalAction = function FolderStructGrid_onToolbarAndMenuClickLocalAction (actionId, rowItemType, rowItemId, selectedId, actionSource ) {
   //debugger;
   var eArg = {selectedId: selectedId, rowItemType: rowItemType, rowItemId: rowItemId};

   actionId = actionSource + "." + actionId;
   // NOTE: toolbar actions: expand, collapse, refresh are covered by default handler
	switch(actionId)
	{
	  case "toolbar.execute_search":
	     alert("The search feature is not implemented, yet!");
	  	 break;
	  case "doubleclick.view_item":
	  case "toolbar.view_item":
	  case "menu.view_item":
	     fn_onOpenRowItem(eArg);
	  	 break;
	  case "menu.refresh_this_row":
	  	 this.toolbarRefresh(false);
	     fn_onRefreshThisFolder(eArg);
	  	 this.toolbarRefresh(true);
	  	 break;
	  case "menu.view_folder":
	     fn_onOpenRowItem(eArg, "Item Folder");
	  	 break;
	  case "menu.view_attached_files":
	     fn_onViewRelatedFiles(eArg);
	  	 break;
	  case "menu.promote_folders_to_active_down":
	     fn_onPromoteFoldersDown(eArg, "Active");
	  	 break;
	  case "menu.promote_folders_to_archived_down":
	     fn_onPromoteFoldersDown(eArg,"Archived");
	  	 break;
	  case "menu.lock_row_item":
	     fn_onLockRowItem(eArg);
	  	 break;
	  case "menu.unlock_row_item":
	     fn_onUnLockRowItem(eArg);
	  	 break;
	  case "menu.add_new_controlled_item":
	     fn_onAddControlledItem(eArg, true);
	  	 break;
	  case "menu.add_existing_controlled_item":
	     fn_onAddControlledItem(eArg, false);
	  	 break;
	  case "menu.add_new_file_to_folder":
	     fn_onAddFileToFolder(eArg);
	  	 break;
	  case "menu.add_sub_folder":
	     fn_onAddSubFolder(eArg);
	  	 break;

//	  case "menu.xx":
//	  	 break;
	}
};

//------ BEGIN: local action handlers for menu or toolbar clicks
//-----------------
fn_onOpenRowItem = function (eArg, checkForItemType) {
  //debugger;
  var itemId = eArg.rowItemId;
  var itemType = eArg.rowItemType;

  // phantom rows cannot be opened - open parent folder instead
  if (itemType === folderGroupCtrldItemsRowType || itemType === folderGroupFilesRowType){
    selectedId = top.folderGrid1.grid.getParentId(eArg.selectedId);
    top.aras.uiShowItem(top.folderGrid1.getGridRowUserData(eArg.selectedId,"gridData_rowItemType"), top.folderGrid1.getGridRowUserData(eArg.selectedId,"gridData_rowItemID"));
    return;
  }
  // if check option set, check if row is of correct type
  if (checkForItemType && checkForItemType !== "")
  {
    if (checkForItemType.indexOf(itemType) < 0)
    {
      top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_allowed_on_rows_of_this_type"));
      return;
    }
  }
  // if Folder row, just open the row item
  if (itemType === "Item Folder"){top.aras.uiShowItem(itemType, itemId);return;}

  // files and controlled items are versionable
  //item version might have changed since grid was loaded, get right version of item based on effectivity mode
  var itm = null;
  var selectProps = "";
  if (itemType === "File") {selectProps = "filename,generation,modified_on,comments";}
  else {selectProps = "id,config_id,generation,is_released,is_current,item_number,name,major_rev,state,locked_by_id,owned_by_id,managed_by_id,team_id,modified_on,description,has_files,has_files_icon,itemtype";}

  switch (fn_getChoiceSelectionOnToolbar(top.folderGrid1.toolbar,"effectivity_mode"))
  {
    case "current_config":   
//      itm = fn_GetItemsOfReleasedGeneration(itemType,"'0680E81AEFCB46ACA36D90A673C6ACBB','D45072B9014740F1A797D0597C3EA112','237546E10EF745C8B9499C248ADBC188'",selectProps);
//      debugger;
      itm = fn_GetItemsOfCurrentGeneration(itemType,itemId,selectProps);
      if (itm.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.get_item_current_generation_error") + itm.getErrorString());return;}
      break;
    case "latest_released":
      itm = fn_GetItemsOfReleasedGeneration(itemType,itemId,selectProps);
      if (itm.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.get_item_released_generation_error") + itm.getErrorString());return;}
      break;
  }
  
  //update grid data of controlled item, if id had changed
  var newId = itm.getID();
  if (itm && itemId !== newId ) {
    
  	top.folderGrid1.UpdateFolderControlledItemRowValues(eArg.selectedId, itm, null);
    itemId=newId;
  }
  top.aras.uiShowItem(itemType, itemId);
};

fn_onRefreshThisFolder = function (eArg) {
  if (eArg.rowItemType !== "Item Folder"){top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.action_not_valid_on_folder_rows"));return;}

  top.folderGrid1.grid.setPaintEnabled(false);
  
  // delete all Children down from this node (selectedId)
  var allChildIds = top.folderGrid1.grid.getChildItemsId(eArg.selectedId,true,"|").split("|");
  //## getChildItemsId  method not available in dojo version of grid (Aras10)

  for (var i=0;i<allChildIds.length;i++)
  {
    top.folderGrid1.grid.deleteRow(allChildIds[i]);
    delete top.folderGrid1.getGridRowUserData[allChildIds[i]];
  }

  var isReleased = (fn_getChoiceSelectionOnToolbar(top.folderGrid1.toolbar,"effectivity_mode") === "latest_released");

  //reload this folder item with structure details and the re-draws the grid rows
  var thisFolderStructConfig = top.folderGrid1.GetFullFolderStructConfig(eArg.rowItemId, isReleased, top.folderGrid1.gridEmptyTable_xml);
  if (thisFolderStructConfig.getItemCount() === 0) {return;} // do nothing 

  
  var parentRowId = top.folderGrid1.grid.getParentId(eArg.selectedId);

  // is it the root folder ?
  if (!parentRowId || parentRowId === undefined) {
  	top.folderGrid1.UpdateFolderRowValues(eArg.selectedId, thisFolderStructConfig, null);
  }
  else {
    // reload relationship to parent
	var parentId=top.folderGrid1.getGridRowUserData(parentRowId,"gridData_rowItemID");
    var parentFolderRel = top.aras.newIOMItem("Item Sub Folder","get");
    parentFolderRel.setAttribute("select",top.folderGrid1.folderRelItemSelectProperties+",related_id"); 
    parentFolderRel.setProperty("source_id",parentId);
    parentFolderRel.setProperty("related_id",eArg.rowItemId);
    parentFolderRel = parentFolderRel.apply();
    if (parentFolderRel.isError) {top.aras.AlertError(parentFolderRel.getErrorString()); return;}

    top.folderGrid1.UpdateFolderRowValues(eArg.selectedId, thisFolderStructConfig, parentFolderRel);
  } 
  var folderItem = thisFolderStructConfig.getItemByIndex(0);

  // draw new related data of this folder
  top.folderGrid1.DrawFolderControlledItemRows(folderItem, eArg.selectedId);
  top.folderGrid1.DrawFolderFileRows(folderItem, eArg.selectedId);
  
  // draw new children with related data
  var parents = {};
  top.folderGrid1.DrawFolderChildren(folderItem, folderItem.getID(), eArg.selectedId, parents);
  top.folderGrid1.grid.openItem(eArg.selectedId); //refreshed folder Item
  
  top.folderGrid1.grid.setPaintEnabled(true);
  return;
};

fn_onViewRelatedFiles = function (eArg) {
  //debugger;
  var argsItem = innovator.newItem(eArg.rowItemType,"get");
  argsItem.setID(eArg.rowItemId);

  var result = top.aras.evalMethod ("Item Folder ViewItemFiles Action",argsItem.dom.xml);
  if (result.isError ()) {top.aras.AlertError (top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.view_item_files_error") + result);} 
  return;
};

fn_onPromoteFoldersDown = function (eArg, targetState) {
  if (eArg.rowItemType !== "Item Folder"){top.aras.AlertError(top.aras.getResource("ItemFolders","itemfoldertreegrid.message.action_not_valid_on_folder_rows"));return;}

  var lockStatus = fn_GetLockedStatusOfItemFromServer(eArg.rowItemType, eArg.rowItemId); 
  if (lockStatus > 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_locked_by_you_or_other_please_unlock"));
    return;
  }

  if (targetState === "Archived"){if(!confirm(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.confirm_promote_to_archived"))){return;}}
  if (targetState === "Active")  {if(!confirm(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.confirm_promote_to_active"))){return;}}

  var argsItem = innovator.newItem(eArg.rowItemType,"get");
  argsItem.setAttribute("select","id,name,state,owned_by_id,managed_by_id,team_id");
  argsItem.setID(eArg.rowItemId);
  argsItem = argsItem.apply();

  var folderCurState = argsItem.getProperty("state","");
  if (folderCurState === targetState) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_already_in_status_x")+targetState+" !");
    return;
  }
  if (targetState === "Active" && folderCurState !== "Planning") {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_must_be_in_status_planning"));
    return;
  }
  if (targetState === "Archived" && folderCurState !== "Active") {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_must_be_in_status_active"));
    return;
  }

  argsItem.setProperty("state",targetState); // state to promote to
  top.aras.evalMethod ("Item Folders Promote DownA",argsItem.dom.xml);
  
  return;
};

fn_onLockRowItem = function (eArg) {
  var lockStatus = fn_GetLockedStatusOfItemFromServer(eArg.rowItemType, eArg.rowItemId);
  
  if (lockStatus > 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.already_locked"));
  }
  else {
    // lock the item an report error, if failed
    var res = fn_LockThisItem(eArg.rowItemType, eArg.rowItemId);
    if (res.isError()) {top.aras.AlertError(res.getErrorString());return;}

    // update lock cell of row 
    var col = top.folderGrid1.lockIconColumnNo;
    top.folderGrid1.gridSetCellValue(eArg.selectedId,col,fn_GetLockedCellIconFormatByStatusCode(top.folderGrid1.icons,1));
  }
  return;
};

fn_onUnLockRowItem = function (eArg) {
  var lockStatus = fn_GetLockedStatusOfItemFromServer(eArg.rowItemType, eArg.rowItemId);

  if (lockStatus === 0) {
    top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.item_not_locked"));
  }
  else {
    if (lockStatus > 1) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.cannot_unlock_locked_by_other"));return;}
    // unlock the rowItem
    var res = fn_UnLockThisItem(eArg.rowItemType, eArg.rowItemId);
    if (res.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.unlock_error") + res.getErrorString());return;}
  
    // update lock cell of row 
    top.folderGrid1.gridSetCellValue(eArg.selectedId,top.folderGrid1.lockIconColumnNo,"");
  }
  return;
};
//------ END: local action handlers for menu or toolbar clicks

//------ BEGIN: validation functions
fn_checkRowItemIsLocked = function (selectedId, itemType, itemId, gridLockColumn) {
  // return error msg or "" if lockStatus OK.
  var lockStatus = fn_GetLockedStatusOfItemFromServer(itemType, itemId);
  // update grid in case lock status got change by someone else
  top.folderGrid1.gridSetCellValue(selectedId,gridLockColumn,fn_GetLockedCellIconFormatByStatusCode(top.folderGrid1.icons,lockStatus));

  if (lockStatus === 1) {return "";}  
  if (lockStatus === 0) {return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_row_must_be_locked_for_action");}
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.folder_row_locked_by_other_no_permission_action");
};

//---------------
fn_checkIfAttachmentsOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folder,allowed_relationships' />");
  itm = itm.apply();
  
  var allowedRelsMode = itm.getProperty("allowed_relationships","attachments_and_controlled_items");  //if prop not set use this default
  
  if (allowedRelsMode !== "" && allowedRelsMode.indexOf("attachments") >= 0) {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_files_to_folder_not_allowed");
};

//---------------
fn_checkIfControlledItemsOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folders,allowed_relationships' />");
  itm = itm.apply();
  
  var allowedRelsMode = itm.getProperty("allowed_relationships","attachments_and_controlled_items");  //if prop not set use this default
  
  if (allowedRelsMode !== "" && allowedRelsMode.indexOf("controlled_items") >= 0) {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_ctrld_items_to_folder_not_allowed");
};

//---------------
fn_checkIfSubFoldersOnThisFolderAllowed = function (folderItemId) {
  var itm = top.aras.newIOMItem("","");
  itm.loadAML("<Item type='Item Folder' action='get' serverEvents='0' id='"+folderItemId+"' select='status,allow_sub_folders,allowed_relationships' />");
  itm = itm.apply();

  var allowSubFolders = itm.getProperty("allow_sub_folders","");
  if (allowSubFolders === "") {allowSubFolders = "1";}  // if prop not set, then allow subfolders
  
  if (allowSubFolders === "1") {return "";}  // is allowed
  
  return top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.adding_sub_folder_not_allowed");
};
//------ END: validation functions

//------ BEGIN: local helper functions
fn_getInputRowVals = function () {
    top.folderGrid1.inputRowTdVals = new Array(); // set in global variable
    for (var i=0; i<top.folderGrid1.numberOfGridColumns; i++)
    {
      var cellVal = top.folderGrid1.grid.cells("input_row", i).getValue();
      if (!cellVal) {cellVal = "";}
      top.folderGrid1.inputRowTdVals.push(cellVal);
    }
};
//--------
fn_setInputRowVals = function () {
    if (!top.folderGrid1.inputRowTdVals) {return;}
	for (var i = 0; i < top.folderGrid1.inputRowTdVals.length; i++)
	{
		var elem = top.folderGrid1.inputRowTdVals[i];
		var cell = top.folderGrid1.grid.cells("input_row", elem.colId);
		cell.setValue(elem.val);
	}
};
//--------
fn_clearInputRowVals = function () {
    if (!top.folderGrid1.inputRowTdVals) {return;}
	for (var i = 0; i < top.folderGrid1.inputRowTdVals.length; i++)
	{
		var elem = top.folderGrid1.inputRowTdVals[i];
		var cell = top.folderGrid1.grid.cells("input_row", elem.colId);
		cell.setValue("");
	}
};
//-----------------
fn_InsertControlledItemsGroupRowToTreeGrid = function (parentNodeId, sourceItemId) {
  var groupNodeRowId = sourceItemId + "-" + folderGroupCtrldItemsRowType;
  if (top.folderGrid1.arasRelease === "Aras9") {
   if (top.folderGrid1.grid.isItemExists(groupNodeRowId)) {return groupNodeRowId;}
  }

  // add summary row for documents as child of Folder row
  var vals = [];
  vals[0] = top.folderGrid1.constants.folderGroupCtrldItems_label+":";
  for (var v = 1; v < top.folderGrid1.numberOfGridColumns; v++) {vals[v] = "";}
  var gridRow =  vals.join("|");
  top.folderGrid1.grid.insertNewChild(parentNodeId, groupNodeRowId, gridRow, groupNodeRowId, top.folderGrid1.iconsOpen[folderGroupCtrldItemsRowType], top.folderGrid1.icons[folderGroupCtrldItemsRowType]);
  top.folderGrid1.setGridRowUserData(groupNodeRowId,"gridData_rowItemType",folderGroupCtrldItemsRowType);

  // ColorCode parent row 
  top.folderGrid1.setGridRowUserData(parentNodeId,"gridData_hasFolderDetails","1");
  fn_SetBackgroundColorInRow(groupNodeRowId,0,top.folderGrid1.numberOfGridColumns-1, "#eeeeee",false);
  return groupNodeRowId;
};
//-----------------
fn_InsertFilesGroupRowToTreeGrid = function (parentNodeId, sourceItemId ) {
  var groupNodeRowId = sourceItemId + "-" + folderGroupFilesRowType;
  if (top.folderGrid1.arasRelease === "Aras9") {
   if (top.folderGrid1.grid.isItemExists(groupNodeRowId)) {return groupNodeRowId;}
  }

  // add summary row for files as child of Folder row
  var vals = [];
  vals[0] = top.folderGrid1.constants.folderGroupFiles_label+":";
  for (var v = 1; v < top.folderGrid1.numberOfGridColumns; v++) {vals[v] = "";}
  var gridRow =  vals.join("|");
  top.folderGrid1.grid.insertNewChild(parentNodeId, groupNodeRowId, gridRow, groupNodeRowId, top.folderGrid1.iconsOpen[folderGroupFilesRowType], top.folderGrid1.icons[folderGroupFilesRowType]);
  top.folderGrid1.setGridRowUserData(groupNodeRowId,"gridData_rowItemType",folderGroupFilesRowType);

  // ColorCode parent row 
  top.folderGrid1.setGridRowUserData(parentNodeId,"gridData_hasFolderDetails","1");
  fn_SetBackgroundColorInRow(groupNodeRowId,0,top.folderGrid1.numberOfGridColumns-1, "#eeeeee",false);
  
  return groupNodeRowId;
};
//-----------------
fn_SetBackgroundColorInRow = function (row_id, startCell, endCell, colorCode, upToRoot) {
  if (!upToRoot || upToRoot === undefined) {upToRoot = false;}
  fn_SetBackgroundColorOfCellsInRow(top.folderGrid1.grid, row_id, startCell, endCell, colorCode);
  // include one parent level
  var parent_row_id = top.folderGrid1.grid.getParentId(row_id);
  if (parent_row_id && parent_row_id.indexOf("ROOT") < 0) {fn_SetBackgroundColorOfCellsInRow(top.folderGrid1.grid, parent_row_id, startCell, endCell, colorCode);}

  if (!upToRoot) {return;}
  parent_row_id = top.folderGrid1.grid.getParentId(parent_row_id);
  while (parent_row_id)
  {
    if (parent_row_id.indexOf("ROOT") < 0)
      {fn_SetBackgroundColorOfCellsInRow(top.folderGrid1.grid, parent_row_id, startCell, endCell, colorCode);}
    parent_row_id = top.folderGrid1.grid.getParentId(parent_row_id);
  }
  return;
};
//-------------
fn_enableToolbarControls = function (toolbarCtxt, isOn, isDisableEffectivity, msg) {
  if (!msg && msg === undefined) {msg = top.aras.getResource("ItemFolders","itemfoldertreegrid.message.loading_please_wait");}
  if (!isDisableEffectivity && isDisableEffectivity === undefined) {isDisableEffectivity = false;}
  
  if (isOn) {
//      statusMsgId = fn_showStatusMessage(0, "");
//      if (statusMsgId !== ""){
//        if (fn_clearStatusMessage(statusMsgId)){statusMsgId="";} //reset
//      }
  }
  else  {
  //debugger;
//     if (statusMsgId === ""){statusMsgId = fn_showStatusMessage(0, msg, true);}
  } 
  fn_enableToolbarElement(toolbarCtxt, "expand_all", isOn, false);
  fn_enableToolbarElement(toolbarCtxt, "collapse_all", isOn, false);
  fn_enableToolbarElement(toolbarCtxt, "refresh_all", isOn, false);
  fn_enableToolbarElement(toolbarCtxt, "view_item", isOn, false);
  
  fn_enableToolbarElement(toolbarCtxt, "search_text", false, false);     //always disabled for now
  fn_enableToolbarElement(toolbarCtxt, "execute_search", false, false);  //always disabled for now

  // ensures that at least permission for top folder is granted to switch view to "current" effectivity.
  //debugger;
//  if (fixEffectivityToReleased === true && isOn){fn_enableToolbarElement(toolbarCtxt, "effectivity_mode", false, false);}
  if (isDisableEffectivity && isOn){fn_enableToolbarElement(toolbarCtxt, "effectivity_mode", false, false);}
  else {fn_enableToolbarElement(toolbarCtxt, "effectivity_mode", isOn, false);}
  
  var val = (top.aras.getVariable('ShowLabels') == 'true');
  toolbarCtxt.showLabels(val);
  //toolbarCtxt.focus();
};
//--------------
fn_isUserMemberOfThisItemTeamGuest = function(itm)  {
  return false; //always grants access
 
  //##TODO##
 
  //var teamId = itm.getProperty("team_id");
  
  
  //get team member rows with team role "Team Guest"
  
  //loop rows and check if current user is member of any guest identity. if yes return true
  
  
  //return false;
};
//------ END: local helper functions

// ============================= Toolbar and Menu  Handlers ===============================
fn_onAddSubFolder = function (eArg) {
  var selectedId = eArg.selectedId;
  if (!selectedId) {return;}
  var itemType = eArg.rowItemType;
  var itemId = eArg.rowItemId;

  checkMsg = fn_checkRowItemIsLocked(selectedId,itemType,itemId,top.folderGrid1.lockIconColumnNo);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfSubFoldersOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}
 
  // dialog with sub folder form
  var formNd = top.aras.getItemByName("Form", "Item Folder Add SubFolder", 0);
  var res;
  if (formNd)
  {
    var param = new Object();
    param.title = "Add New Sub Folder";
    param.formId = formNd.getAttribute("id");
    param.aras = top.aras;
    param.itemTypeName = itemType;

    var width = top.aras.getItemProperty(formNd, "width");
    var height = top.aras.getItemProperty(formNd, "height");

    res = showModalDialog("ShowFormAsADialog.html", param,"dialogHeight:"+height+"px; dialogWidth:"+width+"px; " +  "status:0; help:0; resizable:1; scroll:0;");

  if (res) {
    subFolderItem = top.folderGrid1.AddNewSubFolderToFolder(selectedId,itemId,res.org_number,res.name,res.description);
    if (subFolderItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_sub_folder_error") + subFolderItem.getErrorString()); return;} 
  } 
  }
  return;

};

fn_onAddControlledItem = function (eArg, isNew) {
  var selectedId = eArg.selectedId;
  if (!selectedId) {return;}

  var itemType = eArg.rowItemType;

  if (itemType === "CTRLD_ITEMS_GROUP") {selectedId = top.folderGrid1.grid.getParentId(selectedId);}
  if (!selectedId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_grid_row")); return;}
  
  itemType = top.folderGrid1.getGridRowUserData(selectedId,"gridData_rowItemType");
  var itemId = top.folderGrid1.getGridRowUserData(selectedId,"gridData_rowItemID");

  checkMsg = fn_checkRowItemIsLocked(selectedId, itemType, itemId, top.folderGrid1.lockIconColumnNo);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfControlledItemsOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  var ctrldItem;
  if (isNew) {
    // Create temporary Item
    ctrldItem = top.aras.newItem("Folder Controlled Item", "add");
    if(!ctrldItem)	{return;} // canceled
  }
  else {
    var searchItemTypeName = "Folder Controlled Item";
    var param = { aras: top.aras, itemtypeName: searchItemTypeName, multiselect: false };

    var dlgRes = showModalDialog('searchDialog.html', param, 'dialogHeight:450px; dialogWidth:700px; status:0; help:0; resizable:1');
	
    if(!dlgRes) {return;}

    ctrldItem = dlgRes.item; 
    if(!ctrldItem)	{return;} // no item selected
  }
  var folderItem = top.aras.newIOMItem(itemType,"get");
  folderItem.setID(itemId);
  folderItem.setAttribute("select",top.folderGrid1.folderItemSelectProperties);
  folderItem = folderItem.apply();
  
  ctrldItem = top.folderGrid1.AddNewControlledItemToFolder(selectedId,folderItem,ctrldItem,isNew);
  if (ctrldItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_ctrld_item_error") + ctrldItem.getErrorString()); return;} 
   
  return;
};

fn_onAddFileToFolder = function (eArg) {
  var selectedId = eArg.selectedId;
  if (!selectedId) {return;}
  var itemType = eArg.rowItemType;

  if (itemType === "FILES_GROUP") {selectedId = top.folderGrid1.grid.getParentId(selectedId);}
  if (!selectedId) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.error_getting_parent_of_grid_row")); return;}

  itemType = top.folderGrid1.getGridRowUserData(selectedId,"gridData_rowItemType");
  var itemId = top.folderGrid1.getGridRowUserData(selectedId,"gridData_rowItemID");

  checkMsg = fn_checkRowItemIsLocked(selectedId,itemType,itemId, top.folderGrid1.lockIconColumnNo);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}

  checkMsg = fn_checkIfAttachmentsOnThisFolderAllowed(itemId);
  if (checkMsg !== "") {top.aras.AlertError(checkMsg);return;}
  
  var fileItem = fn_showFileDialog();
  if (!fileItem) {return;} //no file selected

  //debugger;
  var folderItem = top.aras.newIOMItem(itemType,"get");
  folderItem.setID(itemId);
  folderItem.setAttribute("select",top.folderGrid1.folderItemSelectProperties);
  folderItem = folderItem.apply();
 
  fileItem = top.folderGrid1.AddNewFileToFolder(selectedId,folderItem,fileItem);
  if (fileItem.isError()) {top.aras.AlertError(top.aras.getResource("ItemFolders", "itemfoldertreegrid.message.add_file_error") + fileItem.getErrorString()); return;}

  return;
};

fn_showFileDialog = function () {
  var fileItem = top.aras.newItem('File');
  //top.aras.itemsCache.addItem(fileItem);
      
  top.folderGrid1.grid.requestFocus();
  if (!fileItem) {return null;}

  return fileItem;
};

// =======  Definition of grid header and columns layout =======
fn_getGridTableColumnHeadingsAndLayout = function (hasVariantColums) {
  // PARAMETERS ARE:
	// Name: name of column, must be the same in all column definitions !!!
	// Title: if Title = undefined,  PropItemType and PropName must be set
	// PropItemType:
  	// PropName:
	// Width: in pixel
	// Align: l,r,c
	// EditType: noedit=disables edit on entire column, FIELD=text input, COMBO=drop down list
	// FilterEdit: same values as EditType. controls if cell in input_row can be edited

	// display order of columns left to right in order listed !!!
	var columnList = [
	{Name: "TREE", Title: top.aras.getResource("ItemFolders","itemfoldertreegrid.gridheading.col0"),		Width: "400",	Align: "l",	EditType: "noedit",FilterEdit: "FIELD"}, 
	{Name: "SORT",	PropItemType: "Item Sub Folder",PropName: "sort_order",									Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "LOCK", 	PropItemType: "Item Folder",PropName: "locked_by_id",									Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "FILES",	PropItemType: "Item Folder",PropName: "has_files",										Width: "40",	Align: "c",	EditType: "noedit"},
	{Name: "STATE", PropItemType: "Item Folder",PropName: "state",											Width: "80",	Align: "c",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "REV",	PropItemType: "Item Folder",PropName: "major_rev",										Width: "40",	Align: "c",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "GEN",	PropItemType: "Item Folder",PropName: "generation",										Width: "40",	Align: "c",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "MOD_ON",PropItemType: "Item Folder",PropName: "modified_on",									Width: "100",	Align: "l",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "OWNER",	PropItemType: "Item Folder",PropName: "owned_by_id",									Width: "120",	Align: "l",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "TEAM",	PropItemType: "Item Folder",PropName: "team_id",										Width: "100",	Align: "l",	EditType: "noedit",FilterEdit: "FIELD"},
	{Name: "DESCR",	PropItemType: "Item Folder",PropName: "description",									Width: "120",	Align: "l",	EditType: "noedit",FilterEdit: "FIELD"}
	];
	
    //fn_getGridTableColumnHeadingsAddSalesCols(columnList);  
	return columnList;
};

fn_getGridTableColumnIndexByName = function (columnList, columnName) {
  for (var idx=0;idx < columnList.length; idx++)
  {
    if (columnList[idx].Name === columnName) {return idx;}
  }
  return -1;
};

fn_getGridTableColumnDefOfFolderRows = function () {
  // COLUMN VALUE PARAMETERS ARE:
	// Class: optional - if missing "DefaultCellClass" will be used. Listed class can overwrite default cell functions,like UI formatting,if used.
	// PropItemType: optional
	// PropName: required, if Class is missing.
	// isRelProp: set to "false", if property value can be retrieved from item; set to "true", if property value can be retrieved from relationship  (if missing, it is set to "false")
	// CellBg: optional - set to a valid color value (i.e. "#ff0000") - if set to keyword "{propCSS}", the background color set in property's CSS will be used.
	// CellStaticValue: optional - if set to a text, it this text will be displayed instead of the property's value 
	// CellLinkKey: optional, CellLinkItemType must be set. 	if set to keyword {OpenRowItem}, the registered type and id of the row will be opened.
    //															if set to keyword {FilesOfRelatedItem}, the files attached to rowItem (i.e. Document will be shown (more rules TBD)
	// isEditable: optional (default= false), set to "true" to allow edits (grid must be set to editable, as well)

    // Index must match a columnName of HeadingsAndLayout !!! 
	var columnList = [];
	columnList["TREE"] =	{PropItemType: "Item Folder",		PropName: "rel.org_number+name"};
	columnList["SORT"] =	{CellStaticValue: "-"};
	columnList["LOCK"] =	{PropItemType: "Item Folder",		PropName: "locked_by_id",					CellValueType: "lock"};
	columnList["FILES"] =	{CellStaticValue: "-"};
	columnList["STATE"] =	{PropItemType: "Item Folder",		PropName: "state",							CellBg: "{propCSS}"};
	columnList["REV"] =		{CellStaticValue: "-"};
	columnList["GEN"] =		{CellStaticValue: "-"};
	columnList["MOD_ON"] =	{CellStaticValue: "-"};
	columnList["OWNER"] =	{PropItemType: "Item Folder",		PropName: "owned_by_id",					CellValueType: "keyed_name"};
	columnList["TEAM"] =	{PropItemType: "Item Folder",		PropName: "team_id",						CellValueType: "keyed_name"};
	columnList["DESCR"] =	{PropItemType: "Item Folder",		PropName: "description"};

	return columnList;
};

fn_getGridTableColumnDefOfCtrlItemsRows = function () {
  // COLUMN VALUE PARAMETERS ARE:
	// Class: optional - if missing "DefaultCellClass" will be used. Listed class can overwrite default cell functions,like UI formatting,if used.
	// PropItemType: optional
	// PropName: required, if Class is missing.
	// isRelProp: set to "false", if property value can be retrieved from item; set to "true", if property value can be retrieved from relationship  (if missing, it is set to "false")
	// CellBg: optional - set to a valid color value (i.e. "#ff0000") - if set to keyword "{propCSS}", the background color set in property's CSS will be used.
	// CellStaticValue: optional - if set to a text, it this text will be displayed instead of the property's value 
	// CellLinkKey: optional, CellLinkItemType must be set. 	if set to keyword {OpenRowItem}, the registered type and id of the row will be opened.
    //															if set to keyword {FilesOfRelatedItem}, the files attached to rowItem (i.e. Document will be shown (more rules TBD)
	// isEditable: optional (default= false), set to "true" to allow edits (grid must be set to editable, as well)

    // Index must match a columnName of HeadingsAndLayout !!! 
	var columnList = [];
	columnList["TREE"] =	{PropItemType: "Folder Controlled Item",		PropName: "item_number+name", 					CellLinkKey:"{OpenRowItem}"};
	columnList["SORT"] =	{PropItemType: "Item Folder Controlled Item",	PropName: "sort_order",isRelProp: true};
	columnList["LOCK"] =	{PropItemType: "Folder Controlled Item",		PropName: "locked_by_id",					CellValueType: "lock"};
	columnList["FILES"] =	{PropItemType: "Folder Controlled Item",		PropName: "has_files_icon",					CellValueType: "icon", CellLinkKey:"{FilesOfRelatedItem}"};
	columnList["STATE"] =	{PropItemType: "Folder Controlled Item",		PropName: "state",							CellBg: "{propCSS}"};
	columnList["REV"] =		{PropItemType: "Folder Controlled Item",		PropName: "major_rev"};
	columnList["GEN"] =		{PropItemType: "Folder Controlled Item",		PropName: "generation"};
	columnList["MOD_ON"] =	{PropItemType: "Folder Controlled Item",		PropName: "modified_on",					CellValueType: "date"};
	columnList["OWNER"] =	{PropItemType: "Folder Controlled Item",		PropName: "owned_by_id",					CellValueType: "keyed_name"};
	columnList["TEAM"] =	{PropItemType: "Folder Controlled Item",		PropName: "team_id",						CellValueType: "keyed_name"};
	columnList["DESCR"] =	{PropItemType: "Folder Controlled Item",		PropName: "description"};

    //fn_getGridTableColumnDefOfCtrlItemsRowsAddFlexCols(columnList);
	return columnList;
};

fn_getGridTableColumnDefOfFileRows = function () {
  // COLUMN VALUE PARAMETERS ARE:
	// Class: optional - if missing "DefaultCellClass" will be used. Listed class can overwrite default cell functions,like UI formatting,if used.
	// PropItemType: optional
	// PropName: required, if Class is missing.
	// isRelProp: set to "false", if property value can be retrieved from item; set to "true", if property value can be retrieved from relationship  (if missing, it is set to "false")
	// CellBg: optional - set to a valid color value (i.e. "#ff0000") - if set to keyword "{propCSS}", the background color set in property's CSS will be used.
	// CellStaticValue: optional - if set to a text, it this text will be displayed instead of the property's value 
	// CellLinkKey: optional, CellLinkItemType must be set. 	if set to keyword {OpenRowItem}, the registered type and id of the row will be opened.
    //															if set to keyword {FilesOfRelatedItem}, the files attached to rowItem (i.e. Document will be shown (more rules TBD)
	// isEditable: optional (default= false), set to "true" to allow edits (grid must be set to editable, as well)

    // Index must match a columnName of HeadingsAndLayout !!! 
	var columnList = [];
	columnList["TREE"] =	{PropItemType: "File",				PropName: "filename",	 					CellLinkKey:"{OpenRowItem}"};
	columnList["SORT"] =	{PropItemType: "Item Folder File",	PropName: "sort_order",isRelProp: true};
	columnList["LOCK"] =	{PropItemType: "File",				PropName: "locked_by_id",					CellValueType: "lock"};
	columnList["FILES"] =	{PropItemType: "File",				PropName: "is_shared",isRelProp: true,		Class: isSharedFileCellClass};
	columnList["STATE"] =	{CellStaticValue: "-"};
	columnList["REV"] =		{CellStaticValue: "-"};
	columnList["GEN"] =		{PropItemType: "File",				PropName: "generation"};
	columnList["MOD_ON"] =	{PropItemType: "File",				PropName: "modified_on",					CellValueType: "date"};
	columnList["OWNER"] =	{CellStaticValue: "-"};
	columnList["TEAM"] =	{CellStaticValue: "-"};
	columnList["DESCR"] =	{PropItemType: "Item Folder File",	PropName: "comments",isRelProp: true};

    //fn_getGridTableColumnDefOfCtrlItemsRowsAddFlexCols(columnList);
	return columnList;
};

function isSharedFileCellClass() { }
isSharedFileCellClass.prototype = new DefaultCellClass();

isSharedFileCellClass.prototype.convertValueForUI = function(value) {
  if (value == "1") {
    value = "<img src='"+"../images/icons/GridIcons/is_shared.gif"+"'/>";
  }
  else {
    value = "";
  }
  return value;
};]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Item Folder Struct Grid Handler</name>
 </Item>
</AML>