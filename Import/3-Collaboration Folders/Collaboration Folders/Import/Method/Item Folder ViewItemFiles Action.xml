<AML>
 <Item type="Method" id="83989FB850D944B7BEEAFA2BA40F6064" action="add">
  <comments>also called from Item Folder Structure grid</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[//debugger;
// called from other client method
var inn = this.getInnovator();
var thisItemId = this.getAttribute("id","");
var thisItemType = this.getAttribute("type","");

if (thisItemId === "" || thisItemType === "") {return inn.newError("in Args missing!");}

//--- helper functions
buildResultItem = function (inn, resString) 
{
  var resItem = inn.newItem("","");
  resItem.loadAML("<Result>"+resString+"</Result>");
  return resItem;
};

// default err, if type not supported
var thisItem = inn.newError("ItemType '" + thisItemType + "' is not supported by this action");
var thisItemFileRel = "";
switch (thisItemType) {
  case "Item Folder":
    thisItemFileRel = "Item Folder File";
    thisItem = inn.getItemById(thisItemType,thisItemId);
    break;
  case "Document":
    thisItemFileRel = "Document File";
    thisItem = inn.getItemById(thisItemType,thisItemId);
    break;
}
if (thisItem.isError()){ return top.aras.AlertError (thisItem); } 

var qry = top.aras.newIOMItem("","");
qry.loadAML("<Item type='" + thisItemFileRel + "' action='get' select='source_id,related_id(filename,keyed_name),is_shared' />");
qry.setProperty("source_id",thisItemId);
var itemFileRels = qry.apply();

if (itemFileRels.getItemCount() <= 0) {
  return inn.newError("No files atteched to this item !");
}

// check if only 1 file found
var fileRelItem;
if (itemFileRels.getItemCount() == 1) {
  fileRelItem = itemFileRels.getItemByIndex(0);
    
  var fname=fileRelItem.getPropertyItem("related_id").getProperty("filename","");
  fname = fname.toLowerCase();
  
  // read list of extensions from variable item
  var q  = inn.newItem("Variable", "get");
  q.setAttribute("select", "value,name");
  q.setProperty("name", "File Ext to View single File");
  var r = q.apply();
  var fileExtList="txt,pdf,doc,docx,ppt,pptx,xls,xlsx";
  var viewSinlgeFileNow = false;
  if (! r.isError()) 
  {
    // scan list read from variable
    // use defaults, if no value set  
    fileExtList = r.getProperty("value","txt,pdf,doc,docx,ppt,pptx,xls,xlsx");
  }
  if (fileExtList !== "") {
    fileExtList = fileExtList.toLowerCase();
    fileExtList = fileExtList.replace(/ /g,""); //remove spaces
    var ext_array = fileExtList.split(",");
    for (i = 0 ; ext_array[0] !== "" && i < ext_array.length && !viewSinlgeFileNow ; i++) {
       if (fname.indexOf(ext_array[i])> 0){viewSinlgeFileNow=true;}
    }
  }

  if (viewSinlgeFileNow)
  {
     if (!top.aras.uiFindWindowEx(fileRelItem.getProperty("related_id","")))
     {
       top.aras.uiShowItem("File", fileRelItem.getProperty("related_id","") );
       //##old return inn.newResult("OK");
	   return buildResultItem(inn,"OK");
     }
  }
}
// if multiple files attached show dialog with grid
var dialogFormName = "Item Folder RelatedFiles Grid";
var formNd = top.aras.getItemByName("Form", dialogFormName, 0);
if (formNd)
{
  var param = new Object();
  param.title = "Files of: '" + thisItem.getProperty("keyed_name","") + "'";
  param.formId = formNd.getAttribute("id");
  param.aras = top.aras;
  param.itemTypeName = thisItem.GetType();
  param.item = thisItem;

  thisItem.setProperty("file_relationship",thisItemFileRel);

  var width = top.aras.getItemProperty(formNd, "width");
  var height = top.aras.getItemProperty(formNd, "height");

  var res = showModalDialog("ShowFormAsADialog.html", param,"dialogHeight:"+height+"px; dialogWidth:"+width+"px; " +  "status:0; help:0; resizable:1; scroll:0;");
  if (res) {
   if (res.isError()) {
     top.aras.AlertError("Error with RelatedFiles Grid Grid. " + res.getErrorString());
     return inn.newError(res.getErrorString());
   }
  }
}
//##old return inn.newResult("OK");
return buildResultItem(inn,"OK");
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Item Folder ViewItemFiles Action</name>
 </Item>
</AML>