<AML>
 <Item type="Method" id="8E13866075974046863EE386A8505CB8" action="add">
  <comments>use action "Run Server Method" -  Deletes orphaned PRIVATE Teams</comments>
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[  //System.Diagnostics.Debugger.Break()
  
  // run as root
  Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Super User");
  bool PermissionWasSet = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

  Item amlCmd = this.newItem("Team","get");
  amlCmd.setAttribute("select","id,private_team_item_id_string,description");
  Item teamItems = amlCmd.apply();
  
  for (int i=0; i<teamItems.getItemCount(); i++) {
  	string configID = teamItems.getItemByIndex(i).getProperty("private_team_item_id_string","");
  	if (configID == "") {
  	  //'old version of Folder solution has config id in team's description
  	  configID = teamItems.getItemByIndex(i).getProperty("description","");
  	  if (configID != "") {
  	    int pos = configID.IndexOf("config-");
  	    if (pos >=0) {
  	      configID = configID.Substring(7,configID.Length-7);
  	    }
		else {
  	      configID = "";
        }
  	  }
    }
    if (configID != "") {
  	  if (isTeamOrpaned(configID)) {
  	    // delete this team
  	    teamItems.getItemByIndex(i).apply("delete");
  	  }
  	}
  }

  // Revoke 'Aras PLM' permissions
  if (PermissionWasSet) {Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);}
  
  return this;
}  
// -- end of Main --

//----------
bool isTeamOrpaned( string itemConfigId) {
  string SQLstr = "";

  // list of item types that may have 'private' teams assigned
  string ItemTypesToCheck = "cFolder,Project,Program,Document,Part,CAD";
  
  string[] ItemTypesList = ItemTypesToCheck.Split(',');
  for (int i=0; i<ItemTypesList.Length && ItemTypesList[0] != ""; i++) {
    string TN = "[" + ItemTypesList[i].Replace(" ","_") + "]";
    SQLstr = "SELECT " + TN + ".id FROM " + TN + "WHERE " + TN + ".config_id='" + itemConfigId + "'";
    Item resItems = this.getInnovator().applySQL(SQLstr);
    // is team still connected to an item ?
    if (resItems.getItemCount() > 0) {return false;}
  }

  //team is not connected to any existing item of specified item types
  return true;
}  
  
void endOfMethod () {


]]></method_code>
  <method_type>C#</method_type>
  <name>cFolder Admin DelOrphanedTeam</name>
 </Item>
</AML>