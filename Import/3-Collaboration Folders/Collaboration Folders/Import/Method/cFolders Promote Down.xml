<AML>
 <Item type="Method" id="CE56727260CA4A538A2B2B88711A1E67" action="add">
  <comments>called from grid or action - promotes Folders including all sub folders</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// this method must be called from an item action
// from ItemTypes: "cFolder"
// property "state" must contain the target status to promote all to.

//System.Diagnostics.Debugger.Break();
string thisItemType = this.getType();
string thisItemId = this.getID();
string targetStatus = this.getProperty("state","");

Innovator inn = this.getInnovator();
bool isPromoteAsArasPLM = (this.getAttribute("promoteAsArasPLM","0") == "1");
bool includeSubFolders = (this.getAttribute("includeSubFolders","0") == "1");

// run some checks first ...
if (thisItemType == "") {
  return inn.newError("Item type '" + thisItemType + "' in context not allowd. Must be of type 'cFolder'");
}
if (targetStatus == "") {
  return inn.newError("Property 'state' missing for cFolder ('" + thisItemId + "')");
}

// Make sure the current user Is In the Owner identity (if promote as ArasPLM is off)
string ownedById = this.getProperty("owned_by_id");
if (!isPromoteAsArasPLM && !CCO.Permissions.IdentityListHasId(Aras.Server.Security.Permissions.Current.IdentitiesList, ownedById)) {
  return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_YouMustBeAMember", this.getPropertyAttribute("owned_by_id","keyed_name","Owner")));
}
string folderIdsList = "";
if (includeSubFolders) {
	// Call utitity method To traverse Class hierarchy
	Item qryItem = this.newItem("cFolder","Get ItemIDs of Structure Down");
	qryItem.setAttribute("relationshipName","Sub cFolder");
	qryItem.setID(thisItemId);
	qryItem.setAttribute("stopAtLevel","-1");
	qryItem = qryItem.apply();
	folderIdsList = qryItem.getResult();
	// add this folder id to list
	if (folderIdsList == "") {folderIdsList = thisItemId;}
	else {folderIdsList = thisItemId + "," + folderIdsList;}
}
else {
	folderIdsList = thisItemId;
}

// loop through all ids and try to promote these folders
bool suIdentityWasGranted = false;
Aras.Server.Security.Identity suIdentity = null;
if (isPromoteAsArasPLM) {
// do a promoteItem with role of identity "Aras PLM"
  suIdentity = Aras.Server.Security.Identity.GetByName("Aras PLM");
  suIdentityWasGranted = Aras.Server.Security.Permissions.GrantIdentity(suIdentity);
}
string[] folderIds = folderIdsList.Split(',');
string warningFolderNames = "";
for (int i=0; i<folderIds.Length && folderIds[0] != ""; i++) {
  Item thisItem = this.newItem(thisItemType,"get");
  thisItem.setID(folderIds[i]);
  thisItem.setAttribute("serverEvents","0");
  thisItem.setAttribute("select","name,locked_by_id,owned_by_id,managed_by_id,team_id,state");
  thisItem = thisItem.apply();
  
  // run some checks
  bool doPromote = true;
  if (thisItem.getProperty("locked_by_id","") != "") {doPromote = false;}
  ownedById = thisItem.getProperty("owned_by_id");
  if (!CCO.Permissions.IdentityListHasId(Aras.Server.Security.Permissions.Current.IdentitiesList, ownedById)) {doPromote = false;}

  if (!doPromote) {warningFolderNames = warningFolderNames + "," + thisItem.getProperty("name","");}
  
  // do the promote
  if (warningFolderNames == "" && thisItem.getProperty("state","") != targetStatus) {
    thisItem.setAction("promoteItem");
    thisItem.setProperty("state",targetStatus);
    thisItem = thisItem.apply();
    if (thisItem.isError()) {
      if (suIdentityWasGranted) {Aras.Server.Security.Permissions.RevokeIdentity(suIdentity);}
      return thisItem;
    }
  }
}

if (suIdentityWasGranted) {Aras.Server.Security.Permissions.RevokeIdentity(suIdentity);}

if (warningFolderNames != "") { return inn.newResult("Some folders are locked or you are not the owner (" + warningFolderNames + "). Promote action was skipped for these folders !");}

return inn.newResult("");]]></method_code>
  <method_type>C#</method_type>
  <name>cFolders Promote Down</name>
 </Item>
</AML>